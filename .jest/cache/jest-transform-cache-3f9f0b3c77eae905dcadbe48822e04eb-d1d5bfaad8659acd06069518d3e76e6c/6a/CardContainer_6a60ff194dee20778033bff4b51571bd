f4a3b6a9882402814a715568be10bbc7
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _native = require("@react-navigation/native");

var _Card = _interopRequireDefault(require("./Card"));

var _HeaderHeightContext = _interopRequireDefault(require("../../utils/HeaderHeightContext"));

var _HeaderShownContext = _interopRequireDefault(require("../../utils/HeaderShownContext"));

var _PreviousSceneContext = _interopRequireDefault(require("../../utils/PreviousSceneContext"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var EPSILON = 0.1;

function CardContainer(_ref) {
  var active = _ref.active,
      cardOverlay = _ref.cardOverlay,
      cardOverlayEnabled = _ref.cardOverlayEnabled,
      cardShadowEnabled = _ref.cardShadowEnabled,
      cardStyle = _ref.cardStyle,
      cardStyleInterpolator = _ref.cardStyleInterpolator,
      closing = _ref.closing,
      gesture = _ref.gesture,
      focused = _ref.focused,
      gestureDirection = _ref.gestureDirection,
      gestureEnabled = _ref.gestureEnabled,
      gestureResponseDistance = _ref.gestureResponseDistance,
      gestureVelocityImpact = _ref.gestureVelocityImpact,
      getPreviousScene = _ref.getPreviousScene,
      getFocusedRoute = _ref.getFocusedRoute,
      mode = _ref.mode,
      headerMode = _ref.headerMode,
      headerShown = _ref.headerShown,
      headerStyleInterpolator = _ref.headerStyleInterpolator,
      hasAbsoluteHeader = _ref.hasAbsoluteHeader,
      headerHeight = _ref.headerHeight,
      onHeaderHeightChange = _ref.onHeaderHeightChange,
      isParentHeaderShown = _ref.isParentHeaderShown,
      index = _ref.index,
      layout = _ref.layout,
      onCloseRoute = _ref.onCloseRoute,
      onOpenRoute = _ref.onOpenRoute,
      onPageChangeCancel = _ref.onPageChangeCancel,
      onPageChangeConfirm = _ref.onPageChangeConfirm,
      onPageChangeStart = _ref.onPageChangeStart,
      onGestureCancel = _ref.onGestureCancel,
      onGestureEnd = _ref.onGestureEnd,
      onGestureStart = _ref.onGestureStart,
      onTransitionEnd = _ref.onTransitionEnd,
      onTransitionStart = _ref.onTransitionStart,
      renderHeader = _ref.renderHeader,
      renderScene = _ref.renderScene,
      safeAreaInsetBottom = _ref.safeAreaInsetBottom,
      safeAreaInsetLeft = _ref.safeAreaInsetLeft,
      safeAreaInsetRight = _ref.safeAreaInsetRight,
      safeAreaInsetTop = _ref.safeAreaInsetTop,
      scene = _ref.scene,
      transitionSpec = _ref.transitionSpec;

  var handleOpen = function handleOpen() {
    var route = scene.route;
    onTransitionEnd === null || onTransitionEnd === void 0 ? void 0 : onTransitionEnd({
      route: route
    }, false);
    onOpenRoute({
      route: route
    });
  };

  var handleClose = function handleClose() {
    var route = scene.route;
    onTransitionEnd === null || onTransitionEnd === void 0 ? void 0 : onTransitionEnd({
      route: route
    }, true);
    onCloseRoute({
      route: route
    });
  };

  var handleGestureBegin = function handleGestureBegin() {
    var route = scene.route;
    onPageChangeStart === null || onPageChangeStart === void 0 ? void 0 : onPageChangeStart();
    onGestureStart === null || onGestureStart === void 0 ? void 0 : onGestureStart({
      route: route
    });
  };

  var handleGestureCanceled = function handleGestureCanceled() {
    var route = scene.route;
    onPageChangeCancel === null || onPageChangeCancel === void 0 ? void 0 : onPageChangeCancel();
    onGestureCancel === null || onGestureCancel === void 0 ? void 0 : onGestureCancel({
      route: route
    });
  };

  var handleGestureEnd = function handleGestureEnd() {
    var route = scene.route;
    onGestureEnd === null || onGestureEnd === void 0 ? void 0 : onGestureEnd({
      route: route
    });
  };

  var handleTransition = function handleTransition(_ref2) {
    var closing = _ref2.closing,
        gesture = _ref2.gesture;
    var route = scene.route;

    if (!gesture) {
      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm(true);
    } else if (active && closing) {
      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm(false);
    } else {
      onPageChangeCancel === null || onPageChangeCancel === void 0 ? void 0 : onPageChangeCancel();
    }

    onTransitionStart === null || onTransitionStart === void 0 ? void 0 : onTransitionStart({
      route: route
    }, closing);
  };

  var insets = {
    top: safeAreaInsetTop,
    right: safeAreaInsetRight,
    bottom: safeAreaInsetBottom,
    left: safeAreaInsetLeft
  };

  var _ref3 = (0, _native.useTheme)(),
      colors = _ref3.colors;

  var _React$useState = React.useState('box-none'),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      pointerEvents = _React$useState2[0],
      setPointerEvents = _React$useState2[1];

  React.useEffect(function () {
    var _scene$progress$next, _scene$progress$next$;

    var listener = (_scene$progress$next = scene.progress.next) === null || _scene$progress$next === void 0 ? void 0 : (_scene$progress$next$ = _scene$progress$next.addListener) === null || _scene$progress$next$ === void 0 ? void 0 : _scene$progress$next$.call(_scene$progress$next, function (_ref4) {
      var value = _ref4.value;
      setPointerEvents(value <= EPSILON ? 'box-none' : 'none');
    });
    return function () {
      if (listener) {
        var _scene$progress$next2, _scene$progress$next3;

        (_scene$progress$next2 = scene.progress.next) === null || _scene$progress$next2 === void 0 ? void 0 : (_scene$progress$next3 = _scene$progress$next2.removeListener) === null || _scene$progress$next3 === void 0 ? void 0 : _scene$progress$next3.call(_scene$progress$next2, listener);
      }
    };
  }, [pointerEvents, scene.progress.next]);
  var isCurrentHeaderShown = headerMode !== 'none' && headerShown !== false;
  var previousScene = getPreviousScene({
    route: scene.route
  });
  return React.createElement(_Card.default, {
    index: index,
    gestureDirection: gestureDirection,
    layout: layout,
    insets: insets,
    gesture: gesture,
    current: scene.progress.current,
    next: scene.progress.next,
    closing: closing,
    onOpen: handleOpen,
    onClose: handleClose,
    overlay: cardOverlay,
    overlayEnabled: cardOverlayEnabled,
    shadowEnabled: cardShadowEnabled,
    onTransition: handleTransition,
    onGestureBegin: handleGestureBegin,
    onGestureCanceled: handleGestureCanceled,
    onGestureEnd: handleGestureEnd,
    gestureEnabled: gestureEnabled,
    gestureResponseDistance: gestureResponseDistance,
    gestureVelocityImpact: gestureVelocityImpact,
    transitionSpec: transitionSpec,
    styleInterpolator: cardStyleInterpolator,
    accessibilityElementsHidden: !focused,
    importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',
    pointerEvents: active ? 'box-none' : pointerEvents,
    pageOverflowEnabled: headerMode === 'screen' && mode === 'card',
    containerStyle: hasAbsoluteHeader ? {
      marginTop: headerHeight
    } : null,
    contentStyle: [{
      backgroundColor: colors.background
    }, cardStyle],
    style: [{
      overflow: active ? undefined : 'hidden'
    }, _reactNative.StyleSheet.absoluteFill]
  }, React.createElement(_reactNative.View, {
    style: styles.container
  }, React.createElement(_reactNative.View, {
    style: styles.scene
  }, React.createElement(_PreviousSceneContext.default.Provider, {
    value: previousScene
  }, React.createElement(_HeaderShownContext.default.Provider, {
    value: isParentHeaderShown || isCurrentHeaderShown
  }, React.createElement(_HeaderHeightContext.default.Provider, {
    value: headerHeight
  }, renderScene({
    route: scene.route
  }))))), headerMode === 'screen' ? renderHeader({
    mode: 'screen',
    layout: layout,
    insets: insets,
    scenes: [previousScene, scene],
    getPreviousScene: getPreviousScene,
    getFocusedRoute: getFocusedRoute,
    gestureDirection: gestureDirection,
    styleInterpolator: headerStyleInterpolator,
    onContentHeightChange: onHeaderHeightChange
  }) : null));
}

var _default = React.memo(CardContainer);

exports.default = _default;

var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: 'column-reverse'
  },
  scene: {
    flex: 1
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
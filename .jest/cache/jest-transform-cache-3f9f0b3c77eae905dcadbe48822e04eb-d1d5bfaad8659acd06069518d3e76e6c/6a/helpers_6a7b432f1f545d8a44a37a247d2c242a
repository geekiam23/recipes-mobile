c88d960c94ab878010caa9e52d1684e1
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getWindowFromNode = getWindowFromNode;
exports.getDocument = getDocument;
exports.checkContainerType = checkContainerType;
exports.jestFakeTimersAreEnabled = jestFakeTimersAreEnabled;
exports.TEXT_NODE = void 0;
var TEXT_NODE = 3;
exports.TEXT_NODE = TEXT_NODE;

function jestFakeTimersAreEnabled() {
  if (typeof jest !== 'undefined' && jest !== null) {
    return setTimeout._isMockFunction === true || Object.prototype.hasOwnProperty.call(setTimeout, 'clock');
  }

  return false;
}

function getDocument() {
  if (typeof window === 'undefined') {
    throw new Error('Could not find default container');
  }

  return window.document;
}

function getWindowFromNode(node) {
  if (node.defaultView) {
    return node.defaultView;
  } else if (node.ownerDocument && node.ownerDocument.defaultView) {
    return node.ownerDocument.defaultView;
  } else if (node.window) {
    return node.window;
  } else if (node.then instanceof Function) {
    throw new Error("It looks like you passed a Promise object instead of a DOM node. Did you do something like `fireEvent.click(screen.findBy...` when you meant to use a `getBy` query `fireEvent.click(screen.getBy...`, or await the findBy query `fireEvent.click(await screen.findBy...`?");
  } else if (Array.isArray(node)) {
    throw new Error("It looks like you passed an Array instead of a DOM node. Did you do something like `fireEvent.click(screen.getAllBy...` when you meant to use a `getBy` query `fireEvent.click(screen.getBy...`?");
  } else if (typeof node.debug === 'function' && typeof node.logTestingPlaygroundURL === 'function') {
    throw new Error("It looks like you passed a `screen` object. Did you do something like `fireEvent.click(screen, ...` when you meant to use a query, e.g. `fireEvent.click(screen.getBy..., `?");
  } else {
    throw new Error("Unable to find the \"window\" object for the given node. Please file an issue with the code that's causing you to see this error: https://github.com/testing-library/dom-testing-library/issues/new");
  }
}

function checkContainerType(container) {
  if (!container || !(typeof container.querySelector === 'function') || !(typeof container.querySelectorAll === 'function')) {
    throw new TypeError("Expected container to be an Element, a Document or a DocumentFragment but got " + getTypeName(container) + ".");
  }

  function getTypeName(object) {
    if (typeof object === 'object') {
      return object === null ? 'null' : object.constructor.name;
    }

    return typeof object;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhlbHBlcnMuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZXRXaW5kb3dGcm9tTm9kZSIsImdldERvY3VtZW50IiwiY2hlY2tDb250YWluZXJUeXBlIiwiamVzdEZha2VUaW1lcnNBcmVFbmFibGVkIiwiVEVYVF9OT0RFIiwiamVzdCIsInNldFRpbWVvdXQiLCJfaXNNb2NrRnVuY3Rpb24iLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJ3aW5kb3ciLCJFcnJvciIsImRvY3VtZW50Iiwibm9kZSIsImRlZmF1bHRWaWV3Iiwib3duZXJEb2N1bWVudCIsInRoZW4iLCJGdW5jdGlvbiIsIkFycmF5IiwiaXNBcnJheSIsImRlYnVnIiwibG9nVGVzdGluZ1BsYXlncm91bmRVUkwiLCJjb250YWluZXIiLCJxdWVyeVNlbGVjdG9yIiwicXVlcnlTZWxlY3RvckFsbCIsIlR5cGVFcnJvciIsImdldFR5cGVOYW1lIiwib2JqZWN0IiwiY29uc3RydWN0b3IiLCJuYW1lIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsRUFBQUEsS0FBSyxFQUFFO0FBRG9DLENBQTdDO0FBR0FELE9BQU8sQ0FBQ0UsaUJBQVIsR0FBNEJBLGlCQUE1QjtBQUNBRixPQUFPLENBQUNHLFdBQVIsR0FBc0JBLFdBQXRCO0FBQ0FILE9BQU8sQ0FBQ0ksa0JBQVIsR0FBNkJBLGtCQUE3QjtBQUNBSixPQUFPLENBQUNLLHdCQUFSLEdBQW1DQSx3QkFBbkM7QUFDQUwsT0FBTyxDQUFDTSxTQUFSLEdBQW9CLEtBQUssQ0FBekI7QUFHQSxJQUFNQSxTQUFTLEdBQUcsQ0FBbEI7QUFDQU4sT0FBTyxDQUFDTSxTQUFSLEdBQW9CQSxTQUFwQjs7QUFFQSxTQUFTRCx3QkFBVCxHQUFvQztBQUVsQyxNQUFJLE9BQU9FLElBQVAsS0FBZ0IsV0FBaEIsSUFBK0JBLElBQUksS0FBSyxJQUE1QyxFQUFrRDtBQUNoRCxXQUNFQyxVQUFVLENBQUNDLGVBQVgsS0FBK0IsSUFBL0IsSUFDQVgsTUFBTSxDQUFDWSxTQUFQLENBQWlCQyxjQUFqQixDQUFnQ0MsSUFBaEMsQ0FBcUNKLFVBQXJDLEVBQWlELE9BQWpELENBRkY7QUFJRDs7QUFHRCxTQUFPLEtBQVA7QUFDRDs7QUFFRCxTQUFTTCxXQUFULEdBQXVCO0FBRXJCLE1BQUksT0FBT1UsTUFBUCxLQUFrQixXQUF0QixFQUFtQztBQUNqQyxVQUFNLElBQUlDLEtBQUosQ0FBVSxrQ0FBVixDQUFOO0FBQ0Q7O0FBRUQsU0FBT0QsTUFBTSxDQUFDRSxRQUFkO0FBQ0Q7O0FBRUQsU0FBU2IsaUJBQVQsQ0FBMkJjLElBQTNCLEVBQWlDO0FBQy9CLE1BQUlBLElBQUksQ0FBQ0MsV0FBVCxFQUFzQjtBQUVwQixXQUFPRCxJQUFJLENBQUNDLFdBQVo7QUFDRCxHQUhELE1BR08sSUFBSUQsSUFBSSxDQUFDRSxhQUFMLElBQXNCRixJQUFJLENBQUNFLGFBQUwsQ0FBbUJELFdBQTdDLEVBQTBEO0FBRS9ELFdBQU9ELElBQUksQ0FBQ0UsYUFBTCxDQUFtQkQsV0FBMUI7QUFDRCxHQUhNLE1BR0EsSUFBSUQsSUFBSSxDQUFDSCxNQUFULEVBQWlCO0FBRXRCLFdBQU9HLElBQUksQ0FBQ0gsTUFBWjtBQUNELEdBSE0sTUFHQSxJQUFJRyxJQUFJLENBQUNHLElBQUwsWUFBcUJDLFFBQXpCLEVBQW1DO0FBQ3hDLFVBQU0sSUFBSU4sS0FBSiw4UUFBTjtBQUNELEdBRk0sTUFFQSxJQUFJTyxLQUFLLENBQUNDLE9BQU4sQ0FBY04sSUFBZCxDQUFKLEVBQXlCO0FBQzlCLFVBQU0sSUFBSUYsS0FBSixvTUFBTjtBQUNELEdBRk0sTUFFQSxJQUFJLE9BQU9FLElBQUksQ0FBQ08sS0FBWixLQUFzQixVQUF0QixJQUFvQyxPQUFPUCxJQUFJLENBQUNRLHVCQUFaLEtBQXdDLFVBQWhGLEVBQTRGO0FBQ2pHLFVBQU0sSUFBSVYsS0FBSixnTEFBTjtBQUNELEdBRk0sTUFFQTtBQUVMLFVBQU0sSUFBSUEsS0FBSix1TUFBTjtBQUNEO0FBQ0Y7O0FBRUQsU0FBU1Ysa0JBQVQsQ0FBNEJxQixTQUE1QixFQUF1QztBQUNyQyxNQUFJLENBQUNBLFNBQUQsSUFBYyxFQUFFLE9BQU9BLFNBQVMsQ0FBQ0MsYUFBakIsS0FBbUMsVUFBckMsQ0FBZCxJQUFrRSxFQUFFLE9BQU9ELFNBQVMsQ0FBQ0UsZ0JBQWpCLEtBQXNDLFVBQXhDLENBQXRFLEVBQTJIO0FBQ3pILFVBQU0sSUFBSUMsU0FBSixvRkFBK0ZDLFdBQVcsQ0FBQ0osU0FBRCxDQUExRyxPQUFOO0FBQ0Q7O0FBRUQsV0FBU0ksV0FBVCxDQUFxQkMsTUFBckIsRUFBNkI7QUFDM0IsUUFBSSxPQUFPQSxNQUFQLEtBQWtCLFFBQXRCLEVBQWdDO0FBQzlCLGFBQU9BLE1BQU0sS0FBSyxJQUFYLEdBQWtCLE1BQWxCLEdBQTJCQSxNQUFNLENBQUNDLFdBQVAsQ0FBbUJDLElBQXJEO0FBQ0Q7O0FBRUQsV0FBTyxPQUFPRixNQUFkO0FBQ0Q7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5nZXRXaW5kb3dGcm9tTm9kZSA9IGdldFdpbmRvd0Zyb21Ob2RlO1xuZXhwb3J0cy5nZXREb2N1bWVudCA9IGdldERvY3VtZW50O1xuZXhwb3J0cy5jaGVja0NvbnRhaW5lclR5cGUgPSBjaGVja0NvbnRhaW5lclR5cGU7XG5leHBvcnRzLmplc3RGYWtlVGltZXJzQXJlRW5hYmxlZCA9IGplc3RGYWtlVGltZXJzQXJlRW5hYmxlZDtcbmV4cG9ydHMuVEVYVF9OT0RFID0gdm9pZCAwO1xuLy8gQ29uc3RhbnQgbm9kZS5ub2RlVHlwZSBmb3IgdGV4dCBub2Rlcywgc2VlOlxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL05vZGUvbm9kZVR5cGUjTm9kZV90eXBlX2NvbnN0YW50c1xuY29uc3QgVEVYVF9OT0RFID0gMztcbmV4cG9ydHMuVEVYVF9OT0RFID0gVEVYVF9OT0RFO1xuXG5mdW5jdGlvbiBqZXN0RmFrZVRpbWVyc0FyZUVuYWJsZWQoKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICh0eXBlb2YgamVzdCAhPT0gJ3VuZGVmaW5lZCcgJiYgamVzdCAhPT0gbnVsbCkge1xuICAgIHJldHVybiAoLy8gbGVnYWN5IHRpbWVyc1xuICAgICAgc2V0VGltZW91dC5faXNNb2NrRnVuY3Rpb24gPT09IHRydWUgfHwgLy8gbW9kZXJuIHRpbWVyc1xuICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNldFRpbWVvdXQsICdjbG9jaycpXG4gICAgKTtcbiAgfSAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuXG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBnZXREb2N1bWVudCgpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGZpbmQgZGVmYXVsdCBjb250YWluZXInKTtcbiAgfVxuXG4gIHJldHVybiB3aW5kb3cuZG9jdW1lbnQ7XG59XG5cbmZ1bmN0aW9uIGdldFdpbmRvd0Zyb21Ob2RlKG5vZGUpIHtcbiAgaWYgKG5vZGUuZGVmYXVsdFZpZXcpIHtcbiAgICAvLyBub2RlIGlzIGRvY3VtZW50XG4gICAgcmV0dXJuIG5vZGUuZGVmYXVsdFZpZXc7XG4gIH0gZWxzZSBpZiAobm9kZS5vd25lckRvY3VtZW50ICYmIG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldykge1xuICAgIC8vIG5vZGUgaXMgYSBET00gbm9kZVxuICAgIHJldHVybiBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gIH0gZWxzZSBpZiAobm9kZS53aW5kb3cpIHtcbiAgICAvLyBub2RlIGlzIHdpbmRvd1xuICAgIHJldHVybiBub2RlLndpbmRvdztcbiAgfSBlbHNlIGlmIChub2RlLnRoZW4gaW5zdGFuY2VvZiBGdW5jdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihgSXQgbG9va3MgbGlrZSB5b3UgcGFzc2VkIGEgUHJvbWlzZSBvYmplY3QgaW5zdGVhZCBvZiBhIERPTSBub2RlLiBEaWQgeW91IGRvIHNvbWV0aGluZyBsaWtlIFxcYGZpcmVFdmVudC5jbGljayhzY3JlZW4uZmluZEJ5Li4uXFxgIHdoZW4geW91IG1lYW50IHRvIHVzZSBhIFxcYGdldEJ5XFxgIHF1ZXJ5IFxcYGZpcmVFdmVudC5jbGljayhzY3JlZW4uZ2V0QnkuLi5cXGAsIG9yIGF3YWl0IHRoZSBmaW5kQnkgcXVlcnkgXFxgZmlyZUV2ZW50LmNsaWNrKGF3YWl0IHNjcmVlbi5maW5kQnkuLi5cXGA/YCk7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShub2RlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgSXQgbG9va3MgbGlrZSB5b3UgcGFzc2VkIGFuIEFycmF5IGluc3RlYWQgb2YgYSBET00gbm9kZS4gRGlkIHlvdSBkbyBzb21ldGhpbmcgbGlrZSBcXGBmaXJlRXZlbnQuY2xpY2soc2NyZWVuLmdldEFsbEJ5Li4uXFxgIHdoZW4geW91IG1lYW50IHRvIHVzZSBhIFxcYGdldEJ5XFxgIHF1ZXJ5IFxcYGZpcmVFdmVudC5jbGljayhzY3JlZW4uZ2V0QnkuLi5cXGA/YCk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIG5vZGUuZGVidWcgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG5vZGUubG9nVGVzdGluZ1BsYXlncm91bmRVUkwgPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEl0IGxvb2tzIGxpa2UgeW91IHBhc3NlZCBhIFxcYHNjcmVlblxcYCBvYmplY3QuIERpZCB5b3UgZG8gc29tZXRoaW5nIGxpa2UgXFxgZmlyZUV2ZW50LmNsaWNrKHNjcmVlbiwgLi4uXFxgIHdoZW4geW91IG1lYW50IHRvIHVzZSBhIHF1ZXJ5LCBlLmcuIFxcYGZpcmVFdmVudC5jbGljayhzY3JlZW4uZ2V0QnkuLi4sIFxcYD9gKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBUaGUgdXNlciBwYXNzZWQgc29tZXRoaW5nIHVudXN1YWwgdG8gYSBjYWxsaW5nIGZ1bmN0aW9uXG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gZmluZCB0aGUgXCJ3aW5kb3dcIiBvYmplY3QgZm9yIHRoZSBnaXZlbiBub2RlLiBQbGVhc2UgZmlsZSBhbiBpc3N1ZSB3aXRoIHRoZSBjb2RlIHRoYXQncyBjYXVzaW5nIHlvdSB0byBzZWUgdGhpcyBlcnJvcjogaHR0cHM6Ly9naXRodWIuY29tL3Rlc3RpbmctbGlicmFyeS9kb20tdGVzdGluZy1saWJyYXJ5L2lzc3Vlcy9uZXdgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja0NvbnRhaW5lclR5cGUoY29udGFpbmVyKSB7XG4gIGlmICghY29udGFpbmVyIHx8ICEodHlwZW9mIGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yID09PSAnZnVuY3Rpb24nKSB8fCAhKHR5cGVvZiBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCA9PT0gJ2Z1bmN0aW9uJykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCBjb250YWluZXIgdG8gYmUgYW4gRWxlbWVudCwgYSBEb2N1bWVudCBvciBhIERvY3VtZW50RnJhZ21lbnQgYnV0IGdvdCAke2dldFR5cGVOYW1lKGNvbnRhaW5lcil9LmApO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0VHlwZU5hbWUob2JqZWN0KSB7XG4gICAgaWYgKHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09PSBudWxsID8gJ251bGwnIDogb2JqZWN0LmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHR5cGVvZiBvYmplY3Q7XG4gIH1cbn0iXX0=
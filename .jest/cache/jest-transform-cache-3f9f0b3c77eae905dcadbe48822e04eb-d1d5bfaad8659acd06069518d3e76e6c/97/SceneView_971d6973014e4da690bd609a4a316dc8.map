{"version":3,"sources":["SceneView.tsx"],"names":["options","navigatorKeyRef","React","getKey","addOptionsGetter","key","route","navigation","setKey","getCurrentState","state","getState","currentRoute","r","setCurrentState","child","setState","routes","isInitialRef","getIsInitial","context","ScreenComponent","screen"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type {\n  Route,\n  ParamListBase,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport NavigationStateContext from './NavigationStateContext';\nimport StaticContainer from './StaticContainer';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport useOptionsGetters from './useOptionsGetters';\nimport type { NavigationProp, RouteConfig, EventMapBase } from './types';\n\ntype Props<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  screen: RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>;\n  navigation: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n  route: Route<string>;\n  routeState: NavigationState | PartialState<NavigationState> | undefined;\n  getState: () => State;\n  setState: (state: State) => void;\n  options: object;\n};\n\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\nexport default function SceneView<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  screen,\n  route,\n  navigation,\n  routeState,\n  getState,\n  setState,\n  options,\n}: Props<State, ScreenOptions, EventMap>) {\n  const navigatorKeyRef = React.useRef<string | undefined>();\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n  const { addOptionsGetter } = useOptionsGetters({\n    key: route.key,\n    options,\n    navigation,\n  });\n\n  const setKey = React.useCallback((key: string) => {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find((r) => r.key === route.key);\n\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n\n  const setCurrentState = React.useCallback(\n    (child: NavigationState | PartialState<NavigationState> | undefined) => {\n      const state = getState();\n\n      setState({\n        ...state,\n        routes: state.routes.map((r) =>\n          r.key === route.key ? { ...r, state: child } : r\n        ),\n      });\n    },\n    [getState, route.key, setState]\n  );\n\n  const isInitialRef = React.useRef(true);\n\n  React.useEffect(() => {\n    isInitialRef.current = false;\n  });\n\n  const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n  const context = React.useMemo(\n    () => ({\n      state: routeState,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    }),\n    [\n      routeState,\n      getCurrentState,\n      setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    ]\n  );\n\n  const ScreenComponent = screen.getComponent\n    ? screen.getComponent()\n    : screen.component;\n\n  return (\n    <NavigationStateContext.Provider value={context}>\n      <EnsureSingleNavigator>\n        <StaticContainer\n          name={screen.name}\n          render={ScreenComponent || screen.children}\n          navigation={navigation}\n          route={route}\n        >\n          {ScreenComponent !== undefined ? (\n            <ScreenComponent navigation={navigation} route={route} />\n          ) : screen.children !== undefined ? (\n            screen.children({ navigation, route })\n          ) : null}\n        </StaticContainer>\n      </EnsureSingleNavigator>\n    </NavigationStateContext.Provider>\n  );\n}\n"]}
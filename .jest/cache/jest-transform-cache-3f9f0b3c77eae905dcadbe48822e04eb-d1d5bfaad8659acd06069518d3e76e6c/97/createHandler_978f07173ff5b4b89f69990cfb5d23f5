fa0d2b3e37cad456958bb0aa1789fd56
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault2(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault2(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault2(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault2(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault2(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault2(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty3 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));

var _stateToPropMappings;

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createHandler;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _areEqual = _interopRequireDefault(require("fbjs/lib/areEqual"));

var _RNGestureHandlerModule = _interopRequireDefault(require("../RNGestureHandlerModule"));

var _State = require("../State");

var _UIManager$getViewMan, _UIManager$getViewMan2, _UIManager$getConstan;

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function findNodeHandle(node) {
  if (_reactNative.Platform.OS === 'web') return node;
  return (0, _reactNative.findNodeHandle)(node);
}

var _reactNative$NativeMo = _reactNative.NativeModules.UIManager,
    UIManager = _reactNative$NativeMo === void 0 ? {} : _reactNative$NativeMo;
var customGHEventsConfig = {
  onGestureHandlerEvent: {
    registrationName: 'onGestureHandlerEvent'
  },
  onGestureHandlerStateChange: {
    registrationName: 'onGestureHandlerStateChange'
  }
};
UIManager.genericDirectEventTypes = (0, _extends2.default)({}, UIManager.genericDirectEventTypes, customGHEventsConfig);
var UIManagerConstants = (_UIManager$getViewMan = (_UIManager$getViewMan2 = UIManager.getViewManagerConfig) === null || _UIManager$getViewMan2 === void 0 ? void 0 : _UIManager$getViewMan2.call(UIManager, 'getConstants')) !== null && _UIManager$getViewMan !== void 0 ? _UIManager$getViewMan : (_UIManager$getConstan = UIManager.getConstants) === null || _UIManager$getConstan === void 0 ? void 0 : _UIManager$getConstan.call(UIManager);

if (UIManagerConstants) {
  UIManagerConstants.genericDirectEventTypes = (0, _extends2.default)({}, UIManagerConstants.genericDirectEventTypes, customGHEventsConfig);
}

var _UIManager$setJSRespo = UIManager.setJSResponder,
    oldSetJSResponder = _UIManager$setJSRespo === void 0 ? function () {} : _UIManager$setJSRespo,
    _UIManager$clearJSRes = UIManager.clearJSResponder,
    oldClearJSResponder = _UIManager$clearJSRes === void 0 ? function () {} : _UIManager$clearJSRes;

UIManager.setJSResponder = function (tag, blockNativeResponder) {
  _RNGestureHandlerModule.default.handleSetJSResponder(tag, blockNativeResponder);

  oldSetJSResponder(tag, blockNativeResponder);
};

UIManager.clearJSResponder = function () {
  _RNGestureHandlerModule.default.handleClearJSResponder();

  oldClearJSResponder();
};

var handlerTag = 1;
var handlerIDToTag = {};

function isConfigParam(param, name) {
  return param !== undefined && (param !== Object(param) || !('__isNative' in param)) && name !== 'onHandlerStateChange' && name !== 'onGestureEvent';
}

function filterConfig(props, validProps) {
  var defaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var res = (0, _extends2.default)({}, defaults);
  validProps.forEach(function (key) {
    var value = props[key];

    if (isConfigParam(value, key)) {
      var _value = props[key];

      if (key === 'simultaneousHandlers' || key === 'waitFor') {
        _value = transformIntoHandlerTags(props[key]);
      } else if (key === 'hitSlop') {
        if (typeof _value !== 'object') {
          _value = {
            top: _value,
            left: _value,
            bottom: _value,
            right: _value
          };
        }
      }

      res[key] = _value;
    }
  });
  return res;
}

function transformIntoHandlerTags(handlerIDs) {
  if (!Array.isArray(handlerIDs)) {
    handlerIDs = [handlerIDs];
  }

  if (_reactNative.Platform.OS === 'web') {
    return handlerIDs.map(function (_ref) {
      var current = _ref.current;
      return current;
    }).filter(function (handle) {
      return handle;
    });
  }

  return handlerIDs.map(function (handlerID) {
    var _handlerID$current;

    return handlerIDToTag[handlerID] || ((_handlerID$current = handlerID.current) === null || _handlerID$current === void 0 ? void 0 : _handlerID$current.handlerTag) || -1;
  }).filter(function (handlerTag) {
    return handlerTag > 0;
  });
}

function hasUnresolvedRefs(props) {
  var extract = function extract(refs) {
    if (!Array.isArray(refs)) {
      return refs && refs.current === null;
    }

    return refs.some(function (r) {
      return r && r.current === null;
    });
  };

  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);
}

var stateToPropMappings = (_stateToPropMappings = {}, (0, _defineProperty3.default)(_stateToPropMappings, _State.State.UNDETERMINED, undefined), (0, _defineProperty3.default)(_stateToPropMappings, _State.State.BEGAN, 'onBegan'), (0, _defineProperty3.default)(_stateToPropMappings, _State.State.FAILED, 'onFailed'), (0, _defineProperty3.default)(_stateToPropMappings, _State.State.CANCELLED, 'onCancelled'), (0, _defineProperty3.default)(_stateToPropMappings, _State.State.ACTIVE, 'onActivated'), (0, _defineProperty3.default)(_stateToPropMappings, _State.State.END, 'onEnded'), _stateToPropMappings);

function createHandler(_ref2) {
  var name = _ref2.name,
      _ref2$allowedProps = _ref2.allowedProps,
      allowedProps = _ref2$allowedProps === void 0 ? [] : _ref2$allowedProps,
      _ref2$config = _ref2.config,
      config = _ref2$config === void 0 ? {} : _ref2$config,
      transformProps = _ref2.transformProps,
      _ref2$customNativePro = _ref2.customNativeProps,
      customNativeProps = _ref2$customNativePro === void 0 ? [] : _ref2$customNativePro;

  var Handler = function (_React$Component) {
    (0, _inherits2.default)(Handler, _React$Component);

    var _super = _createSuper(Handler);

    function Handler(props) {
      var _this;

      (0, _classCallCheck2.default)(this, Handler);
      _this = _super.call(this, props);

      _defineProperty((0, _assertThisInitialized2.default)(_this), "handlerTag", void 0);

      _defineProperty((0, _assertThisInitialized2.default)(_this), "config", void 0);

      _defineProperty((0, _assertThisInitialized2.default)(_this), "propsRef", void 0);

      _defineProperty((0, _assertThisInitialized2.default)(_this), "viewNode", void 0);

      _defineProperty((0, _assertThisInitialized2.default)(_this), "viewTag", void 0);

      _defineProperty((0, _assertThisInitialized2.default)(_this), "updateEnqueued", null);

      _defineProperty((0, _assertThisInitialized2.default)(_this), "onGestureHandlerEvent", function (event) {
        if (event.nativeEvent.handlerTag === _this.handlerTag) {
          var _this$props$onGesture, _this$props;

          (_this$props$onGesture = (_this$props = _this.props).onGestureEvent) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props, event);
        } else {
          var _this$props$onGesture2, _this$props2;

          (_this$props$onGesture2 = (_this$props2 = _this.props).onGestureHandlerEvent) === null || _this$props$onGesture2 === void 0 ? void 0 : _this$props$onGesture2.call(_this$props2, event);
        }
      });

      _defineProperty((0, _assertThisInitialized2.default)(_this), "onGestureHandlerStateChange", function (event) {
        if (event.nativeEvent.handlerTag === _this.handlerTag) {
          var _this$props$onHandler, _this$props3;

          (_this$props$onHandler = (_this$props3 = _this.props).onHandlerStateChange) === null || _this$props$onHandler === void 0 ? void 0 : _this$props$onHandler.call(_this$props3, event);
          var state = event.nativeEvent.state;
          var stateEventName = stateToPropMappings[state];
          var eventHandler = stateEventName && _this.props[stateEventName];

          if (eventHandler && typeof eventHandler === 'function') {
            eventHandler(event);
          }
        } else {
          var _this$props$onGesture3, _this$props4;

          (_this$props$onGesture3 = (_this$props4 = _this.props).onGestureHandlerStateChange) === null || _this$props$onGesture3 === void 0 ? void 0 : _this$props$onGesture3.call(_this$props4, event);
        }
      });

      _defineProperty((0, _assertThisInitialized2.default)(_this), "refHandler", function (node) {
        _this.viewNode = node;
        var child = React.Children.only(_this.props.children);
        var ref = child.ref;

        if (ref !== null) {
          if (typeof ref === 'function') {
            ref(node);
          } else {
            ref.current = node;
          }
        }
      });

      _defineProperty((0, _assertThisInitialized2.default)(_this), "createGestureHandler", function (newConfig) {
        _this.config = newConfig;

        _RNGestureHandlerModule.default.createGestureHandler(name, _this.handlerTag, newConfig);
      });

      _defineProperty((0, _assertThisInitialized2.default)(_this), "attachGestureHandler", function (newViewTag) {
        _this.viewTag = newViewTag;

        if (_reactNative.Platform.OS === 'web') {
          _RNGestureHandlerModule.default.attachGestureHandler(_this.handlerTag, newViewTag, _this.propsRef);
        } else {
          _RNGestureHandlerModule.default.attachGestureHandler(_this.handlerTag, newViewTag);
        }
      });

      _defineProperty((0, _assertThisInitialized2.default)(_this), "updateGestureHandler", function (newConfig) {
        _this.config = newConfig;

        _RNGestureHandlerModule.default.updateGestureHandler(_this.handlerTag, newConfig);
      });

      _this.handlerTag = handlerTag++;
      _this.config = {};
      _this.propsRef = React.createRef();

      if (props.id) {
        if (handlerIDToTag[props.id] !== undefined) {
          throw new Error("Handler with ID \"".concat(props.id, "\" already registered"));
        }

        handlerIDToTag[props.id] = _this.handlerTag;
      }

      return _this;
    }

    (0, _createClass2.default)(Handler, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        var props = this.props;

        if (hasUnresolvedRefs(props)) {
          this.updateEnqueued = setImmediate(function () {
            _this2.updateEnqueued = null;

            _this2.update();
          });
        }

        this.createGestureHandler(filterConfig(transformProps ? transformProps(this.props) : this.props, [].concat((0, _toConsumableArray2.default)(allowedProps), (0, _toConsumableArray2.default)(customNativeProps)), config));
        this.attachGestureHandler(findNodeHandle(this.viewNode));
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        var viewTag = findNodeHandle(this.viewNode);

        if (this.viewTag !== viewTag) {
          this.attachGestureHandler(viewTag);
        }

        this.update();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        _RNGestureHandlerModule.default.dropGestureHandler(this.handlerTag);

        if (this.updateEnqueued) {
          clearImmediate(this.updateEnqueued);
        }

        var handlerID = this.props.id;

        if (handlerID) {
          delete handlerIDToTag[handlerID];
        }
      }
    }, {
      key: "update",
      value: function update() {
        var newConfig = filterConfig(transformProps ? transformProps(this.props) : this.props, [].concat((0, _toConsumableArray2.default)(allowedProps), (0, _toConsumableArray2.default)(customNativeProps)), config);

        if (!(0, _areEqual.default)(this.config, newConfig)) {
          this.updateGestureHandler(newConfig);
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(updates) {
        var mergedProps = (0, _extends2.default)({}, this.props, updates);
        var newConfig = filterConfig(transformProps ? transformProps(mergedProps) : mergedProps, [].concat((0, _toConsumableArray2.default)(allowedProps), (0, _toConsumableArray2.default)(customNativeProps)), config);
        this.updateGestureHandler(newConfig);
      }
    }, {
      key: "render",
      value: function render() {
        var gestureEventHandler = this.onGestureHandlerEvent;
        var _this$props5 = this.props,
            onGestureEvent = _this$props5.onGestureEvent,
            onGestureHandlerEvent = _this$props5.onGestureHandlerEvent;

        if (onGestureEvent && typeof onGestureEvent !== 'function') {
          if (onGestureHandlerEvent) {
            throw new Error('Nesting touch handlers with native animated driver is not supported yet');
          }

          gestureEventHandler = onGestureEvent;
        } else {
          if (onGestureHandlerEvent && typeof onGestureHandlerEvent !== 'function') {
            throw new Error('Nesting touch handlers with native animated driver is not supported yet');
          }
        }

        var gestureStateEventHandler = this.onGestureHandlerStateChange;
        var _this$props6 = this.props,
            onHandlerStateChange = _this$props6.onHandlerStateChange,
            onGestureHandlerStateChange = _this$props6.onGestureHandlerStateChange;

        if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {
          if (onGestureHandlerStateChange) {
            throw new Error('Nesting touch handlers with native animated driver is not supported yet');
          }

          gestureStateEventHandler = onHandlerStateChange;
        } else {
          if (onGestureHandlerStateChange && typeof onGestureHandlerStateChange !== 'function') {
            throw new Error('Nesting touch handlers with native animated driver is not supported yet');
          }
        }

        var events = {
          onGestureHandlerEvent: gestureEventHandler,
          onGestureHandlerStateChange: gestureStateEventHandler
        };
        this.propsRef.current = events;
        var child = React.Children.only(this.props.children);
        var grandChildren = child.props.children;

        if (_reactNative.Touchable.TOUCH_TARGET_DEBUG && child.type && (child.type === 'RNGestureHandlerButton' || child.type.name === 'View' || child.type.displayName === 'View')) {
          grandChildren = React.Children.toArray(grandChildren);
          grandChildren.push(_reactNative.Touchable.renderDebugView({
            color: 'mediumspringgreen',
            hitSlop: child.props.hitSlop
          }));
        }

        return React.cloneElement(child, (0, _extends2.default)({
          ref: this.refHandler,
          collapsable: false
        }, events), grandChildren);
      }
    }]);
    return Handler;
  }(React.Component);

  _defineProperty(Handler, "displayName", name);

  return Handler;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNyZWF0ZUhhbmRsZXIudHMiXSwibmFtZXMiOlsiUGxhdGZvcm0iLCJVSU1hbmFnZXIiLCJOYXRpdmVNb2R1bGVzIiwiY3VzdG9tR0hFdmVudHNDb25maWciLCJvbkdlc3R1cmVIYW5kbGVyRXZlbnQiLCJyZWdpc3RyYXRpb25OYW1lIiwib25HZXN0dXJlSGFuZGxlclN0YXRlQ2hhbmdlIiwiVUlNYW5hZ2VyQ29uc3RhbnRzIiwic2V0SlNSZXNwb25kZXIiLCJvbGRTZXRKU1Jlc3BvbmRlciIsImNsZWFySlNSZXNwb25kZXIiLCJvbGRDbGVhckpTUmVzcG9uZGVyIiwiUk5HZXN0dXJlSGFuZGxlck1vZHVsZSIsImhhbmRsZXJUYWciLCJoYW5kbGVySURUb1RhZyIsInBhcmFtIiwiT2JqZWN0IiwibmFtZSIsImRlZmF1bHRzIiwicmVzIiwidmFsaWRQcm9wcyIsImtleSIsInZhbHVlIiwicHJvcHMiLCJpc0NvbmZpZ1BhcmFtIiwidHJhbnNmb3JtSW50b0hhbmRsZXJUYWdzIiwidG9wIiwibGVmdCIsImJvdHRvbSIsInJpZ2h0IiwiQXJyYXkiLCJoYW5kbGVySURzIiwiY3VycmVudCIsImhhbmRsZSIsImhhbmRsZXJJRCIsImV4dHJhY3QiLCJyZWZzIiwiciIsInN0YXRlVG9Qcm9wTWFwcGluZ3MiLCJTdGF0ZSIsImFsbG93ZWRQcm9wcyIsImNvbmZpZyIsImN1c3RvbU5hdGl2ZVByb3BzIiwiUmVhY3QiLCJjb25zdHJ1Y3RvciIsImNvbXBvbmVudERpZE1vdW50IiwiaGFzVW5yZXNvbHZlZFJlZnMiLCJzZXRJbW1lZGlhdGUiLCJmaWx0ZXJDb25maWciLCJ0cmFuc2Zvcm1Qcm9wcyIsImZpbmROb2RlSGFuZGxlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwidmlld1RhZyIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiY2xlYXJJbW1lZGlhdGUiLCJldmVudCIsInN0YXRlIiwic3RhdGVFdmVudE5hbWUiLCJldmVudEhhbmRsZXIiLCJub2RlIiwiY2hpbGQiLCJyZWYiLCJuZXdDb25maWciLCJuZXdWaWV3VGFnIiwidXBkYXRlIiwic2V0TmF0aXZlUHJvcHMiLCJtZXJnZWRQcm9wcyIsInVwZGF0ZXMiLCJyZW5kZXIiLCJnZXN0dXJlRXZlbnRIYW5kbGVyIiwib25HZXN0dXJlRXZlbnQiLCJnZXN0dXJlU3RhdGVFdmVudEhhbmRsZXIiLCJvbkhhbmRsZXJTdGF0ZUNoYW5nZSIsImV2ZW50cyIsImdyYW5kQ2hpbGRyZW4iLCJUb3VjaGFibGUiLCJjb2xvciIsImhpdFNsb3AiLCJjb2xsYXBzYWJsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQSxLQUFBLEdBQUEsdUJBQUEsQ0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxZQUFBLEdBQUEsT0FBQSxDQUFBLGNBQUEsQ0FBQTs7QUFPQSxJQUFBLFNBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsQ0FBQSxtQkFBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSx1QkFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSw2QkFBQSxDQUFBOztBQUVBLElBQUEsTUFBQSxHQUFBLE9BQUEsWUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFTQSxTQUFBLGNBQUEsQ0FBQSxJQUFBLEVBRXlFO0FBQ3ZFLE1BQUlBLFlBQUFBLENBQUFBLFFBQUFBLENBQUFBLEVBQUFBLEtBQUosS0FBQSxFQUEyQixPQUFBLElBQUE7QUFDM0IsU0FBTyxDQUFBLEdBQUEsWUFBQSxDQUFBLGNBQUEsRUFBUCxJQUFPLENBQVA7QUFDRDs7QUFFRCw0QkFBMkJFLFlBQUFBLENBQTNCLGFBQUEsQ0FBUUQsU0FBUjtBQUFBLElBQVFBLFNBQVIsc0NBQW9CLEVBQXBCO0FBRUEsSUFBTUUsb0JBQW9CLEdBQUc7QUFDM0JDLEVBQUFBLHFCQUFxQixFQUFFO0FBQUVDLElBQUFBLGdCQUFnQixFQUFF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QSxFQUFBLElBQUEsQ0FBQTs7QUE2UTFFLFNBQUEsT0FBQTtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgZmluZE5vZGVIYW5kbGUgYXMgZmluZE5vZGVIYW5kbGVSTixcbiAgTmF0aXZlTW9kdWxlcyxcbiAgUGxhdGZvcm0sXG4gIFRvdWNoYWJsZSxcbn0gZnJvbSAncmVhY3QtbmF0aXZlJztcbi8vIEB0cy1pZ25vcmUgLSBpdCBpc24ndCB0eXBlZCBieSBUUyAmIGRvbid0IGhhdmUgZGVmaW5pdGVseVR5cGVkIHR5cGVzXG5pbXBvcnQgZGVlcEVxdWFsIGZyb20gJ2ZianMvbGliL2FyZUVxdWFsJztcbmltcG9ydCBSTkdlc3R1cmVIYW5kbGVyTW9kdWxlIGZyb20gJy4uL1JOR2VzdHVyZUhhbmRsZXJNb2R1bGUnO1xuaW1wb3J0IHR5cGUgUk5HZXN0dXJlSGFuZGxlck1vZHVsZVdlYiBmcm9tICcuLi9STkdlc3R1cmVIYW5kbGVyTW9kdWxlLndlYic7XG5pbXBvcnQgeyBTdGF0ZSB9IGZyb20gJy4uL1N0YXRlJztcblxuaW1wb3J0IHtcbiAgQmFzZUdlc3R1cmVIYW5kbGVyUHJvcHMsXG4gIEdlc3R1cmVFdmVudCxcbiAgSGFuZGxlclN0YXRlQ2hhbmdlRXZlbnQsXG59IGZyb20gJy4vZ2VzdHVyZUhhbmRsZXJzJztcbmltcG9ydCB7IFZhbHVlT2YgfSBmcm9tICcuLi90eXBlVXRpbHMnO1xuXG5mdW5jdGlvbiBmaW5kTm9kZUhhbmRsZShcbiAgbm9kZTogbnVsbCB8IG51bWJlciB8IFJlYWN0LkNvbXBvbmVudDxhbnksIGFueT4gfCBSZWFjdC5Db21wb25lbnRDbGFzczxhbnk+XG4pOiBudWxsIHwgbnVtYmVyIHwgUmVhY3QuQ29tcG9uZW50PGFueSwgYW55PiB8IFJlYWN0LkNvbXBvbmVudENsYXNzPGFueT4ge1xuICBpZiAoUGxhdGZvcm0uT1MgPT09ICd3ZWInKSByZXR1cm4gbm9kZTtcbiAgcmV0dXJuIGZpbmROb2RlSGFuZGxlUk4obm9kZSk7XG59XG5cbmNvbnN0IHsgVUlNYW5hZ2VyID0ge30gfSA9IE5hdGl2ZU1vZHVsZXM7XG5cbmNvbnN0IGN1c3RvbUdIRXZlbnRzQ29uZmlnID0ge1xuICBvbkdlc3R1cmVIYW5kbGVyRXZlbnQ6IHsgcmVnaXN0cmF0aW9uTmFtZTogJ29uR2VzdHVyZUhhbmRsZXJFdmVudCcgfSxcbiAgb25HZXN0dXJlSGFuZGxlclN0YXRlQ2hhbmdlOiB7XG4gICAgcmVnaXN0cmF0aW9uTmFtZTogJ29uR2VzdHVyZUhhbmRsZXJTdGF0ZUNoYW5nZScsXG4gIH0sXG59O1xuXG4vLyBBZGQgZ2VzdHVyZSBzcGVjaWZpYyBldmVudHMgdG8gZ2VuZXJpY0RpcmVjdEV2ZW50VHlwZXMgb2JqZWN0IGV4cG9ydGVkIGZyb20gVUlNYW5hZ2VyXG4vLyBuYXRpdmUgbW9kdWxlLlxuLy8gT25jZSBuZXcgZXZlbnQgdHlwZXMgYXJlIHJlZ2lzdGVyZWQgd2l0aCByZWFjdCBpdCBpcyBwb3NzaWJsZSB0byBkaXNwYXRjaCB0aGVzZVxuLy8gZXZlbnRzIHRvIGFsbCBraW5kIG9mIG5hdGl2ZSB2aWV3cy5cblVJTWFuYWdlci5nZW5lcmljRGlyZWN0RXZlbnRUeXBlcyA9IHtcbiAgLi4uVUlNYW5hZ2VyLmdlbmVyaWNEaXJlY3RFdmVudFR5cGVzLFxuICAuLi5jdXN0b21HSEV2ZW50c0NvbmZpZyxcbn07XG4vLyBJbiBuZXdlciB2ZXJzaW9ucyBvZiBSTiB0aGUgYGdlbmVyaWNEaXJlY3RFdmVudFR5cGVzYCBpcyBsb2NhdGVkIGluIHRoZSBvYmplY3Rcbi8vIHJldHVybmVkIGJ5IFVJTWFuYWdlci5nZXRWaWV3TWFuYWdlckNvbmZpZygnZ2V0Q29uc3RhbnRzJykgb3IgaW4gb2xkZXIgUk4gVUlNYW5hZ2VyLmdldENvbnN0YW50cygpLCB3ZSBuZWVkIHRvIGFkZCBpdCB0aGVyZSBhcyB3ZWxsIHRvIG1ha2Vcbi8vIGl0IGNvbXBhdGlibGUgd2l0aCBSTiA2MStcbmNvbnN0IFVJTWFuYWdlckNvbnN0YW50cyA9XG4gIFVJTWFuYWdlci5nZXRWaWV3TWFuYWdlckNvbmZpZz8uKCdnZXRDb25zdGFudHMnKSA/P1xuICBVSU1hbmFnZXIuZ2V0Q29uc3RhbnRzPy4oKTtcblxuaWYgKFVJTWFuYWdlckNvbnN0YW50cykge1xuICBVSU1hbmFnZXJDb25zdGFudHMuZ2VuZXJpY0RpcmVjdEV2ZW50VHlwZXMgPSB7XG4gICAgLi4uVUlNYW5hZ2VyQ29uc3RhbnRzLmdlbmVyaWNEaXJlY3RFdmVudFR5cGVzLFxuICAgIC4uLmN1c3RvbUdIRXZlbnRzQ29uZmlnLFxuICB9O1xufVxuXG4vLyBXcmFwIEpTIHJlc3BvbmRlciBjYWxscyBhbmQgbm90aWZ5IGdlc3R1cmUgaGFuZGxlciBtYW5hZ2VyXG5jb25zdCB7XG4gIHNldEpTUmVzcG9uZGVyOiBvbGRTZXRKU1Jlc3BvbmRlciA9ICgpID0+IHtcbiAgICAvL25vIG9wZXJhdGlvblxuICB9LFxuICBjbGVhckpTUmVzcG9uZGVyOiBvbGRDbGVhckpTUmVzcG9uZGVyID0gKCkgPT4ge1xuICAgIC8vbm8gb3BlcmF0aW9uXG4gIH0sXG59ID0gVUlNYW5hZ2VyO1xuVUlNYW5hZ2VyLnNldEpTUmVzcG9uZGVyID0gKHRhZzogbnVtYmVyLCBibG9ja05hdGl2ZVJlc3BvbmRlcjogYm9vbGVhbikgPT4ge1xuICBSTkdlc3R1cmVIYW5kbGVyTW9kdWxlLmhhbmRsZVNldEpTUmVzcG9uZGVyKHRhZywgYmxvY2tOYXRpdmVSZXNwb25kZXIpO1xuICBvbGRTZXRKU1Jlc3BvbmRlcih0YWcsIGJsb2NrTmF0aXZlUmVzcG9uZGVyKTtcbn07XG5VSU1hbmFnZXIuY2xlYXJKU1Jlc3BvbmRlciA9ICgpID0+IHtcbiAgUk5HZXN0dXJlSGFuZGxlck1vZHVsZS5oYW5kbGVDbGVhckpTUmVzcG9uZGVyKCk7XG4gIG9sZENsZWFySlNSZXNwb25kZXIoKTtcbn07XG5cbmxldCBoYW5kbGVyVGFnID0gMTtcbmNvbnN0IGhhbmRsZXJJRFRvVGFnOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+ID0ge307XG5cbmZ1bmN0aW9uIGlzQ29uZmlnUGFyYW0ocGFyYW06IHVua25vd24sIG5hbWU6IHN0cmluZykge1xuICAvLyBwYXJhbSAhPT0gT2JqZWN0KHBhcmFtKSByZXR1cm5zIGZhbHNlIGlmIGBwYXJhbWAgaXMgYSBmdW5jdGlvblxuICAvLyBvciBhbiBvYmplY3QgYW5kIHJldHVybnMgdHJ1ZSBpZiBgcGFyYW1gIGlzIG51bGxcbiAgcmV0dXJuIChcbiAgICBwYXJhbSAhPT0gdW5kZWZpbmVkICYmXG4gICAgKHBhcmFtICE9PSBPYmplY3QocGFyYW0pIHx8XG4gICAgICAhKCdfX2lzTmF0aXZlJyBpbiAocGFyYW0gYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4pKSkgJiZcbiAgICBuYW1lICE9PSAnb25IYW5kbGVyU3RhdGVDaGFuZ2UnICYmXG4gICAgbmFtZSAhPT0gJ29uR2VzdHVyZUV2ZW50J1xuICApO1xufVxuXG5mdW5jdGlvbiBmaWx0ZXJDb25maWcoXG4gIHByb3BzOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPixcbiAgdmFsaWRQcm9wczogc3RyaW5nW10sXG4gIGRlZmF1bHRzOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiA9IHt9XG4pIHtcbiAgY29uc3QgcmVzID0geyAuLi5kZWZhdWx0cyB9O1xuICB2YWxpZFByb3BzLmZvckVhY2goKGtleSkgPT4ge1xuICAgIGNvbnN0IHZhbHVlID0gcHJvcHNba2V5XTtcbiAgICBpZiAoaXNDb25maWdQYXJhbSh2YWx1ZSwga2V5KSkge1xuICAgICAgbGV0IHZhbHVlID0gcHJvcHNba2V5XTtcbiAgICAgIGlmIChrZXkgPT09ICdzaW11bHRhbmVvdXNIYW5kbGVycycgfHwga2V5ID09PSAnd2FpdEZvcicpIHtcbiAgICAgICAgdmFsdWUgPSB0cmFuc2Zvcm1JbnRvSGFuZGxlclRhZ3MocHJvcHNba2V5XSk7XG4gICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2hpdFNsb3AnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgdmFsdWUgPSB7IHRvcDogdmFsdWUsIGxlZnQ6IHZhbHVlLCBib3R0b206IHZhbHVlLCByaWdodDogdmFsdWUgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVzW2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1JbnRvSGFuZGxlclRhZ3MoaGFuZGxlcklEczogYW55KSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShoYW5kbGVySURzKSkge1xuICAgIGhhbmRsZXJJRHMgPSBbaGFuZGxlcklEc107XG4gIH1cblxuICBpZiAoUGxhdGZvcm0uT1MgPT09ICd3ZWInKSB7XG4gICAgcmV0dXJuIGhhbmRsZXJJRHNcbiAgICAgIC5tYXAoKHsgY3VycmVudCB9OiB7IGN1cnJlbnQ6IGFueSB9KSA9PiBjdXJyZW50KVxuICAgICAgLmZpbHRlcigoaGFuZGxlOiBhbnkpID0+IGhhbmRsZSk7XG4gIH1cbiAgLy8gY29udmVydHMgaGFuZGxlciBzdHJpbmcgSURzIGludG8gdGhlaXIgbnVtZXJpYyB0YWdzXG4gIHJldHVybiBoYW5kbGVySURzXG4gICAgLm1hcChcbiAgICAgIChoYW5kbGVySUQ6IGFueSkgPT5cbiAgICAgICAgaGFuZGxlcklEVG9UYWdbaGFuZGxlcklEXSB8fCBoYW5kbGVySUQuY3VycmVudD8uaGFuZGxlclRhZyB8fCAtMVxuICAgIClcbiAgICAuZmlsdGVyKChoYW5kbGVyVGFnOiBudW1iZXIpID0+IGhhbmRsZXJUYWcgPiAwKTtcbn1cblxudHlwZSBIYW5kbGVyUHJvcHM8VCBleHRlbmRzIFJlY29yZDxzdHJpbmcsIHVua25vd24+PiA9IFJlYWRvbmx5PFxuICBSZWFjdC5Qcm9wc1dpdGhDaGlsZHJlbjxCYXNlR2VzdHVyZUhhbmRsZXJQcm9wczxUPj5cbj47XG5mdW5jdGlvbiBoYXNVbnJlc29sdmVkUmVmczxUIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4+KFxuICBwcm9wczogSGFuZGxlclByb3BzPFQ+XG4pIHtcbiAgLy8gVE9ETyhUUykgLSBhZGQgdHlwZSBmb3IgZXh0cmFjdCBhcmdcbiAgY29uc3QgZXh0cmFjdCA9IChyZWZzOiBhbnkgfCBhbnlbXSkgPT4ge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShyZWZzKSkge1xuICAgICAgcmV0dXJuIHJlZnMgJiYgcmVmcy5jdXJyZW50ID09PSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gcmVmcy5zb21lKChyKSA9PiByICYmIHIuY3VycmVudCA9PT0gbnVsbCk7XG4gIH07XG4gIHJldHVybiBleHRyYWN0KHByb3BzWydzaW11bHRhbmVvdXNIYW5kbGVycyddKSB8fCBleHRyYWN0KHByb3BzWyd3YWl0Rm9yJ10pO1xufVxuXG5jb25zdCBzdGF0ZVRvUHJvcE1hcHBpbmdzID0ge1xuICBbU3RhdGUuVU5ERVRFUk1JTkVEXTogdW5kZWZpbmVkLFxuICBbU3RhdGUuQkVHQU5dOiAnb25CZWdhbicsXG4gIFtTdGF0ZS5GQUlMRURdOiAnb25GYWlsZWQnLFxuICBbU3RhdGUuQ0FOQ0VMTEVEXTogJ29uQ2FuY2VsbGVkJyxcbiAgW1N0YXRlLkFDVElWRV06ICdvbkFjdGl2YXRlZCcsXG4gIFtTdGF0ZS5FTkRdOiAnb25FbmRlZCcsXG59IGFzIGNvbnN0O1xuXG50eXBlIENyZWF0ZUhhbmRsZXJBcmdzPFxuICBIYW5kbGVyUHJvcHNUIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgdW5rbm93bj5cbj4gPSBSZWFkb25seTx7XG4gIG5hbWU6IHN0cmluZztcbiAgYWxsb3dlZFByb3BzOiBSZWFkb25seTxFeHRyYWN0PGtleW9mIEhhbmRsZXJQcm9wc1QsIHN0cmluZz5bXT47XG4gIGNvbmZpZzogUmVhZG9ubHk8UmVjb3JkPHN0cmluZywgdW5rbm93bj4+O1xuICB0cmFuc2Zvcm1Qcm9wcz86IChwcm9wczogSGFuZGxlclByb3BzVCkgPT4gSGFuZGxlclByb3BzVDtcbiAgY3VzdG9tTmF0aXZlUHJvcHM/OiBSZWFkb25seTxzdHJpbmdbXT47XG59PjtcblxuLy8gVE9ETyhUUykgZml4IGV2ZW50IHR5cGVzXG50eXBlIEludGVybmFsRXZlbnRIYW5kbGVycyA9IHtcbiAgb25HZXN0dXJlSGFuZGxlckV2ZW50PzogKGV2ZW50OiBhbnkpID0+IHZvaWQ7XG4gIG9uR2VzdHVyZUhhbmRsZXJTdGF0ZUNoYW5nZT86IChldmVudDogYW55KSA9PiB2b2lkO1xufTtcblxuLy8gVE9ETyhUUykgLSBtYWtlIHN1cmUgdGhhdCBCYXNlR2VzdHVyZUhhbmRsZXJQcm9wcyBkb2Vzbid0IG5lZWQgb3RoZXIgZ2VuZXJpYyBwYXJhbWV0ZXIgdG8gd29yayB3aXRoIGN1c3RvbSBwcm9wZXJ0aWVzLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlSGFuZGxlcjxcbiAgVCBleHRlbmRzIEJhc2VHZXN0dXJlSGFuZGxlclByb3BzPFU+LFxuICBVIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgdW5rbm93bj5cbj4oe1xuICBuYW1lLFxuICBhbGxvd2VkUHJvcHMgPSBbXSxcbiAgY29uZmlnID0ge30sXG4gIHRyYW5zZm9ybVByb3BzLFxuICBjdXN0b21OYXRpdmVQcm9wcyA9IFtdLFxufTogQ3JlYXRlSGFuZGxlckFyZ3M8VD4pOiBSZWFjdC5Db21wb25lbnRUeXBlPFQgJiBSZWFjdC5SZWZBdHRyaWJ1dGVzPGFueT4+IHtcbiAgY2xhc3MgSGFuZGxlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxUICYgSW50ZXJuYWxFdmVudEhhbmRsZXJzPiB7XG4gICAgc3RhdGljIGRpc3BsYXlOYW1lID0gbmFtZTtcblxuICAgIHByaXZhdGUgaGFuZGxlclRhZzogbnVtYmVyO1xuICAgIHByaXZhdGUgY29uZmlnOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcbiAgICBwcml2YXRlIHByb3BzUmVmOiBSZWFjdC5NdXRhYmxlUmVmT2JqZWN0PHVua25vd24+O1xuICAgIHByaXZhdGUgdmlld05vZGU6IGFueTtcbiAgICBwcml2YXRlIHZpZXdUYWc/OiBudW1iZXI7XG4gICAgcHJpdmF0ZSB1cGRhdGVFbnF1ZXVlZDogUmV0dXJuVHlwZTx0eXBlb2Ygc2V0SW1tZWRpYXRlPiB8IG51bGwgPSBudWxsO1xuXG4gICAgY29uc3RydWN0b3IocHJvcHM6IFQgJiBJbnRlcm5hbEV2ZW50SGFuZGxlcnMpIHtcbiAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgIHRoaXMuaGFuZGxlclRhZyA9IGhhbmRsZXJUYWcrKztcbiAgICAgIHRoaXMuY29uZmlnID0ge307XG4gICAgICB0aGlzLnByb3BzUmVmID0gUmVhY3QuY3JlYXRlUmVmKCk7XG4gICAgICBpZiAocHJvcHMuaWQpIHtcbiAgICAgICAgaWYgKGhhbmRsZXJJRFRvVGFnW3Byb3BzLmlkXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBIYW5kbGVyIHdpdGggSUQgXCIke3Byb3BzLmlkfVwiIGFscmVhZHkgcmVnaXN0ZXJlZGApO1xuICAgICAgICB9XG4gICAgICAgIGhhbmRsZXJJRFRvVGFnW3Byb3BzLmlkXSA9IHRoaXMuaGFuZGxlclRhZztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGNvbnN0IHByb3BzOiBIYW5kbGVyUHJvcHM8VT4gPSB0aGlzLnByb3BzO1xuICAgICAgaWYgKGhhc1VucmVzb2x2ZWRSZWZzKHByb3BzKSkge1xuICAgICAgICAvLyBJZiB0aGVyZSBhcmUgdW5yZXNvbHZlZCByZWZzIChlLmcuIFwiLmN1cnJlbnRcIiBoYXMgbm90IHlldCBiZWVuIHNldClcbiAgICAgICAgLy8gcGFzc2VkIGFzIGBzaW11bHRhbmVvdXNIYW5kbGVyc2Agb3IgYHdhaXRGb3JgLCB3ZSBlbnF1ZXVlIGEgY2FsbCB0b1xuICAgICAgICAvLyBfdXBkYXRlIG1ldGhvZCB0aGF0IHdpbGwgdHJ5IHRvIHVwZGF0ZSBuYXRpdmUgaGFuZGxlciBwcm9wcyB1c2luZ1xuICAgICAgICAvLyBzZXRJbW1lZGlhdGUuIFRoaXMgbWFrZXMgaXQgc28gX3VwZGF0ZSBmdW5jdGlvbiBnZXRzIGNhbGxlZCBhZnRlciBhbGxcbiAgICAgICAgLy8gcmVhY3QgY29tcG9uZW50cyBhcmUgbW91bnRlZCBhbmQgd2UgZXhwZWN0IHRoZSBtaXNzaW5nIHJlZiBvYmplY3QgdG9cbiAgICAgICAgLy8gYmUgcmVzb2x2ZWQgYnkgdGhlbi5cbiAgICAgICAgdGhpcy51cGRhdGVFbnF1ZXVlZCA9IHNldEltbWVkaWF0ZSgoKSA9PiB7XG4gICAgICAgICAgdGhpcy51cGRhdGVFbnF1ZXVlZCA9IG51bGw7XG4gICAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY3JlYXRlR2VzdHVyZUhhbmRsZXIoXG4gICAgICAgIGZpbHRlckNvbmZpZyhcbiAgICAgICAgICB0cmFuc2Zvcm1Qcm9wcyA/IHRyYW5zZm9ybVByb3BzKHRoaXMucHJvcHMpIDogdGhpcy5wcm9wcyxcbiAgICAgICAgICBbLi4uYWxsb3dlZFByb3BzLCAuLi5jdXN0b21OYXRpdmVQcm9wc10sXG4gICAgICAgICAgY29uZmlnXG4gICAgICAgIClcbiAgICAgICk7XG5cbiAgICAgIHRoaXMuYXR0YWNoR2VzdHVyZUhhbmRsZXIoZmluZE5vZGVIYW5kbGUodGhpcy52aWV3Tm9kZSkgYXMgbnVtYmVyKTsgLy8gVE9ETyhUUykgLSBjaGVjayBpZiB0aGlzIGNhbiBiZSBudWxsXG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgY29uc3Qgdmlld1RhZyA9IGZpbmROb2RlSGFuZGxlKHRoaXMudmlld05vZGUpO1xuICAgICAgaWYgKHRoaXMudmlld1RhZyAhPT0gdmlld1RhZykge1xuICAgICAgICB0aGlzLmF0dGFjaEdlc3R1cmVIYW5kbGVyKHZpZXdUYWcgYXMgbnVtYmVyKTsgLy8gVE9ETyhUUykgLSBjaGVjayBpbnRlcmFjdGlvbiBiZXR3ZWVuIF92aWV3VGFnICYgZmluZE5vZGVIYW5kbGVcbiAgICAgIH1cbiAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBSTkdlc3R1cmVIYW5kbGVyTW9kdWxlLmRyb3BHZXN0dXJlSGFuZGxlcih0aGlzLmhhbmRsZXJUYWcpO1xuICAgICAgaWYgKHRoaXMudXBkYXRlRW5xdWV1ZWQpIHtcbiAgICAgICAgY2xlYXJJbW1lZGlhdGUodGhpcy51cGRhdGVFbnF1ZXVlZCk7XG4gICAgICB9XG4gICAgICAvLyBXZSBjYW4ndCB1c2UgdGhpcy5wcm9wcy5pZCBkaXJlY3RseSBkdWUgdG8gVFMgZ2VuZXJpYyB0eXBlIG5hcnJvd2luZyBidWcsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzEzOTk1IGZvciBtb3JlIGNvbnRleHRcbiAgICAgIGNvbnN0IGhhbmRsZXJJRDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdGhpcy5wcm9wcy5pZDtcbiAgICAgIGlmIChoYW5kbGVySUQpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1keW5hbWljLWRlbGV0ZVxuICAgICAgICBkZWxldGUgaGFuZGxlcklEVG9UYWdbaGFuZGxlcklEXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIG9uR2VzdHVyZUhhbmRsZXJFdmVudCA9IChldmVudDogR2VzdHVyZUV2ZW50PFU+KSA9PiB7XG4gICAgICBpZiAoZXZlbnQubmF0aXZlRXZlbnQuaGFuZGxlclRhZyA9PT0gdGhpcy5oYW5kbGVyVGFnKSB7XG4gICAgICAgIHRoaXMucHJvcHMub25HZXN0dXJlRXZlbnQ/LihldmVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnByb3BzLm9uR2VzdHVyZUhhbmRsZXJFdmVudD8uKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gVE9ETyhUUykgLSBtYWtlIHN1cmUgdGhpcyBpcyByaWdodCB0eXBlIGZvciBldmVudFxuICAgIHByaXZhdGUgb25HZXN0dXJlSGFuZGxlclN0YXRlQ2hhbmdlID0gKFxuICAgICAgZXZlbnQ6IEhhbmRsZXJTdGF0ZUNoYW5nZUV2ZW50PFU+XG4gICAgKSA9PiB7XG4gICAgICBpZiAoZXZlbnQubmF0aXZlRXZlbnQuaGFuZGxlclRhZyA9PT0gdGhpcy5oYW5kbGVyVGFnKSB7XG4gICAgICAgIHRoaXMucHJvcHMub25IYW5kbGVyU3RhdGVDaGFuZ2U/LihldmVudCk7XG5cbiAgICAgICAgY29uc3Qgc3RhdGU6IFZhbHVlT2Y8dHlwZW9mIFN0YXRlPiA9IGV2ZW50Lm5hdGl2ZUV2ZW50LnN0YXRlO1xuICAgICAgICBjb25zdCBzdGF0ZUV2ZW50TmFtZSA9IHN0YXRlVG9Qcm9wTWFwcGluZ3Nbc3RhdGVdO1xuICAgICAgICBjb25zdCBldmVudEhhbmRsZXIgPSBzdGF0ZUV2ZW50TmFtZSAmJiB0aGlzLnByb3BzW3N0YXRlRXZlbnROYW1lXTtcbiAgICAgICAgaWYgKGV2ZW50SGFuZGxlciAmJiB0eXBlb2YgZXZlbnRIYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZXZlbnRIYW5kbGVyKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wcm9wcy5vbkdlc3R1cmVIYW5kbGVyU3RhdGVDaGFuZ2U/LihldmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHByaXZhdGUgcmVmSGFuZGxlciA9IChub2RlOiBhbnkpID0+IHtcbiAgICAgIHRoaXMudmlld05vZGUgPSBub2RlO1xuXG4gICAgICBjb25zdCBjaGlsZCA9IFJlYWN0LkNoaWxkcmVuLm9ubHkodGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgICAvLyBUT0RPKFRTKSBmaXggcmVmIHR5cGVcbiAgICAgIGNvbnN0IHsgcmVmIH06IGFueSA9IGNoaWxkO1xuICAgICAgaWYgKHJlZiAhPT0gbnVsbCkge1xuICAgICAgICBpZiAodHlwZW9mIHJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJlZihub2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWYuY3VycmVudCA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBjcmVhdGVHZXN0dXJlSGFuZGxlciA9IChcbiAgICAgIG5ld0NvbmZpZzogUmVhZG9ubHk8UmVjb3JkPHN0cmluZywgdW5rbm93bj4+XG4gICAgKSA9PiB7XG4gICAgICB0aGlzLmNvbmZpZyA9IG5ld0NvbmZpZztcblxuICAgICAgUk5HZXN0dXJlSGFuZGxlck1vZHVsZS5jcmVhdGVHZXN0dXJlSGFuZGxlcihcbiAgICAgICAgbmFtZSxcbiAgICAgICAgdGhpcy5oYW5kbGVyVGFnLFxuICAgICAgICBuZXdDb25maWdcbiAgICAgICk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgYXR0YWNoR2VzdHVyZUhhbmRsZXIgPSAobmV3Vmlld1RhZzogbnVtYmVyKSA9PiB7XG4gICAgICB0aGlzLnZpZXdUYWcgPSBuZXdWaWV3VGFnO1xuXG4gICAgICBpZiAoUGxhdGZvcm0uT1MgPT09ICd3ZWInKSB7XG4gICAgICAgIC8vIHR5cGVjYXN0IGR1ZSB0byBkeW5hbWljIHJlc29sdXRpb24sIGF0dGFjaEdlc3R1cmVIYW5kbGVyIHNob3VsZCBoYXZlIHdlYiB2ZXJzaW9uIHNpZ25hdHVyZSBpbiB0aGlzIGJyYW5jaFxuICAgICAgICAoUk5HZXN0dXJlSGFuZGxlck1vZHVsZS5hdHRhY2hHZXN0dXJlSGFuZGxlciBhcyB0eXBlb2YgUk5HZXN0dXJlSGFuZGxlck1vZHVsZVdlYi5hdHRhY2hHZXN0dXJlSGFuZGxlcikoXG4gICAgICAgICAgdGhpcy5oYW5kbGVyVGFnLFxuICAgICAgICAgIG5ld1ZpZXdUYWcsXG4gICAgICAgICAgdGhpcy5wcm9wc1JlZlxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgUk5HZXN0dXJlSGFuZGxlck1vZHVsZS5hdHRhY2hHZXN0dXJlSGFuZGxlcihcbiAgICAgICAgICB0aGlzLmhhbmRsZXJUYWcsXG4gICAgICAgICAgbmV3Vmlld1RhZ1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBwcml2YXRlIHVwZGF0ZUdlc3R1cmVIYW5kbGVyID0gKFxuICAgICAgbmV3Q29uZmlnOiBSZWFkb25seTxSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj5cbiAgICApID0+IHtcbiAgICAgIHRoaXMuY29uZmlnID0gbmV3Q29uZmlnO1xuXG4gICAgICBSTkdlc3R1cmVIYW5kbGVyTW9kdWxlLnVwZGF0ZUdlc3R1cmVIYW5kbGVyKHRoaXMuaGFuZGxlclRhZywgbmV3Q29uZmlnKTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSB1cGRhdGUoKSB7XG4gICAgICBjb25zdCBuZXdDb25maWcgPSBmaWx0ZXJDb25maWcoXG4gICAgICAgIHRyYW5zZm9ybVByb3BzID8gdHJhbnNmb3JtUHJvcHModGhpcy5wcm9wcykgOiB0aGlzLnByb3BzLFxuICAgICAgICBbLi4uYWxsb3dlZFByb3BzLCAuLi5jdXN0b21OYXRpdmVQcm9wc10sXG4gICAgICAgIGNvbmZpZ1xuICAgICAgKTtcbiAgICAgIGlmICghZGVlcEVxdWFsKHRoaXMuY29uZmlnLCBuZXdDb25maWcpKSB7XG4gICAgICAgIHRoaXMudXBkYXRlR2VzdHVyZUhhbmRsZXIobmV3Q29uZmlnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzZXROYXRpdmVQcm9wcyh1cGRhdGVzOiBhbnkpIHtcbiAgICAgIGNvbnN0IG1lcmdlZFByb3BzID0geyAuLi50aGlzLnByb3BzLCAuLi51cGRhdGVzIH07XG4gICAgICBjb25zdCBuZXdDb25maWcgPSBmaWx0ZXJDb25maWcoXG4gICAgICAgIHRyYW5zZm9ybVByb3BzID8gdHJhbnNmb3JtUHJvcHMobWVyZ2VkUHJvcHMpIDogbWVyZ2VkUHJvcHMsXG4gICAgICAgIFsuLi5hbGxvd2VkUHJvcHMsIC4uLmN1c3RvbU5hdGl2ZVByb3BzXSxcbiAgICAgICAgY29uZmlnXG4gICAgICApO1xuICAgICAgdGhpcy51cGRhdGVHZXN0dXJlSGFuZGxlcihuZXdDb25maWcpO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgIGxldCBnZXN0dXJlRXZlbnRIYW5kbGVyID0gdGhpcy5vbkdlc3R1cmVIYW5kbGVyRXZlbnQ7XG4gICAgICAvLyBBbm90aGVyIGluc3RhbmNlIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMTM5OTVcbiAgICAgIHR5cGUgT25HZXN0dXJlRXZlbnRIYW5kbGVycyA9IHtcbiAgICAgICAgb25HZXN0dXJlRXZlbnQ/OiBCYXNlR2VzdHVyZUhhbmRsZXJQcm9wczxVPlsnb25HZXN0dXJlRXZlbnQnXTtcbiAgICAgICAgb25HZXN0dXJlSGFuZGxlckV2ZW50PzogSW50ZXJuYWxFdmVudEhhbmRsZXJzWydvbkdlc3R1cmVIYW5kbGVyRXZlbnQnXTtcbiAgICAgIH07XG4gICAgICBjb25zdCB7XG4gICAgICAgIG9uR2VzdHVyZUV2ZW50LFxuICAgICAgICBvbkdlc3R1cmVIYW5kbGVyRXZlbnQsXG4gICAgICB9OiBPbkdlc3R1cmVFdmVudEhhbmRsZXJzID0gdGhpcy5wcm9wcztcbiAgICAgIGlmIChvbkdlc3R1cmVFdmVudCAmJiB0eXBlb2Ygb25HZXN0dXJlRXZlbnQgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gSWYgaXQncyBub3QgYSBtZXRob2QgaXQgc2hvdWxkIGJlIGFuIG5hdGl2ZSBBbmltYXRlZC5ldmVudFxuICAgICAgICAvLyBvYmplY3QuIFdlIHNldCBpdCBkaXJlY3RseSBhcyB0aGUgaGFuZGxlciBmb3IgdGhlIHZpZXdcbiAgICAgICAgLy8gSW4gdGhpcyBjYXNlIG5lc3RlZCBoYW5kbGVycyBhcmUgbm90IGdvaW5nIHRvIGJlIHN1cHBvcnRlZFxuICAgICAgICBpZiAob25HZXN0dXJlSGFuZGxlckV2ZW50KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgJ05lc3RpbmcgdG91Y2ggaGFuZGxlcnMgd2l0aCBuYXRpdmUgYW5pbWF0ZWQgZHJpdmVyIGlzIG5vdCBzdXBwb3J0ZWQgeWV0J1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgZ2VzdHVyZUV2ZW50SGFuZGxlciA9IG9uR2VzdHVyZUV2ZW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIG9uR2VzdHVyZUhhbmRsZXJFdmVudCAmJlxuICAgICAgICAgIHR5cGVvZiBvbkdlc3R1cmVIYW5kbGVyRXZlbnQgIT09ICdmdW5jdGlvbidcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgJ05lc3RpbmcgdG91Y2ggaGFuZGxlcnMgd2l0aCBuYXRpdmUgYW5pbWF0ZWQgZHJpdmVyIGlzIG5vdCBzdXBwb3J0ZWQgeWV0J1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGV0IGdlc3R1cmVTdGF0ZUV2ZW50SGFuZGxlciA9IHRoaXMub25HZXN0dXJlSGFuZGxlclN0YXRlQ2hhbmdlO1xuICAgICAgLy8gQW5vdGhlciBpbnN0YW5jZSBvZiBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzEzOTk1XG4gICAgICB0eXBlIE9uR2VzdHVyZVN0YXRlQ2hhbmdlSGFuZGxlcnMgPSB7XG4gICAgICAgIG9uSGFuZGxlclN0YXRlQ2hhbmdlPzogQmFzZUdlc3R1cmVIYW5kbGVyUHJvcHM8VT5bJ29uSGFuZGxlclN0YXRlQ2hhbmdlJ107XG4gICAgICAgIG9uR2VzdHVyZUhhbmRsZXJTdGF0ZUNoYW5nZT86IEludGVybmFsRXZlbnRIYW5kbGVyc1snb25HZXN0dXJlSGFuZGxlclN0YXRlQ2hhbmdlJ107XG4gICAgICB9O1xuICAgICAgY29uc3Qge1xuICAgICAgICBvbkhhbmRsZXJTdGF0ZUNoYW5nZSxcbiAgICAgICAgb25HZXN0dXJlSGFuZGxlclN0YXRlQ2hhbmdlLFxuICAgICAgfTogT25HZXN0dXJlU3RhdGVDaGFuZ2VIYW5kbGVycyA9IHRoaXMucHJvcHM7XG4gICAgICBpZiAob25IYW5kbGVyU3RhdGVDaGFuZ2UgJiYgdHlwZW9mIG9uSGFuZGxlclN0YXRlQ2hhbmdlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIElmIGl0J3Mgbm90IGEgbWV0aG9kIGl0IHNob3VsZCBiZSBhbiBuYXRpdmUgQW5pbWF0ZWQuZXZlbnRcbiAgICAgICAgLy8gb2JqZWN0LiBXZSBzZXQgaXQgZGlyZWN0bHkgYXMgdGhlIGhhbmRsZXIgZm9yIHRoZSB2aWV3XG4gICAgICAgIC8vIEluIHRoaXMgY2FzZSBuZXN0ZWQgaGFuZGxlcnMgYXJlIG5vdCBnb2luZyB0byBiZSBzdXBwb3J0ZWRcbiAgICAgICAgaWYgKG9uR2VzdHVyZUhhbmRsZXJTdGF0ZUNoYW5nZSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICdOZXN0aW5nIHRvdWNoIGhhbmRsZXJzIHdpdGggbmF0aXZlIGFuaW1hdGVkIGRyaXZlciBpcyBub3Qgc3VwcG9ydGVkIHlldCdcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGdlc3R1cmVTdGF0ZUV2ZW50SGFuZGxlciA9IG9uSGFuZGxlclN0YXRlQ2hhbmdlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIG9uR2VzdHVyZUhhbmRsZXJTdGF0ZUNoYW5nZSAmJlxuICAgICAgICAgIHR5cGVvZiBvbkdlc3R1cmVIYW5kbGVyU3RhdGVDaGFuZ2UgIT09ICdmdW5jdGlvbidcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgJ05lc3RpbmcgdG91Y2ggaGFuZGxlcnMgd2l0aCBuYXRpdmUgYW5pbWF0ZWQgZHJpdmVyIGlzIG5vdCBzdXBwb3J0ZWQgeWV0J1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IGV2ZW50cyA9IHtcbiAgICAgICAgb25HZXN0dXJlSGFuZGxlckV2ZW50OiBnZXN0dXJlRXZlbnRIYW5kbGVyLFxuICAgICAgICBvbkdlc3R1cmVIYW5kbGVyU3RhdGVDaGFuZ2U6IGdlc3R1cmVTdGF0ZUV2ZW50SGFuZGxlcixcbiAgICAgIH07XG5cbiAgICAgIHRoaXMucHJvcHNSZWYuY3VycmVudCA9IGV2ZW50cztcblxuICAgICAgY29uc3QgY2hpbGQ6IGFueSA9IFJlYWN0LkNoaWxkcmVuLm9ubHkodGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgICBsZXQgZ3JhbmRDaGlsZHJlbiA9IGNoaWxkLnByb3BzLmNoaWxkcmVuO1xuICAgICAgaWYgKFxuICAgICAgICBUb3VjaGFibGUuVE9VQ0hfVEFSR0VUX0RFQlVHICYmXG4gICAgICAgIGNoaWxkLnR5cGUgJiZcbiAgICAgICAgKGNoaWxkLnR5cGUgPT09ICdSTkdlc3R1cmVIYW5kbGVyQnV0dG9uJyB8fFxuICAgICAgICAgIGNoaWxkLnR5cGUubmFtZSA9PT0gJ1ZpZXcnIHx8XG4gICAgICAgICAgY2hpbGQudHlwZS5kaXNwbGF5TmFtZSA9PT0gJ1ZpZXcnKVxuICAgICAgKSB7XG4gICAgICAgIGdyYW5kQ2hpbGRyZW4gPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KGdyYW5kQ2hpbGRyZW4pO1xuICAgICAgICBncmFuZENoaWxkcmVuLnB1c2goXG4gICAgICAgICAgVG91Y2hhYmxlLnJlbmRlckRlYnVnVmlldyh7XG4gICAgICAgICAgICBjb2xvcjogJ21lZGl1bXNwcmluZ2dyZWVuJyxcbiAgICAgICAgICAgIGhpdFNsb3A6IGNoaWxkLnByb3BzLmhpdFNsb3AsXG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChcbiAgICAgICAgY2hpbGQsXG4gICAgICAgIHtcbiAgICAgICAgICByZWY6IHRoaXMucmVmSGFuZGxlcixcbiAgICAgICAgICBjb2xsYXBzYWJsZTogZmFsc2UsXG4gICAgICAgICAgLi4uZXZlbnRzLFxuICAgICAgICB9LFxuICAgICAgICBncmFuZENoaWxkcmVuXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gSGFuZGxlcjtcbn1cbiJdfQ==
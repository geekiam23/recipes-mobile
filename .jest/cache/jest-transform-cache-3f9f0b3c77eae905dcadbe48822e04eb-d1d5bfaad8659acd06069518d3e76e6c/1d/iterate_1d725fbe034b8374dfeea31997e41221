c7736f4a98fac814ce19095339b6dbf9
var anObject = require("../internals/an-object");

var isArrayIteratorMethod = require("../internals/is-array-iterator-method");

var toLength = require("../internals/to-length");

var bind = require("../internals/function-bind-context");

var getIteratorMethod = require("../internals/get-iterator-method");

var iteratorClose = require("../internals/iterator-close");

var Result = function Result(stopped, result) {
  this.stopped = stopped;
  this.result = result;
};

module.exports = function (iterable, unboundFunction, options) {
  var that = options && options.that;
  var AS_ENTRIES = !!(options && options.AS_ENTRIES);
  var IS_ITERATOR = !!(options && options.IS_ITERATOR);
  var INTERRUPTED = !!(options && options.INTERRUPTED);
  var fn = bind(unboundFunction, that, 1 + AS_ENTRIES + INTERRUPTED);
  var iterator, iterFn, index, length, result, next, step;

  var stop = function stop(condition) {
    if (iterator) iteratorClose(iterator);
    return new Result(true, condition);
  };

  var callFn = function callFn(value) {
    if (AS_ENTRIES) {
      anObject(value);
      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
    }

    return INTERRUPTED ? fn(value, stop) : fn(value);
  };

  if (IS_ITERATOR) {
    iterator = iterable;
  } else {
    iterFn = getIteratorMethod(iterable);
    if (typeof iterFn != 'function') throw TypeError('Target is not iterable');

    if (isArrayIteratorMethod(iterFn)) {
      for (index = 0, length = toLength(iterable.length); length > index; index++) {
        result = callFn(iterable[index]);
        if (result && result instanceof Result) return result;
      }

      return new Result(false);
    }

    iterator = iterFn.call(iterable);
  }

  next = iterator.next;

  while (!(step = next.call(iterator)).done) {
    try {
      result = callFn(step.value);
    } catch (error) {
      iteratorClose(iterator);
      throw error;
    }

    if (typeof result == 'object' && result && result instanceof Result) return result;
  }

  return new Result(false);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhdGUuanMiXSwibmFtZXMiOlsiYW5PYmplY3QiLCJyZXF1aXJlIiwiaXNBcnJheUl0ZXJhdG9yTWV0aG9kIiwidG9MZW5ndGgiLCJiaW5kIiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJpdGVyYXRvckNsb3NlIiwiUmVzdWx0Iiwic3RvcHBlZCIsInJlc3VsdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJpdGVyYWJsZSIsInVuYm91bmRGdW5jdGlvbiIsIm9wdGlvbnMiLCJ0aGF0IiwiQVNfRU5UUklFUyIsIklTX0lURVJBVE9SIiwiSU5URVJSVVBURUQiLCJmbiIsIml0ZXJhdG9yIiwiaXRlckZuIiwiaW5kZXgiLCJsZW5ndGgiLCJuZXh0Iiwic3RlcCIsInN0b3AiLCJjb25kaXRpb24iLCJjYWxsRm4iLCJ2YWx1ZSIsIlR5cGVFcnJvciIsImNhbGwiLCJkb25lIiwiZXJyb3IiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLFFBQVEsR0FBR0MsT0FBTywwQkFBdEI7O0FBQ0EsSUFBSUMscUJBQXFCLEdBQUdELE9BQU8seUNBQW5DOztBQUNBLElBQUlFLFFBQVEsR0FBR0YsT0FBTywwQkFBdEI7O0FBQ0EsSUFBSUcsSUFBSSxHQUFHSCxPQUFPLHNDQUFsQjs7QUFDQSxJQUFJSSxpQkFBaUIsR0FBR0osT0FBTyxvQ0FBL0I7O0FBQ0EsSUFBSUssYUFBYSxHQUFHTCxPQUFPLCtCQUEzQjs7QUFFQSxJQUFJTSxNQUFNLEdBQUcsU0FBVEEsTUFBUyxDQUFVQyxPQUFWLEVBQW1CQyxNQUFuQixFQUEyQjtBQUN0QyxPQUFLRCxPQUFMLEdBQWVBLE9BQWY7QUFDQSxPQUFLQyxNQUFMLEdBQWNBLE1BQWQ7QUFDRCxDQUhEOztBQUtBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsVUFBVUMsUUFBVixFQUFvQkMsZUFBcEIsRUFBcUNDLE9BQXJDLEVBQThDO0FBQzdELE1BQUlDLElBQUksR0FBR0QsT0FBTyxJQUFJQSxPQUFPLENBQUNDLElBQTlCO0FBQ0EsTUFBSUMsVUFBVSxH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Q0EsTUFBTSxZQUFZRixNQUE3RCxFQUFxRSxPQUFPRSxNQUFQO0FBQ3RFOztBQUFDLFNBQU8sSUFBSUYsTUFBSixDQUFXLEtBQVgsQ0FBUDtBQUNILENBN0NEIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzQXJyYXlJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBpdGVyYXRvckNsb3NlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlJyk7XG5cbnZhciBSZXN1bHQgPSBmdW5jdGlvbiAoc3RvcHBlZCwgcmVzdWx0KSB7XG4gIHRoaXMuc3RvcHBlZCA9IHN0b3BwZWQ7XG4gIHRoaXMucmVzdWx0ID0gcmVzdWx0O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIHVuYm91bmRGdW5jdGlvbiwgb3B0aW9ucykge1xuICB2YXIgdGhhdCA9IG9wdGlvbnMgJiYgb3B0aW9ucy50aGF0O1xuICB2YXIgQVNfRU5UUklFUyA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5BU19FTlRSSUVTKTtcbiAgdmFyIElTX0lURVJBVE9SID0gISEob3B0aW9ucyAmJiBvcHRpb25zLklTX0lURVJBVE9SKTtcbiAgdmFyIElOVEVSUlVQVEVEID0gISEob3B0aW9ucyAmJiBvcHRpb25zLklOVEVSUlVQVEVEKTtcbiAgdmFyIGZuID0gYmluZCh1bmJvdW5kRnVuY3Rpb24sIHRoYXQsIDEgKyBBU19FTlRSSUVTICsgSU5URVJSVVBURUQpO1xuICB2YXIgaXRlcmF0b3IsIGl0ZXJGbiwgaW5kZXgsIGxlbmd0aCwgcmVzdWx0LCBuZXh0LCBzdGVwO1xuXG4gIHZhciBzdG9wID0gZnVuY3Rpb24gKGNvbmRpdGlvbikge1xuICAgIGlmIChpdGVyYXRvcikgaXRlcmF0b3JDbG9zZShpdGVyYXRvcik7XG4gICAgcmV0dXJuIG5ldyBSZXN1bHQodHJ1ZSwgY29uZGl0aW9uKTtcbiAgfTtcblxuICB2YXIgY2FsbEZuID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKEFTX0VOVFJJRVMpIHtcbiAgICAgIGFuT2JqZWN0KHZhbHVlKTtcbiAgICAgIHJldHVybiBJTlRFUlJVUFRFRCA/IGZuKHZhbHVlWzBdLCB2YWx1ZVsxXSwgc3RvcCkgOiBmbih2YWx1ZVswXSwgdmFsdWVbMV0pO1xuICAgIH0gcmV0dXJuIElOVEVSUlVQVEVEID8gZm4odmFsdWUsIHN0b3ApIDogZm4odmFsdWUpO1xuICB9O1xuXG4gIGlmIChJU19JVEVSQVRPUikge1xuICAgIGl0ZXJhdG9yID0gaXRlcmFibGU7XG4gIH0gZWxzZSB7XG4gICAgaXRlckZuID0gZ2V0SXRlcmF0b3JNZXRob2QoaXRlcmFibGUpO1xuICAgIGlmICh0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcignVGFyZ2V0IGlzIG5vdCBpdGVyYWJsZScpO1xuICAgIC8vIG9wdGltaXNhdGlvbiBmb3IgYXJyYXkgaXRlcmF0b3JzXG4gICAgaWYgKGlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyRm4pKSB7XG4gICAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgcmVzdWx0ID0gY2FsbEZuKGl0ZXJhYmxlW2luZGV4XSk7XG4gICAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0IGluc3RhbmNlb2YgUmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICAgICAgfSByZXR1cm4gbmV3IFJlc3VsdChmYWxzZSk7XG4gICAgfVxuICAgIGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoaXRlcmFibGUpO1xuICB9XG5cbiAgbmV4dCA9IGl0ZXJhdG9yLm5leHQ7XG4gIHdoaWxlICghKHN0ZXAgPSBuZXh0LmNhbGwoaXRlcmF0b3IpKS5kb25lKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IGNhbGxGbihzdGVwLnZhbHVlKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaXRlcmF0b3JDbG9zZShpdGVyYXRvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgPT0gJ29iamVjdCcgJiYgcmVzdWx0ICYmIHJlc3VsdCBpbnN0YW5jZW9mIFJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgfSByZXR1cm4gbmV3IFJlc3VsdChmYWxzZSk7XG59O1xuIl19
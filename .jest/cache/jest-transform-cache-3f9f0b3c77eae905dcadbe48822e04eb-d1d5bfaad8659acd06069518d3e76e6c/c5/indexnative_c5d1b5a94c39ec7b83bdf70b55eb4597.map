{"version":3,"sources":["index.native.tsx"],"names":["isPlatformSupported","Platform","ENABLE_SCREENS","shouldEnableScreens","UIManager","console","shouldUseActivityState","ScreensNativeModules","NativeScreenValue","NativeScreenContainerValue","NativeScreenStack","NativeScreenStackHeaderConfig","NativeScreenStackHeaderSubview","NativeSearchBar","React","setNativeProps","ref","render","enabled","AnimatedNativeScreen","Animated","rest","active","activityState","processedColor","setRef","display","styles","headerSubview","position","top","right","flexDirection","alignItems","justifyContent","ScreenStackHeaderBackButtonImage","props","ScreenStackHeaderRightView","ScreenStackHeaderLeftView","ScreenStackHeaderCenterView","ScreenStackHeaderSearchBarView","module","Screen","ScreenContainer","View","enableScreens","screensEnabled"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  Animated,\n  Image,\n  ImageProps,\n  Platform,\n  requireNativeComponent,\n  StyleSheet,\n  UIManager,\n  View,\n  ViewProps,\n} from 'react-native';\n// @ts-ignore Getting private component\n// eslint-disable-next-line import/default\nimport processColor from 'react-native/Libraries/StyleSheet/processColor';\n\nimport {\n  StackPresentationTypes,\n  StackAnimationTypes,\n  BlurEffectTypes,\n  ScreenReplaceTypes,\n  ScreenOrientationTypes,\n  HeaderSubviewTypes,\n  ScreenProps,\n  ScreenContainerProps,\n  ScreenStackProps,\n  ScreenStackHeaderConfigProps,\n  SearchBarProps,\n} from './types';\n\n// web implementation is taken from `index.tsx`\nconst isPlatformSupported = Platform.OS === 'ios' || Platform.OS === 'android';\n\nlet ENABLE_SCREENS = isPlatformSupported;\n\nfunction enableScreens(shouldEnableScreens = true): void {\n  ENABLE_SCREENS = isPlatformSupported && shouldEnableScreens;\n  if (ENABLE_SCREENS && !UIManager.getViewManagerConfig('RNSScreen')) {\n    console.error(\n      `Screen native module hasn't been linked. Please check the react-native-screens README for more details`\n    );\n  }\n}\n\n// const that tells if the library should use new implementation, will be undefined for older versions\nconst shouldUseActivityState = true;\n\nfunction screensEnabled(): boolean {\n  return ENABLE_SCREENS;\n}\n\n// We initialize these lazily so that importing the module doesn't throw error when not linked\n// This is necessary coz libraries such as React Navigation import the library where it may not be enabled\nlet NativeScreenValue: React.ComponentType<ScreenProps>;\nlet NativeScreenContainerValue: React.ComponentType<ScreenContainerProps>;\nlet NativeScreenStack: React.ComponentType<ScreenStackProps>;\nlet NativeScreenStackHeaderConfig: React.ComponentType<ScreenStackHeaderConfigProps>;\nlet NativeScreenStackHeaderSubview: React.ComponentType<React.PropsWithChildren<\n  ViewProps & { type?: HeaderSubviewTypes }\n>>;\nlet AnimatedNativeScreen: React.ComponentType<ScreenProps>;\nlet NativeSearchBar: React.ComponentType<SearchBarProps>;\n\nconst ScreensNativeModules = {\n  get NativeScreen() {\n    NativeScreenValue =\n      NativeScreenValue || requireNativeComponent('RNSScreen');\n    return NativeScreenValue;\n  },\n\n  get NativeScreenContainer() {\n    NativeScreenContainerValue =\n      NativeScreenContainerValue ||\n      requireNativeComponent('RNSScreenContainer');\n    return NativeScreenContainerValue;\n  },\n\n  get NativeScreenStack() {\n    NativeScreenStack =\n      NativeScreenStack || requireNativeComponent('RNSScreenStack');\n    return NativeScreenStack;\n  },\n\n  get NativeScreenStackHeaderConfig() {\n    NativeScreenStackHeaderConfig =\n      NativeScreenStackHeaderConfig ||\n      requireNativeComponent('RNSScreenStackHeaderConfig');\n    return NativeScreenStackHeaderConfig;\n  },\n\n  get NativeScreenStackHeaderSubview() {\n    NativeScreenStackHeaderSubview =\n      NativeScreenStackHeaderSubview ||\n      requireNativeComponent('RNSScreenStackHeaderSubview');\n    return NativeScreenStackHeaderSubview;\n  },\n\n  get NativeSearchBar() {\n    NativeSearchBar = NativeSearchBar || requireNativeComponent('RNSSearchBar');\n    return NativeSearchBar;\n  },\n};\n\nclass Screen extends React.Component<ScreenProps> {\n  private ref: React.ElementRef<typeof View> | null = null;\n\n  setNativeProps(props: ScreenProps): void {\n    this.ref?.setNativeProps(props);\n  }\n\n  setRef = (ref: React.ElementRef<typeof View> | null): void => {\n    this.ref = ref;\n    this.props.onComponentRef?.(ref);\n  };\n\n  render() {\n    const { enabled = ENABLE_SCREENS } = this.props;\n\n    if (enabled && isPlatformSupported) {\n      AnimatedNativeScreen =\n        AnimatedNativeScreen ||\n        Animated.createAnimatedComponent(ScreensNativeModules.NativeScreen);\n\n      let {\n        // Filter out active prop in this case because it is unused and\n        // can cause problems depending on react-native version:\n        // https://github.com/react-navigation/react-navigation/issues/4886\n        // same for enabled prop\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        enabled,\n        active,\n        activityState,\n        statusBarColor,\n        ...rest\n      } = this.props;\n\n      if (active !== undefined && activityState === undefined) {\n        console.warn(\n          'It appears that you are using old version of react-navigation library. Please update @react-navigation/bottom-tabs, @react-navigation/stack and @react-navigation/drawer to version 5.10.0 or above to take full advantage of new functionality added to react-native-screens'\n        );\n        activityState = active !== 0 ? 2 : 0; // in the new version, we need one of the screens to have value of 2 after the transition\n      }\n\n      const processedColor = processColor(statusBarColor);\n\n      return (\n        <AnimatedNativeScreen\n          {...rest}\n          statusBarColor={processedColor}\n          activityState={activityState}\n          ref={this.setRef}\n        />\n      );\n    } else {\n      // same reason as above\n      let {\n        active,\n        activityState,\n        style,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        enabled,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        onComponentRef,\n        ...rest\n      } = this.props;\n\n      if (active !== undefined && activityState === undefined) {\n        activityState = active !== 0 ? 2 : 0;\n      }\n      return (\n        <Animated.View\n          style={[style, { display: activityState !== 0 ? 'flex' : 'none' }]}\n          ref={this.setRef}\n          {...rest}\n        />\n      );\n    }\n  }\n}\n\nclass ScreenContainer extends React.Component<ScreenContainerProps> {\n  render() {\n    const { enabled = ENABLE_SCREENS, ...rest } = this.props;\n\n    if (enabled && isPlatformSupported) {\n      return <ScreensNativeModules.NativeScreenContainer {...rest} />;\n    }\n\n    return <View {...rest} />;\n  }\n}\n\nconst styles = StyleSheet.create({\n  headerSubview: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nconst ScreenStackHeaderBackButtonImage = (props: ImageProps): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    type=\"back\"\n    style={styles.headerSubview}>\n    <Image resizeMode=\"center\" fadeDuration={0} {...props} />\n  </ScreensNativeModules.NativeScreenStackHeaderSubview>\n);\n\nconst ScreenStackHeaderRightView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"right\"\n    style={styles.headerSubview}\n  />\n);\n\nconst ScreenStackHeaderLeftView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"left\"\n    style={styles.headerSubview}\n  />\n);\n\nconst ScreenStackHeaderCenterView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"center\"\n    style={styles.headerSubview}\n  />\n);\n\nconst ScreenStackHeaderSearchBarView = (\n  props: React.PropsWithChildren<SearchBarProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"searchBar\"\n    style={styles.headerSubview}\n  />\n);\n\nexport type {\n  StackPresentationTypes,\n  StackAnimationTypes,\n  BlurEffectTypes,\n  ScreenReplaceTypes,\n  ScreenOrientationTypes,\n  HeaderSubviewTypes,\n  ScreenProps,\n  ScreenContainerProps,\n  ScreenStackProps,\n  ScreenStackHeaderConfigProps,\n  SearchBarProps,\n};\n\nmodule.exports = {\n  // these are classes so they are not evaluated until used\n  // so no need to use getters for them\n  Screen,\n  ScreenContainer,\n\n  get NativeScreen() {\n    return ScreensNativeModules.NativeScreen;\n  },\n\n  get NativeScreenContainer() {\n    return ScreensNativeModules.NativeScreenContainer;\n  },\n\n  get ScreenStack() {\n    return ScreensNativeModules.NativeScreenStack;\n  },\n  get ScreenStackHeaderConfig() {\n    return ScreensNativeModules.NativeScreenStackHeaderConfig;\n  },\n  get ScreenStackHeaderSubview() {\n    return ScreensNativeModules.NativeScreenStackHeaderSubview;\n  },\n  get SearchBar() {\n    if (Platform.OS !== 'ios') {\n      console.warn('Importing SearchBar is only valid on iOS devices.');\n      return View;\n    }\n\n    return ScreensNativeModules.NativeSearchBar;\n  },\n  // these are functions and will not be evaluated until used\n  // so no need to use getters for them\n  ScreenStackHeaderBackButtonImage,\n  ScreenStackHeaderRightView,\n  ScreenStackHeaderLeftView,\n  ScreenStackHeaderCenterView,\n  ScreenStackHeaderSearchBarView,\n\n  enableScreens,\n  screensEnabled,\n  shouldUseActivityState,\n};\n"]}
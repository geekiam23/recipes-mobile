c22b5a66a8681ba02ec09f8f49ebc738
"use strict";

exports.__esModule = true;
exports.default = arrayFrom;
var toStr = Object.prototype.toString;

function isCallable(fn) {
  return typeof fn === "function" || toStr.call(fn) === "[object Function]";
}

function toInteger(value) {
  var number = Number(value);

  if (isNaN(number)) {
    return 0;
  }

  if (number === 0 || !isFinite(number)) {
    return number;
  }

  return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
}

var maxSafeInteger = Math.pow(2, 53) - 1;

function toLength(value) {
  var len = toInteger(value);
  return Math.min(Math.max(len, 0), maxSafeInteger);
}

function arrayFrom(arrayLike, mapFn) {
  var C = Array;
  var items = Object(arrayLike);

  if (arrayLike == null) {
    throw new TypeError("Array.from requires an array-like object - not null or undefined");
  }

  if (typeof mapFn !== "undefined") {
    if (!isCallable(mapFn)) {
      throw new TypeError("Array.from: when provided, the second argument must be a function");
    }
  }

  var len = toLength(items.length);
  var A = isCallable(C) ? Object(new C(len)) : new Array(len);
  var k = 0;
  var kValue;

  while (k < len) {
    kValue = items[k];

    if (mapFn) {
      A[k] = mapFn(kValue, k);
    } else {
      A[k] = kValue;
    }

    k += 1;
  }

  A.length = len;
  return A;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NvdXJjZXMvcG9seWZpbGxzL2FycmF5LmZyb20udHMiXSwibmFtZXMiOlsidG9TdHIiLCJPYmplY3QiLCJudW1iZXIiLCJOdW1iZXIiLCJpc05hTiIsImlzRmluaXRlIiwiTWF0aCIsIm1heFNhZmVJbnRlZ2VyIiwibGVuIiwidG9JbnRlZ2VyIiwiQyIsIml0ZW1zIiwiYXJyYXlMaWtlIiwiaXNDYWxsYWJsZSIsInRvTGVuZ3RoIiwiQSIsImsiLCJrVmFsdWUiLCJtYXBGbiJdLCJtYXBwaW5ncyI6Ijs7OztBQUlBLElBQU1BLEtBQUssR0FBR0MsTUFBTSxDQUFOQSxTQUFBQSxDQUFkLFFBQUE7O0FBQ0EsU0FBQSxVQUFBLENBQUEsRUFBQSxFQUEwQztBQUN6QyxTQUFPLE9BQUEsRUFBQSxLQUFBLFVBQUEsSUFBNEJELEtBQUssQ0FBTEEsSUFBQUEsQ0FBQUEsRUFBQUEsTUFBbkMsbUJBQUE7QUFDQTs7QUFDRCxTQUFBLFNBQUEsQ0FBQSxLQUFBLEVBQTJDO0FBQzFDLE1BQU1FLE1BQU0sR0FBR0MsTUFBTSxDQUFyQixLQUFxQixDQUFyQjs7QUFDQSxNQUFJQyxLQUFLLENBQVQsTUFBUyxDQUFULEVBQW1CO0FBQ2xCLFdBQUEsQ0FBQTtBQUNBOztBQUNELE1BQUlGLE1BQU0sS0FBTkEsQ0FBQUEsSUFBZ0IsQ0FBQ0csUUFBUSxDQUE3QixNQUE2QixDQUE3QixFQUF1QztBQUN0QyxXQUFBLE1BQUE7QUFDQTs7QUFDRCxTQUFPLENBQUNILE1BQU0sR0FBTkEsQ0FBQUEsR0FBQUEsQ0FBQUEsR0FBaUIsQ0FBbEIsQ0FBQSxJQUF3QkksSUFBSSxDQUFKQSxLQUFBQSxDQUFXQSxJQUFJLENBQUpBLEdBQUFBLENBQTFDLE1BQTBDQSxDQUFYQSxDQUEvQjtBQUNBOztBQUNELElBQU1DLGNBQWMsR0FBR0QsSUFBSSxDQUFKQSxHQUFBQSxDQUFBQSxDQUFBQSxFQUFBQSxFQUFBQSxJQUF2QixDQUFBOztBQUNBLFNBQUEsUUFBQSxDQUFBLEtBQUEsRUFBMEM7QUFDekMsTUFBTUUsR0FBRyxHQUFHQyxTQUFTLENBQXJCLEtBQXFCLENBQXJCO0FBQ0EsU0FBT0gsSUFBSSxDQUFKQSxHQUFBQSxDQUFTQSxJQUFJLENBQUpBLEdBQUFBLENBQUFBLEdBQUFBLEVBQVRBLENBQVNBLENBQVRBLEVBQVAsY0FBT0EsQ0FBUDtBQUNBOztBQVljLFNBQUEsU0FBQSxDQUFBLFNBQUEsRUFBQSxLQUFBLEVBR1I7QUFHTixNQUFNSSxDQUFDLEdBSEQsS0FHTjtBQUdBLE1BQU1DLEtBQUssR0FBR1YsTUFBTSxDQU5kLFNBTWMsQ0FBcEI7O0FBR0EsTUFBSVcsU0FBUyxJQUFiLElBQUEsRUFBdUI7QUFDdEIsVUFBTSxJQUFBLFNBQUEsQ0FBTixrRUFBTSxDQUFOO0FBVks7O0FBa0JOLE1BQUksT0FBQSxLQUFBLEtBQUosV0FBQSxFQUFrQztBQUdqQyxRQUFJLENBQUNDLFVBQVUsQ0FBZixLQUFlLENBQWYsRUFBd0I7QUFDdkIsWUFBTSxJQUFBLFNBQUEsQ0FBTixtRUFBTSxDQUFOO0FBR0E7QUF6Qkk7O0FBOEJOLE1BQU1MLEdBQUcsR0FBR00sUUFBUSxDQUFDSCxLQUFLLENBOUJwQixNQThCYyxDQUFwQjtBQU1BLE1BQU1JLENBQUMsR0FBR0YsVUFBVSxDQUFWQSxDQUFVLENBQVZBLEdBQWdCWixNQUFNLENBQUMsSUFBQSxDQUFBLENBQXZCWSxHQUF1QixDQUFELENBQXRCQSxHQUFxQyxJQUFBLEtBQUEsQ0FwQ3pDLEdBb0N5QyxDQUEvQztBQUdBLE1BQUlHLENBQUMsR0F2Q0MsQ0F1Q047QUFFQSxNQUFBLE1BQUE7O0FBQ0EsU0FBT0EsQ0FBQyxHQUFSLEdBQUEsRUFBZ0I7QUFDZkMsSUFBQUEsTUFBTSxHQUFHTixLQUFLLENBQWRNLENBQWMsQ0FBZEE7O0FBQ0EsUUFBQSxLQUFBLEVBQVc7QUFDVkYsTUFBQUEsQ0FBQyxDQUFEQSxDQUFDLENBQURBLEdBQU9HLEtBQUssQ0FBQSxNQUFBLEVBQVpILENBQVksQ0FBWkE7QUFERCxLQUFBLE1BRU87QUFDTkEsTUFBQUEsQ0FBQyxDQUFEQSxDQUFDLENBQURBLEdBQUFBLE1BQUFBO0FBQ0E7O0FBQ0RDLElBQUFBLENBQUMsSUFBREEsQ0FBQUE7QUFqREs7O0FBb0RORCxFQUFBQSxDQUFDLENBQURBLE1BQUFBLEdBcERNLEdBb0ROQTtBQUVBLFNBQUEsQ0FBQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAc291cmNlIHtodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9mcm9tI1BvbHlmaWxsfVxuICogYnV0IHdpdGhvdXQgdGhpc0FyZyAodG9vIGhhcmQgdG8gdHlwZSwgbm8gbmVlZCB0byBgdGhpc2ApXG4gKi9cbmNvbnN0IHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbmZ1bmN0aW9uIGlzQ2FsbGFibGUoZm46IHVua25vd24pOiBib29sZWFuIHtcblx0cmV0dXJuIHR5cGVvZiBmbiA9PT0gXCJmdW5jdGlvblwiIHx8IHRvU3RyLmNhbGwoZm4pID09PSBcIltvYmplY3QgRnVuY3Rpb25dXCI7XG59XG5mdW5jdGlvbiB0b0ludGVnZXIodmFsdWU6IHVua25vd24pOiBudW1iZXIge1xuXHRjb25zdCBudW1iZXIgPSBOdW1iZXIodmFsdWUpO1xuXHRpZiAoaXNOYU4obnVtYmVyKSkge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cdGlmIChudW1iZXIgPT09IDAgfHwgIWlzRmluaXRlKG51bWJlcikpIHtcblx0XHRyZXR1cm4gbnVtYmVyO1xuXHR9XG5cdHJldHVybiAobnVtYmVyID4gMCA/IDEgOiAtMSkgKiBNYXRoLmZsb29yKE1hdGguYWJzKG51bWJlcikpO1xufVxuY29uc3QgbWF4U2FmZUludGVnZXIgPSBNYXRoLnBvdygyLCA1MykgLSAxO1xuZnVuY3Rpb24gdG9MZW5ndGgodmFsdWU6IHVua25vd24pOiBudW1iZXIge1xuXHRjb25zdCBsZW4gPSB0b0ludGVnZXIodmFsdWUpO1xuXHRyZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobGVuLCAwKSwgbWF4U2FmZUludGVnZXIpO1xufVxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IGZyb20gYW4gaXRlcmFibGUgb2JqZWN0LlxuICogQHBhcmFtIGl0ZXJhYmxlIEFuIGl0ZXJhYmxlIG9iamVjdCB0byBjb252ZXJ0IHRvIGFuIGFycmF5LlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhcnJheUZyb208VD4oaXRlcmFibGU6IEl0ZXJhYmxlPFQ+IHwgQXJyYXlMaWtlPFQ+KTogVFtdO1xuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IGZyb20gYW4gaXRlcmFibGUgb2JqZWN0LlxuICogQHBhcmFtIGl0ZXJhYmxlIEFuIGl0ZXJhYmxlIG9iamVjdCB0byBjb252ZXJ0IHRvIGFuIGFycmF5LlxuICogQHBhcmFtIG1hcGZuIEEgbWFwcGluZyBmdW5jdGlvbiB0byBjYWxsIG9uIGV2ZXJ5IGVsZW1lbnQgb2YgdGhlIGFycmF5LlxuICogQHBhcmFtIHRoaXNBcmcgVmFsdWUgb2YgJ3RoaXMnIHVzZWQgdG8gaW52b2tlIHRoZSBtYXBmbi5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYXJyYXlGcm9tPFQsIFU+KFxuXHRhcnJheUxpa2U6IEl0ZXJhYmxlPFQ+IHwgQXJyYXlMaWtlPFQ+LFxuXHRtYXBGbj86ICh2OiBULCBrOiBudW1iZXIpID0+IFVcbik6IFVbXSB7XG5cdC8vIDEuIExldCBDIGJlIHRoZSB0aGlzIHZhbHVlLlxuXHQvLyBlZGl0KEBlcHMxbG9uKTogd2UncmUgbm90IGNhbGxpbmcgaXQgYXMgQXJyYXkuZnJvbVxuXHRjb25zdCBDID0gQXJyYXk7XG5cblx0Ly8gMi4gTGV0IGl0ZW1zIGJlIFRvT2JqZWN0KGFycmF5TGlrZSkuXG5cdGNvbnN0IGl0ZW1zID0gT2JqZWN0KGFycmF5TGlrZSk7XG5cblx0Ly8gMy4gUmV0dXJuSWZBYnJ1cHQoaXRlbXMpLlxuXHRpZiAoYXJyYXlMaWtlID09IG51bGwpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKFxuXHRcdFx0XCJBcnJheS5mcm9tIHJlcXVpcmVzIGFuIGFycmF5LWxpa2Ugb2JqZWN0IC0gbm90IG51bGwgb3IgdW5kZWZpbmVkXCJcblx0XHQpO1xuXHR9XG5cblx0Ly8gNC4gSWYgbWFwZm4gaXMgdW5kZWZpbmVkLCB0aGVuIGxldCBtYXBwaW5nIGJlIGZhbHNlLlxuXHQvLyBjb25zdCBtYXBGbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdm9pZCB1bmRlZmluZWQ7XG5cblx0aWYgKHR5cGVvZiBtYXBGbiAhPT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdC8vIDUuIGVsc2Vcblx0XHQvLyA1LiBhIElmIElzQ2FsbGFibGUobWFwZm4pIGlzIGZhbHNlLCB0aHJvdyBhIFR5cGVFcnJvciBleGNlcHRpb24uXG5cdFx0aWYgKCFpc0NhbGxhYmxlKG1hcEZuKSkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihcblx0XHRcdFx0XCJBcnJheS5mcm9tOiB3aGVuIHByb3ZpZGVkLCB0aGUgc2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvblwiXG5cdFx0XHQpO1xuXHRcdH1cblx0fVxuXG5cdC8vIDEwLiBMZXQgbGVuVmFsdWUgYmUgR2V0KGl0ZW1zLCBcImxlbmd0aFwiKS5cblx0Ly8gMTEuIExldCBsZW4gYmUgVG9MZW5ndGgobGVuVmFsdWUpLlxuXHRjb25zdCBsZW4gPSB0b0xlbmd0aChpdGVtcy5sZW5ndGgpO1xuXG5cdC8vIDEzLiBJZiBJc0NvbnN0cnVjdG9yKEMpIGlzIHRydWUsIHRoZW5cblx0Ly8gMTMuIGEuIExldCBBIGJlIHRoZSByZXN1bHQgb2YgY2FsbGluZyB0aGUgW1tDb25zdHJ1Y3RdXSBpbnRlcm5hbCBtZXRob2Rcblx0Ly8gb2YgQyB3aXRoIGFuIGFyZ3VtZW50IGxpc3QgY29udGFpbmluZyB0aGUgc2luZ2xlIGl0ZW0gbGVuLlxuXHQvLyAxNC4gYS4gRWxzZSwgTGV0IEEgYmUgQXJyYXlDcmVhdGUobGVuKS5cblx0Y29uc3QgQSA9IGlzQ2FsbGFibGUoQykgPyBPYmplY3QobmV3IEMobGVuKSkgOiBuZXcgQXJyYXkobGVuKTtcblxuXHQvLyAxNi4gTGV0IGsgYmUgMC5cblx0bGV0IGsgPSAwO1xuXHQvLyAxNy4gUmVwZWF0LCB3aGlsZSBrIDwgbGVu4oCmIChhbHNvIHN0ZXBzIGEgLSBoKVxuXHRsZXQga1ZhbHVlO1xuXHR3aGlsZSAoayA8IGxlbikge1xuXHRcdGtWYWx1ZSA9IGl0ZW1zW2tdO1xuXHRcdGlmIChtYXBGbikge1xuXHRcdFx0QVtrXSA9IG1hcEZuKGtWYWx1ZSwgayk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdEFba10gPSBrVmFsdWU7XG5cdFx0fVxuXHRcdGsgKz0gMTtcblx0fVxuXHQvLyAxOC4gTGV0IHB1dFN0YXR1cyBiZSBQdXQoQSwgXCJsZW5ndGhcIiwgbGVuLCB0cnVlKS5cblx0QS5sZW5ndGggPSBsZW47XG5cdC8vIDIwLiBSZXR1cm4gQS5cblx0cmV0dXJuIEE7XG59XG4iXX0=
{"version":3,"sources":["tap.js"],"names":["_curry2","require","_dispatchable","_xtap","tap","fn","x","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAAgBC,OAAO,sBAAlC;;AAEA,IAAIC,aAAa,GAAgBD,OAAO,4BAAxC;;AAEA,IAAIE,KAAK,GAAgBF,OAAO,oBAAhC;;AAwBA,IAAIG,GAAG,GAAgBJ,OAAO,CAAeE,aAAa,CAAC,EAAD,EAAKC,KAAL,EAAY,SAASC,GAAT,CAAaC,EAAb,EAAiBC,CAAjB,EAAoB;AACxFD,EAAAA,EAAE,CAACC,CAAD,CAAF;AACA,SAAOA,CAAP;AACD,CAHyD,CAA5B,CAA9B;;AAIAC,MAAM,CAACC,OAAP,GAAiBJ,GAAjB","sourcesContent":["var _curry2 = /*#__PURE__*/require('./internal/_curry2');\n\nvar _dispatchable = /*#__PURE__*/require('./internal/_dispatchable');\n\nvar _xtap = /*#__PURE__*/require('./internal/_xtap');\n\n/**\n * Runs the given function with the supplied object, then returns the object.\n *\n * Acts as a transducer if a transformer is given as second parameter.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (a -> *) -> a -> a\n * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.\n * @param {*} x\n * @return {*} `x`.\n * @example\n *\n *      const sayX = x => console.log('x is ' + x);\n *      R.tap(sayX, 100); //=> 100\n *      // logs 'x is 100'\n * @symb R.tap(f, a) = a\n */\n\n\nvar tap = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xtap, function tap(fn, x) {\n  fn(x);\n  return x;\n}));\nmodule.exports = tap;"]}
3659ef338cf412474d7c1cc166c52dc0
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var stringify = require('json-stringify-safe');

var querystring = require('querystring');

var _require = require('url'),
    URL = _require.URL,
    URLSearchParams = _require.URLSearchParams;

var common = require("./common");

var _require2 = require("./intercept"),
    remove = _require2.remove;

var matchBody = require("./match_body");

var fs;

try {
  fs = require('fs');
} catch (err) {}

module.exports = function () {
  function Interceptor(scope, uri, method, requestBody, interceptorOptions) {
    (0, _classCallCheck2.default)(this, Interceptor);
    var uriIsStr = typeof uri === 'string';

    if (uriIsStr && !scope.scopeOptions.filteringScope && !scope.basePathname && !uri.startsWith('/') && !uri.startsWith('*')) {
      throw Error("Non-wildcard URL path strings must begin with a slash (otherwise they won't match anything) (got: " + uri + ")");
    }

    if (!method) {
      throw new Error('The "method" parameter is required for an intercept call.');
    }

    this.scope = scope;
    this.interceptorMatchHeaders = [];
    this.method = method.toUpperCase();
    this.uri = uri;
    this._key = this.method + " " + scope.basePath + scope.basePathname + (uriIsStr ? '' : '/') + uri;
    this.basePath = this.scope.basePath;
    this.path = uriIsStr ? scope.basePathname + uri : uri;
    this.queries = null;
    this.options = interceptorOptions || {};
    this.counter = 1;
    this._requestBody = requestBody;
    this.reqheaders = common.headersFieldNamesToLowerCase(scope.scopeOptions.reqheaders || {});
    this.badheaders = common.headersFieldsArrayToLowerCase(scope.scopeOptions.badheaders || []);
    this.delayBodyInMs = 0;
    this.delayConnectionInMs = 0;
    this.optional = false;

    if (uriIsStr && uri.includes('?')) {
      var parsedURL = new URL(this.path, 'http://localhost');
      this.path = parsedURL.pathname;
      this.query(parsedURL.searchParams);
      this._key = this.method + " " + scope.basePath + this.path;
    }
  }

  (0, _createClass2.default)(Interceptor, [{
    key: "optionally",
    value: function optionally() {
      var flag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      if (typeof flag !== 'boolean') {
        throw new Error('Invalid arguments: argument should be a boolean');
      }

      this.optional = flag;
      return this;
    }
  }, {
    key: "replyWithError",
    value: function replyWithError(errorMessage) {
      this.errorMessage = errorMessage;
      this.options = (0, _extends2.default)({}, this.scope.scopeOptions, this.options);
      this.scope.add(this._key, this);
      return this.scope;
    }
  }, {
    key: "reply",
    value: function reply(statusCode, body, rawHeaders) {
      if (typeof statusCode === 'function') {
        if (arguments.length > 1) {
          throw Error('Invalid arguments. When providing a function for the first argument, .reply does not accept other arguments.');
        }

        this.statusCode = null;
        this.fullReplyFunction = statusCode;
      } else {
        if (statusCode !== undefined && !Number.isInteger(statusCode)) {
          throw new Error("Invalid " + typeof statusCode + " value for status code");
        }

        this.statusCode = statusCode || 200;

        if (typeof body === 'function') {
          this.replyFunction = body;
          body = null;
        }
      }

      this.options = (0, _extends2.default)({}, this.scope.scopeOptions, this.options);
      this.rawHeaders = common.headersInputToRawArray(rawHeaders);

      if (this.scope.date) {
        this.rawHeaders.push('Date', this.scope.date.toUTCString());
      }

      this.headers = common.headersArrayToObject(this.rawHeaders.concat(this.scope._defaultReplyHeaders));

      if (body && typeof body !== 'string' && !Buffer.isBuffer(body) && !common.isStream(body) && !common.isContentEncoded(this.headers)) {
        try {
          body = stringify(body);
        } catch (err) {
          throw new Error('Error encoding response body into JSON');
        }

        if (!this.headers['content-type']) {
          this.rawHeaders.push('Content-Type', 'application/json');
        }

        if (this.scope.contentLen) {
          this.rawHeaders.push('Content-Length', body.length);
        }
      }

      this.scope.logger('reply.headers:', this.headers);
      this.scope.logger('reply.rawHeaders:', this.rawHeaders);
      this.body = body;
      this.scope.add(this._key, this);
      return this.scope;
    }
  }, {
    key: "replyWithFile",
    value: function replyWithFile(statusCode, filePath, headers) {
      if (!fs) {
        throw new Error('No fs');
      }

      var readStream = fs.createReadStream(filePath);
      readStream.pause();
      this.filePath = filePath;
      return this.reply(statusCode, readStream, headers);
    }
  }, {
    key: "reqheaderMatches",
    value: function reqheaderMatches(options, key) {
      var reqHeader = this.reqheaders[key];
      var header = options.headers[key];

      if (header && typeof header !== 'string' && header.toString) {
        header = header.toString();
      }

      if (key === 'host' && (header === undefined || reqHeader === undefined)) {
        return true;
      }

      if (reqHeader !== undefined && header !== undefined) {
        if (typeof reqHeader === 'function') {
          return reqHeader(header);
        } else if (common.matchStringOrRegexp(header, reqHeader)) {
          return true;
        }
      }

      this.scope.logger("request header field doesn't match:", key, header, reqHeader);
      return false;
    }
  }, {
    key: "match",
    value: function match(req, options, body) {
      var _this = this;

      if (this.scope.logger.enabled) {
        this.scope.logger('attempting match %s, body = %s', stringify(options), stringify(body));
      }

      var method = (options.method || 'GET').toUpperCase();
      var _options$path = options.path,
          path = _options$path === void 0 ? '/' : _options$path;
      var matches;
      var matchKey;
      var proto = options.proto;

      if (this.method !== method) {
        this.scope.logger("Method did not match. Request " + method + " Interceptor " + this.method);
        return false;
      }

      if (this.scope.transformPathFunction) {
        path = this.scope.transformPathFunction(path);
      }

      var requestMatchesFilter = function requestMatchesFilter(_ref) {
        var name = _ref.name,
            predicate = _ref.value;
        var headerValue = req.getHeader(name);

        if (typeof predicate === 'function') {
          return predicate(headerValue);
        } else {
          return common.matchStringOrRegexp(headerValue, predicate);
        }
      };

      if (!this.scope.matchHeaders.every(requestMatchesFilter) || !this.interceptorMatchHeaders.every(requestMatchesFilter)) {
        this.scope.logger("headers don't match");
        return false;
      }

      var reqHeadersMatch = Object.keys(this.reqheaders).every(function (key) {
        return _this.reqheaderMatches(options, key);
      });

      if (!reqHeadersMatch) {
        this.scope.logger("headers don't match");
        return false;
      }

      if (this.scope.scopeOptions.conditionally && !this.scope.scopeOptions.conditionally()) {
        this.scope.logger('matching failed because Scope.conditionally() did not validate');
        return false;
      }

      var badHeaders = this.badheaders.filter(function (header) {
        return header in options.headers;
      });

      if (badHeaders.length) {
        var _this$scope;

        (_this$scope = this.scope).logger.apply(_this$scope, ['request contains bad headers'].concat((0, _toConsumableArray2.default)(badHeaders)));

        return false;
      }

      if (this.queries === null) {
        this.scope.logger('query matching skipped');
      } else {
        var _path$split = path.split('?'),
            _path$split2 = (0, _slicedToArray2.default)(_path$split, 2),
            pathname = _path$split2[0],
            search = _path$split2[1];

        var matchQueries = this.matchQuery({
          search: search
        });
        this.scope.logger(matchQueries ? 'query matching succeeded' : 'query matching failed');

        if (!matchQueries) {
          return false;
        }

        path = pathname;
      }

      if (this.__nock_filteredScope) {
        matchKey = this.__nock_filteredScope;
      } else {
        matchKey = common.normalizeOrigin(proto, options.host, options.port);
      }

      if (typeof this.uri === 'function') {
        matches = common.matchStringOrRegexp(matchKey, this.basePath) && this.uri.call(this, path);
      } else {
        matches = common.matchStringOrRegexp(matchKey, this.basePath) && common.matchStringOrRegexp(path, this.path);
      }

      this.scope.logger("matching " + matchKey + path + " to " + this._key + ": " + matches);

      if (matches && this._requestBody !== undefined) {
        if (this.scope.transformRequestBodyFunction) {
          body = this.scope.transformRequestBodyFunction(body, this._requestBody);
        }

        matches = matchBody(options, this._requestBody, body);

        if (!matches) {
          this.scope.logger("bodies don't match: \n", this._requestBody, '\n', body);
        }
      }

      return matches;
    }
  }, {
    key: "matchOrigin",
    value: function matchOrigin(options) {
      var isPathFn = typeof this.path === 'function';
      var isRegex = this.path instanceof RegExp;
      var isRegexBasePath = this.scope.basePath instanceof RegExp;
      var method = (options.method || 'GET').toUpperCase();
      var path = options.path;
      var proto = options.proto;

      if (!isRegex) {
        path = path ? path.split('?')[0] : '';
      }

      if (this.scope.transformPathFunction) {
        path = this.scope.transformPathFunction(path);
      }

      var comparisonKey = isPathFn || isRegex ? this.__nock_scopeKey : this._key;
      var matchKey = method + " " + proto + "://" + options.host + path;

      if (isPathFn) {
        return !!(matchKey.match(comparisonKey) && this.path(path));
      }

      if (isRegex && !isRegexBasePath) {
        return !!matchKey.match(comparisonKey) && this.path.test(path);
      }

      if (isRegexBasePath) {
        return this.scope.basePath.test(matchKey) && !!path.match(this.path);
      }

      return comparisonKey === matchKey;
    }
  }, {
    key: "matchHostName",
    value: function matchHostName(options) {
      return options.hostname === this.scope.urlParts.hostname;
    }
  }, {
    key: "matchQuery",
    value: function matchQuery(options) {
      if (this.queries === true) {
        return true;
      }

      var reqQueries = querystring.parse(options.search);
      this.scope.logger('Interceptor queries: %j', this.queries);
      this.scope.logger('    Request queries: %j', reqQueries);

      if (typeof this.queries === 'function') {
        return this.queries(reqQueries);
      }

      return common.dataEqual(this.queries, reqQueries);
    }
  }, {
    key: "filteringPath",
    value: function filteringPath() {
      var _this$scope2;

      (_this$scope2 = this.scope).filteringPath.apply(_this$scope2, arguments);

      return this;
    }
  }, {
    key: "markConsumed",
    value: function markConsumed() {
      this.interceptionCounter++;
      remove(this);

      if ((this.scope.shouldPersist() || this.counter > 0) && this.filePath) {
        this.body = fs.createReadStream(this.filePath);
        this.body.pause();
      }

      if (!this.scope.shouldPersist() && this.counter < 1) {
        this.scope.remove(this._key, this);
      }
    }
  }, {
    key: "matchHeader",
    value: function matchHeader(name, value) {
      this.interceptorMatchHeaders.push({
        name: name,
        value: value
      });
      return this;
    }
  }, {
    key: "basicAuth",
    value: function basicAuth(_ref2) {
      var user = _ref2.user,
          _ref2$pass = _ref2.pass,
          pass = _ref2$pass === void 0 ? '' : _ref2$pass;
      var encoded = Buffer.from(user + ":" + pass).toString('base64');
      this.matchHeader('authorization', "Basic " + encoded);
      return this;
    }
  }, {
    key: "query",
    value: function query(queries) {
      if (this.queries !== null) {
        throw Error("Query parameters have already been defined");
      }

      if (queries === true) {
        this.queries = queries;
        return this;
      }

      if (typeof queries === 'function') {
        this.queries = queries;
        return this;
      }

      var strFormattingFn;

      if (this.scope.scopeOptions.encodedQueryParams) {
        strFormattingFn = common.percentDecode;
      }

      if (queries instanceof URLSearchParams) {
        queries = querystring.parse(queries.toString());
      } else if (!common.isPlainObject(queries)) {
        throw Error("Argument Error: " + queries);
      }

      this.queries = {};

      for (var _i = 0, _Object$entries = Object.entries(queries); _i < _Object$entries.length; _i++) {
        var _ref3 = _Object$entries[_i];

        var _ref4 = (0, _slicedToArray2.default)(_ref3, 2);

        var key = _ref4[0];
        var value = _ref4[1];
        var formatted = common.formatQueryValue(key, value, strFormattingFn);

        var _formatted = (0, _slicedToArray2.default)(formatted, 2),
            formattedKey = _formatted[0],
            formattedValue = _formatted[1];

        this.queries[formattedKey] = formattedValue;
      }

      return this;
    }
  }, {
    key: "times",
    value: function times(newCounter) {
      if (newCounter < 1) {
        return this;
      }

      this.counter = newCounter;
      return this;
    }
  }, {
    key: "once",
    value: function once() {
      return this.times(1);
    }
  }, {
    key: "twice",
    value: function twice() {
      return this.times(2);
    }
  }, {
    key: "thrice",
    value: function thrice() {
      return this.times(3);
    }
  }, {
    key: "delay",
    value: function delay(opts) {
      var headDelay;
      var bodyDelay;

      if (typeof opts === 'number') {
        headDelay = opts;
        bodyDelay = 0;
      } else if (typeof opts === 'object') {
        headDelay = opts.head || 0;
        bodyDelay = opts.body || 0;
      } else {
        throw new Error("Unexpected input opts " + opts);
      }

      return this.delayConnection(headDelay).delayBody(bodyDelay);
    }
  }, {
    key: "delayBody",
    value: function delayBody(ms) {
      this.delayBodyInMs = ms;
      return this;
    }
  }, {
    key: "delayConnection",
    value: function delayConnection(ms) {
      this.delayConnectionInMs = ms;
      return this;
    }
  }]);
  return Interceptor;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
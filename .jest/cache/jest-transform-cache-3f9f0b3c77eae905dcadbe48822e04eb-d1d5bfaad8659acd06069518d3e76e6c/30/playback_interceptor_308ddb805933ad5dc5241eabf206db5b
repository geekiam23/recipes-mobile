63b3c2559ef64f2c5df1f1f4ca0bfcef
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var stream = require('stream');

var util = require('util');

var zlib = require('zlib');

var debug = require('debug')('nock.playback_interceptor');

var common = require("./common");

function parseJSONRequestBody(req, requestBody) {
  if (!requestBody || !common.isJSONContent(req.headers)) {
    return requestBody;
  }

  if (common.contentEncoding(req.headers, 'gzip')) {
    requestBody = String(zlib.gunzipSync(Buffer.from(requestBody, 'hex')));
  } else if (common.contentEncoding(req.headers, 'deflate')) {
    requestBody = String(zlib.inflateSync(Buffer.from(requestBody, 'hex')));
  }

  return JSON.parse(requestBody);
}

function parseFullReplyResult(response, fullReplyResult) {
  var _response$rawHeaders;

  debug('full response from callback result: %j', fullReplyResult);

  if (!Array.isArray(fullReplyResult)) {
    throw Error('A single function provided to .reply MUST return an array');
  }

  if (fullReplyResult.length > 3) {
    throw Error('The array returned from the .reply callback contains too many values');
  }

  var _fullReplyResult = (0, _slicedToArray2.default)(fullReplyResult, 3),
      status = _fullReplyResult[0],
      _fullReplyResult$ = _fullReplyResult[1],
      body = _fullReplyResult$ === void 0 ? '' : _fullReplyResult$,
      headers = _fullReplyResult[2];

  if (!Number.isInteger(status)) {
    throw new Error("Invalid " + typeof status + " value for status code");
  }

  response.statusCode = status;

  (_response$rawHeaders = response.rawHeaders).push.apply(_response$rawHeaders, (0, _toConsumableArray2.default)(common.headersInputToRawArray(headers)));

  debug('response.rawHeaders after reply: %j', response.rawHeaders);
  return body;
}

function selectDefaultHeaders(existingHeaders, defaultHeaders) {
  if (!defaultHeaders.length) {
    return [];
  }

  var definedHeaders = new Set();
  var result = [];
  common.forEachHeader(existingHeaders, function (_, fieldName) {
    definedHeaders.add(fieldName.toLowerCase());
  });
  common.forEachHeader(defaultHeaders, function (value, fieldName) {
    if (!definedHeaders.has(fieldName.toLowerCase())) {
      result.push(fieldName, value);
    }
  });
  return result;
}

var ReadableBuffers = function (_stream$Readable) {
  (0, _inherits2.default)(ReadableBuffers, _stream$Readable);

  var _super = _createSuper(ReadableBuffers);

  function ReadableBuffers(buffers) {
    var _this;

    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _classCallCheck2.default)(this, ReadableBuffers);
    _this = _super.call(this, opts);
    _this.buffers = buffers;
    return _this;
  }

  (0, _createClass2.default)(ReadableBuffers, [{
    key: "_read",
    value: function _read(size) {
      while (this.buffers.length) {
        if (!this.push(this.buffers.shift())) {
          return;
        }
      }

      this.push(null);
    }
  }]);
  return ReadableBuffers;
}(stream.Readable);

function convertBodyToStream(body) {
  if (common.isStream(body)) {
    return body;
  }

  if (body === undefined) {
    return new ReadableBuffers([]);
  }

  if (Buffer.isBuffer(body)) {
    return new ReadableBuffers([body]);
  }

  if (typeof body !== 'string') {
    body = JSON.stringify(body);
  }

  return new ReadableBuffers([Buffer.from(body)]);
}

function playbackInterceptor(_ref) {
  var req = _ref.req,
      socket = _ref.socket,
      options = _ref.options,
      requestBodyString = _ref.requestBodyString,
      requestBodyIsUtf8Representable = _ref.requestBodyIsUtf8Representable,
      response = _ref.response,
      interceptor = _ref.interceptor;
  var logger = interceptor.scope.logger;

  function start() {
    req.headers = req.getHeaders();
    interceptor.scope.emit('request', req, interceptor, requestBodyString);

    if (typeof interceptor.errorMessage !== 'undefined') {
      var error;

      if (typeof interceptor.errorMessage === 'object') {
        error = interceptor.errorMessage;
      } else {
        error = new Error(interceptor.errorMessage);
      }

      var delay = interceptor.delayBodyInMs + interceptor.delayConnectionInMs;
      common.setTimeout(function () {
        return req.destroy(error);
      }, delay);
      return;
    }

    response.statusCode = interceptor.statusCode;
    response.rawHeaders = (0, _toConsumableArray2.default)(interceptor.rawHeaders);
    logger('response.rawHeaders:', response.rawHeaders);
    interceptor.req = req;

    if (interceptor.replyFunction) {
      var parsedRequestBody = parseJSONRequestBody(req, requestBodyString);
      var fn = interceptor.replyFunction;

      if (fn.length === 3) {
        fn = util.promisify(fn);
      }

      Promise.resolve(fn.call(interceptor, options.path, parsedRequestBody)).then(continueWithResponseBody).catch(function (err) {
        return req.destroy(err);
      });
      return;
    }

    if (interceptor.fullReplyFunction) {
      var _parsedRequestBody = parseJSONRequestBody(req, requestBodyString);

      var _fn = interceptor.fullReplyFunction;

      if (_fn.length === 3) {
        _fn = util.promisify(_fn);
      }

      Promise.resolve(_fn.call(interceptor, options.path, _parsedRequestBody)).then(continueWithFullResponse).catch(function (err) {
        return req.destroy(err);
      });
      return;
    }

    if (common.isContentEncoded(interceptor.headers) && !common.isStream(interceptor.body)) {
      var bufferData = Array.isArray(interceptor.body) ? interceptor.body : [interceptor.body];
      var responseBuffers = bufferData.map(function (data) {
        return Buffer.from(data, 'hex');
      });

      var _responseBody = new ReadableBuffers(responseBuffers);

      continueWithResponseBody(_responseBody);
      return;
    }

    var responseBody = interceptor.body;

    if (!requestBodyIsUtf8Representable && typeof responseBody === 'string') {
      responseBody = Buffer.from(responseBody, 'hex');

      if (!responseBody || interceptor.body.length > 0 && responseBody.length === 0) {
        responseBody = Buffer.from(interceptor.body, 'utf8');
      }
    }

    return continueWithResponseBody(responseBody);
  }

  function continueWithFullResponse(fullReplyResult) {
    var responseBody;

    try {
      responseBody = parseFullReplyResult(response, fullReplyResult);
    } catch (err) {
      req.destroy(err);
      return;
    }

    continueWithResponseBody(responseBody);
  }

  function prepareResponseHeaders(body) {
    var _response$rawHeaders2;

    var defaultHeaders = (0, _toConsumableArray2.default)(interceptor.scope._defaultReplyHeaders);
    var isJSON = body !== undefined && typeof body !== 'string' && !Buffer.isBuffer(body) && !common.isStream(body);

    if (isJSON) {
      defaultHeaders.push('Content-Type', 'application/json');
    }

    (_response$rawHeaders2 = response.rawHeaders).push.apply(_response$rawHeaders2, (0, _toConsumableArray2.default)(selectDefaultHeaders(response.rawHeaders, defaultHeaders)));

    common.forEachHeader(response.rawHeaders, function (value, fieldName, i) {
      if (typeof value === 'function') {
        response.rawHeaders[i + 1] = value(req, response, body);
      }
    });
    response.headers = common.headersArrayToObject(response.rawHeaders);
  }

  function continueWithResponseBody(rawBody) {
    prepareResponseHeaders(rawBody);
    var bodyAsStream = convertBodyToStream(rawBody);
    bodyAsStream.pause();
    bodyAsStream.on('data', function (chunk) {
      response.push(chunk);
    });
    bodyAsStream.on('end', function () {
      response.complete = true;
      response.push(null);
      interceptor.scope.emit('replied', req, interceptor);
    });
    bodyAsStream.on('error', function (err) {
      response.emit('error', err);
    });
    var delayBodyInMs = interceptor.delayBodyInMs,
        delayConnectionInMs = interceptor.delayConnectionInMs;

    function respond() {
      if (common.isRequestDestroyed(req)) {
        return;
      }

      req.res = response;
      response.req = req;
      logger('emitting response');
      req.emit('response', response);
      common.setTimeout(function () {
        return bodyAsStream.resume();
      }, delayBodyInMs);
    }

    socket.applyDelay(delayConnectionInMs);
    common.setTimeout(respond, delayConnectionInMs);
  }

  common.setImmediate(function () {
    if (!common.isRequestDestroyed(req)) {
      start();
    }
  });
}

module.exports = {
  playbackInterceptor: playbackInterceptor
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBsYXliYWNrX2ludGVyY2VwdG9yLmpzIl0sIm5hbWVzIjpbInN0cmVhbSIsInJlcXVpcmUiLCJ1dGlsIiwiemxpYiIsImRlYnVnIiwiY29tbW9uIiwicGFyc2VKU09OUmVxdWVzdEJvZHkiLCJyZXEiLCJyZXF1ZXN0Qm9keSIsImlzSlNPTkNvbnRlbnQiLCJoZWFkZXJzIiwiY29udGVudEVuY29kaW5nIiwiU3RyaW5nIiwiZ3VuemlwU3luYyIsIkJ1ZmZlciIsImZyb20iLCJpbmZsYXRlU3luYyIsIkpTT04iLCJwYXJzZSIsInBhcnNlRnVsbFJlcGx5UmVzdWx0IiwicmVzcG9uc2UiLCJmdWxsUmVwbHlSZXN1bHQiLCJBcnJheSIsImlzQXJyYXkiLCJFcnJvciIsImxlbmd0aCIsInN0YXR1cyIsImJvZHkiLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJzdGF0dXNDb2RlIiwicmF3SGVhZGVycyIsInB1c2giLCJoZWFkZXJzSW5wdXRUb1Jhd0FycmF5Iiwic2VsZWN0RGVmYXVsdEhlYWRlcnMiLCJleGlzdGluZ0hlYWRlcnMiLCJkZWZhdWx0SGVhZGVycyIsImRlZmluZWRIZWFkZXJzIiwiU2V0IiwicmVzdWx0IiwiZm9yRWFjaEhlYWRlciIsIl8iLCJmaWVsZE5hbWUiLCJhZGQiLCJ0b0xvd2VyQ2FzZSIsInZhbHVlIiwiaGFzIiwiUmVhZGFibGVCdWZmZXJzIiwiYnVmZmVycyIsIm9wdHMiLCJzaXplIiwic2hpZnQiLCJSZWFkYWJsZSIsImNvbnZlcnRCb2R5VG9TdHJlYW0iLCJpc1N0cmVhbSIsInVuZGVmaW5lZCIsImlzQnVmZmVyIiwic3RyaW5naWZ5IiwicGxheWJhY2tJbnRlcmNlcHRvciIsInNvY2tldCIsIm9wdGlvbnMiLCJyZXF1ZXN0Qm9keVN0cmluZyIsInJlcXVlc3RCb2R5SXNVdGY4UmVwcmVzZW50YWJsZSIsImludGVyY2VwdG9yIiwibG9nZ2VyIiwic2NvcGUiLCJzdGFydCIsImdldEhlYWRlcnMiLCJlbWl0IiwiZXJyb3JNZXNzYWdlIiwiZXJyb3IiLCJkZWxheSIsImRlbGF5Qm9keUluTXMiLCJkZWxheUNvbm5lY3Rpb25Jbk1zIiwic2V0VGltZW91dCIsImRlc3Ryb3kiLCJyZXBseUZ1bmN0aW9uIiwicGFyc2VkUmVxdWVzdEJvZHkiLCJmbiIsInByb21pc2lmeSIsIlByb21pc2UiLCJyZXNvbHZlIiwiY2FsbCIsInBhdGgiLCJ0aGVuIiwiY29udGludWVXaXRoUmVzcG9uc2VCb2R5IiwiY2F0Y2giLCJlcnIiLCJmdWxsUmVwbHlGdW5jdGlvbiIsImNvbnRpbnVlV2l0aEZ1bGxSZXNwb25zZSIsImlzQ29udGVudEVuY29kZWQiLCJidWZmZXJEYXRhIiwicmVzcG9uc2VCdWZmZXJzIiwibWFwIiwiZGF0YSIsInJlc3BvbnNlQm9keSIsInByZXBhcmVSZXNwb25zZUhlYWRlcnMiLCJfZGVmYXVsdFJlcGx5SGVhZGVycyIsImlzSlNPTiIsImkiLCJoZWFkZXJzQXJyYXlUb09iamVjdCIsInJhd0JvZHkiLCJib2R5QXNTdHJlYW0iLCJwYXVzZSIsIm9uIiwiY2h1bmsiLCJjb21wbGV0ZSIsInJlc3BvbmQiLCJpc1JlcXVlc3REZXN0cm95ZWQiLCJyZXMiLCJyZXN1bWUiLCJhcHBseURlbGF5Iiwic2V0SW1tZWRpYXRlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxRQUFELENBQXRCOztBQUNBLElBQU1DLElBQUksR0FBR0QsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsSUFBTUUsSUFBSSxHQUFHRixPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxJQUFNRyxLQUFLLEdBQUdILE9BQU8sQ0FBQyxPQUFELENBQVAsQ0FBaUIsMkJBQWpCLENBQWQ7O0FBQ0EsSUFBTUksTUFBTSxHQUFHSixPQUFPLFlBQXRCOztBQUVBLFNBQVNLLG9CQUFULENBQThCQyxHQUE5QixFQUFtQ0MsV0FBbkMsRUFBZ0Q7QUFDOUMsTUFBSSxDQUFD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QWQsRUFBdUJtQixHQUF2QjtBQUNELEtBRkQ7QUFJQSxRQUFRZixhQUFSLEdBQStDVCxXQUEvQyxDQUFRUyxhQUFSO0FBQUEsUUFBdUJDLG1CQUF2QixHQUErQ1YsV0FBL0MsQ0FBdUJVLG1CQUF2Qjs7QUFFQSxhQUFTa0MsT0FBVCxHQUFtQjtBQUNqQixVQUFJdEcsTUFBTSxDQUFDdUcsa0JBQVAsQ0FBMEJyRyxHQUExQixDQUFKLEVBQW9DO0FBQ2xDO0FBQ0Q7O0FBS0RBLE1BQUFBLEdBQUcsQ0FBQ3NHLEdBQUosR0FBVXpGLFFBQVY7QUFDQUEsTUFBQUEsUUFBUSxDQUFDYixHQUFULEdBQWVBLEdBQWY7QUFFQXlELE1BQUFBLE1BQU0sQ0FBQyxtQkFBRCxDQUFOO0FBQ0F6RCxNQUFBQSxHQUFHLENBQUM2RCxJQUFKLENBQVMsVUFBVCxFQUFxQmhELFFBQXJCO0FBRUFmLE1BQUFBLE1BQU0sQ0FBQ3FFLFVBQVAsQ0FBa0I7QUFBQSxlQUFNNEIsWUFBWSxDQUFDUSxNQUFiLEVBQU47QUFBQSxPQUFsQixFQUErQ3RDLGFBQS9DO0FBQ0Q7O0FBRURiLElBQUFBLE1BQU0sQ0FBQ29ELFVBQVAsQ0FBa0J0QyxtQkFBbEI7QUFDQXBFLElBQUFBLE1BQU0sQ0FBQ3FFLFVBQVAsQ0FBa0JpQyxPQUFsQixFQUEyQmxDLG1CQUEzQjtBQUNEOztBQU1EcEUsRUFBQUEsTUFBTSxDQUFDMkcsWUFBUCxDQUFvQixZQUFNO0FBQ3hCLFFBQUksQ0FBQzNHLE1BQU0sQ0FBQ3VHLGtCQUFQLENBQTBCckcsR0FBMUIsQ0FBTCxFQUFxQztBQUNuQzJELE1BQUFBLEtBQUs7QUFDTjtBQUNGLEdBSkQ7QUFLRDs7QUFFRCtDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUFFeEQsRUFBQUEsbUJBQW1CLEVBQW5CQTtBQUFGLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpXG5jb25zdCB1dGlsID0gcmVxdWlyZSgndXRpbCcpXG5jb25zdCB6bGliID0gcmVxdWlyZSgnemxpYicpXG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ25vY2sucGxheWJhY2tfaW50ZXJjZXB0b3InKVxuY29uc3QgY29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24nKVxuXG5mdW5jdGlvbiBwYXJzZUpTT05SZXF1ZXN0Qm9keShyZXEsIHJlcXVlc3RCb2R5KSB7XG4gIGlmICghcmVxdWVzdEJvZHkgfHwgIWNvbW1vbi5pc0pTT05Db250ZW50KHJlcS5oZWFkZXJzKSkge1xuICAgIHJldHVybiByZXF1ZXN0Qm9keVxuICB9XG5cbiAgaWYgKGNvbW1vbi5jb250ZW50RW5jb2RpbmcocmVxLmhlYWRlcnMsICdnemlwJykpIHtcbiAgICByZXF1ZXN0Qm9keSA9IFN0cmluZyh6bGliLmd1bnppcFN5bmMoQnVmZmVyLmZyb20ocmVxdWVzdEJvZHksICdoZXgnKSkpXG4gIH0gZWxzZSBpZiAoY29tbW9uLmNvbnRlbnRFbmNvZGluZyhyZXEuaGVhZGVycywgJ2RlZmxhdGUnKSkge1xuICAgIHJlcXVlc3RCb2R5ID0gU3RyaW5nKHpsaWIuaW5mbGF0ZVN5bmMoQnVmZmVyLmZyb20ocmVxdWVzdEJvZHksICdoZXgnKSkpXG4gIH1cblxuICByZXR1cm4gSlNPTi5wYXJzZShyZXF1ZXN0Qm9keSlcbn1cblxuZnVuY3Rpb24gcGFyc2VGdWxsUmVwbHlSZXN1bHQocmVzcG9uc2UsIGZ1bGxSZXBseVJlc3VsdCkge1xuICBkZWJ1ZygnZnVsbCByZXNwb25zZSBmcm9tIGNhbGxiYWNrIHJlc3VsdDogJWonLCBmdWxsUmVwbHlSZXN1bHQpXG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KGZ1bGxSZXBseVJlc3VsdCkpIHtcbiAgICB0aHJvdyBFcnJvcignQSBzaW5nbGUgZnVuY3Rpb24gcHJvdmlkZWQgdG8gLnJlcGx5IE1VU1QgcmV0dXJuIGFuIGFycmF5JylcbiAgfVxuXG4gIGlmIChmdWxsUmVwbHlSZXN1bHQubGVuZ3RoID4gMykge1xuICAgIHRocm93IEVycm9yKFxuICAgICAgJ1RoZSBhcnJheSByZXR1cm5lZCBmcm9tIHRoZSAucmVwbHkgY2FsbGJhY2sgY29udGFpbnMgdG9vIG1hbnkgdmFsdWVzJ1xuICAgIClcbiAgfVxuXG4gIGNvbnN0IFtzdGF0dXMsIGJvZHkgPSAnJywgaGVhZGVyc10gPSBmdWxsUmVwbHlSZXN1bHRcblxuICBpZiAoIU51bWJlci5pc0ludGVnZXIoc3RhdHVzKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCAke3R5cGVvZiBzdGF0dXN9IHZhbHVlIGZvciBzdGF0dXMgY29kZWApXG4gIH1cblxuICByZXNwb25zZS5zdGF0dXNDb2RlID0gc3RhdHVzXG4gIHJlc3BvbnNlLnJhd0hlYWRlcnMucHVzaCguLi5jb21tb24uaGVhZGVyc0lucHV0VG9SYXdBcnJheShoZWFkZXJzKSlcbiAgZGVidWcoJ3Jlc3BvbnNlLnJhd0hlYWRlcnMgYWZ0ZXIgcmVwbHk6ICVqJywgcmVzcG9uc2UucmF3SGVhZGVycylcblxuICByZXR1cm4gYm9keVxufVxuXG4vKipcbiAqIERldGVybWluZSB3aGljaCBvZiB0aGUgZGVmYXVsdCBoZWFkZXJzIHNob3VsZCBiZSBhZGRlZCB0byB0aGUgcmVzcG9uc2UuXG4gKlxuICogRG9uJ3QgaW5jbHVkZSBhbnkgZGVmYXVsdHMgd2hvc2UgY2FzZS1pbnNlbnNpdGl2ZSBrZXlzIGFyZSBhbHJlYWR5IG9uIHRoZSByZXNwb25zZS5cbiAqL1xuZnVuY3Rpb24gc2VsZWN0RGVmYXVsdEhlYWRlcnMoZXhpc3RpbmdIZWFkZXJzLCBkZWZhdWx0SGVhZGVycykge1xuICBpZiAoIWRlZmF1bHRIZWFkZXJzLmxlbmd0aCkge1xuICAgIHJldHVybiBbXSAvLyByZXR1cm4gZWFybHkgaWYgd2UgZG9uJ3QgbmVlZCB0byBib3RoZXJcbiAgfVxuXG4gIGNvbnN0IGRlZmluZWRIZWFkZXJzID0gbmV3IFNldCgpXG4gIGNvbnN0IHJlc3VsdCA9IFtdXG5cbiAgY29tbW9uLmZvckVhY2hIZWFkZXIoZXhpc3RpbmdIZWFkZXJzLCAoXywgZmllbGROYW1lKSA9PiB7XG4gICAgZGVmaW5lZEhlYWRlcnMuYWRkKGZpZWxkTmFtZS50b0xvd2VyQ2FzZSgpKVxuICB9KVxuICBjb21tb24uZm9yRWFjaEhlYWRlcihkZWZhdWx0SGVhZGVycywgKHZhbHVlLCBmaWVsZE5hbWUpID0+IHtcbiAgICBpZiAoIWRlZmluZWRIZWFkZXJzLmhhcyhmaWVsZE5hbWUudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGZpZWxkTmFtZSwgdmFsdWUpXG4gICAgfVxuICB9KVxuXG4gIHJldHVybiByZXN1bHRcbn1cblxuLy8gUHJlc2VudHMgYSBsaXN0IG9mIEJ1ZmZlcnMgYXMgYSBSZWFkYWJsZVxuY2xhc3MgUmVhZGFibGVCdWZmZXJzIGV4dGVuZHMgc3RyZWFtLlJlYWRhYmxlIHtcbiAgY29uc3RydWN0b3IoYnVmZmVycywgb3B0cyA9IHt9KSB7XG4gICAgc3VwZXIob3B0cylcblxuICAgIHRoaXMuYnVmZmVycyA9IGJ1ZmZlcnNcbiAgfVxuXG4gIF9yZWFkKHNpemUpIHtcbiAgICB3aGlsZSAodGhpcy5idWZmZXJzLmxlbmd0aCkge1xuICAgICAgaWYgKCF0aGlzLnB1c2godGhpcy5idWZmZXJzLnNoaWZ0KCkpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnB1c2gobnVsbClcbiAgfVxufVxuXG5mdW5jdGlvbiBjb252ZXJ0Qm9keVRvU3RyZWFtKGJvZHkpIHtcbiAgaWYgKGNvbW1vbi5pc1N0cmVhbShib2R5KSkge1xuICAgIHJldHVybiBib2R5XG4gIH1cblxuICBpZiAoYm9keSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIG5ldyBSZWFkYWJsZUJ1ZmZlcnMoW10pXG4gIH1cblxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKGJvZHkpKSB7XG4gICAgcmV0dXJuIG5ldyBSZWFkYWJsZUJ1ZmZlcnMoW2JvZHldKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBib2R5ICE9PSAnc3RyaW5nJykge1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShib2R5KVxuICB9XG5cbiAgcmV0dXJuIG5ldyBSZWFkYWJsZUJ1ZmZlcnMoW0J1ZmZlci5mcm9tKGJvZHkpXSlcbn1cblxuLyoqXG4gKiBQbGF5IGJhY2sgYW4gaW50ZXJjZXB0b3IgdXNpbmcgdGhlIGdpdmVuIHJlcXVlc3QgYW5kIG1vY2sgcmVzcG9uc2UuXG4gKi9cbmZ1bmN0aW9uIHBsYXliYWNrSW50ZXJjZXB0b3Ioe1xuICByZXEsXG4gIHNvY2tldCxcbiAgb3B0aW9ucyxcbiAgcmVxdWVzdEJvZHlTdHJpbmcsXG4gIHJlcXVlc3RCb2R5SXNVdGY4UmVwcmVzZW50YWJsZSxcbiAgcmVzcG9uc2UsXG4gIGludGVyY2VwdG9yLFxufSkge1xuICBjb25zdCB7IGxvZ2dlciB9ID0gaW50ZXJjZXB0b3Iuc2NvcGVcblxuICBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICByZXEuaGVhZGVycyA9IHJlcS5nZXRIZWFkZXJzKClcblxuICAgIGludGVyY2VwdG9yLnNjb3BlLmVtaXQoJ3JlcXVlc3QnLCByZXEsIGludGVyY2VwdG9yLCByZXF1ZXN0Qm9keVN0cmluZylcblxuICAgIGlmICh0eXBlb2YgaW50ZXJjZXB0b3IuZXJyb3JNZXNzYWdlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgbGV0IGVycm9yXG4gICAgICBpZiAodHlwZW9mIGludGVyY2VwdG9yLmVycm9yTWVzc2FnZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgZXJyb3IgPSBpbnRlcmNlcHRvci5lcnJvck1lc3NhZ2VcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVycm9yID0gbmV3IEVycm9yKGludGVyY2VwdG9yLmVycm9yTWVzc2FnZSlcbiAgICAgIH1cblxuICAgICAgY29uc3QgZGVsYXkgPSBpbnRlcmNlcHRvci5kZWxheUJvZHlJbk1zICsgaW50ZXJjZXB0b3IuZGVsYXlDb25uZWN0aW9uSW5Nc1xuICAgICAgY29tbW9uLnNldFRpbWVvdXQoKCkgPT4gcmVxLmRlc3Ryb3koZXJyb3IpLCBkZWxheSlcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIFRoaXMgd2lsbCBiZSBudWxsIGlmIHdlIGhhdmUgYSBmdWxsUmVwbHlGdW5jdGlvbixcbiAgICAvLyBpbiB0aGF0IGNhc2Ugc3RhdHVzIGNvZGUgd2lsbCBiZSBzZXQgaW4gYHBhcnNlRnVsbFJlcGx5UmVzdWx0YFxuICAgIHJlc3BvbnNlLnN0YXR1c0NvZGUgPSBpbnRlcmNlcHRvci5zdGF0dXNDb2RlXG5cbiAgICAvLyBDbG9uZSBoZWFkZXJzL3Jhd0hlYWRlcnMgdG8gbm90IG92ZXJyaWRlIHRoZW0gd2hlbiBldmFsdWF0aW5nIGxhdGVyXG4gICAgcmVzcG9uc2UucmF3SGVhZGVycyA9IFsuLi5pbnRlcmNlcHRvci5yYXdIZWFkZXJzXVxuICAgIGxvZ2dlcigncmVzcG9uc2UucmF3SGVhZGVyczonLCByZXNwb25zZS5yYXdIZWFkZXJzKVxuXG4gICAgLy8gVE9ETzogTUFKT1I6IERvbid0IHRhY2sgdGhlIHJlcXVlc3Qgb250byB0aGUgaW50ZXJjZXB0b3IuXG4gICAgLy8gVGhlIG9ubHkgcmVhc29uIHdlIGRvIHRoaXMgaXMgc28gdGhhdCBpdCdzIGF2YWlsYWJsZSBpbnNpZGUgcmVwbHkgZnVuY3Rpb25zLlxuICAgIC8vIEl0IHdvdWxkIGJlIGJldHRlciB0byBwYXNzIHRoZSByZXF1ZXN0IGFzIGFuIGFyZ3VtZW50IHRvIHRoZSBmdW5jdGlvbnMgaW5zdGVhZC5cbiAgICAvLyBOb3QgYWRkaW5nIHRoZSByZXEgYXMgYSB0aGlyZCBhcmcgbm93IGJlY2F1c2UgaXQgc2hvdWxkIGZpcnN0IGJlIGRlY2lkZWQgaWYgKHBhdGgsIGJvZHksIHJlcSlcbiAgICAvLyBpcyB0aGUgc2lnbmF0dXJlIHdlIHdhbnQgdG8gZ28gd2l0aCBnb2luZyBmb3J3YXJkLlxuICAgIGludGVyY2VwdG9yLnJlcSA9IHJlcVxuXG4gICAgaWYgKGludGVyY2VwdG9yLnJlcGx5RnVuY3Rpb24pIHtcbiAgICAgIGNvbnN0IHBhcnNlZFJlcXVlc3RCb2R5ID0gcGFyc2VKU09OUmVxdWVzdEJvZHkocmVxLCByZXF1ZXN0Qm9keVN0cmluZylcblxuICAgICAgbGV0IGZuID0gaW50ZXJjZXB0b3IucmVwbHlGdW5jdGlvblxuICAgICAgaWYgKGZuLmxlbmd0aCA9PT0gMykge1xuICAgICAgICAvLyBIYW5kbGUgdGhlIGNhc2Ugb2YgYW4gYXN5bmMgcmVwbHkgZnVuY3Rpb24sIHRoZSB0aGlyZCBwYXJhbWV0ZXIgYmVpbmcgdGhlIGNhbGxiYWNrLlxuICAgICAgICBmbiA9IHV0aWwucHJvbWlzaWZ5KGZuKVxuICAgICAgfVxuXG4gICAgICAvLyBBdCB0aGlzIHBvaW50IGBmbmAgaXMgZWl0aGVyIGEgc3luY2hyb25vdXMgZnVuY3Rpb24gb3IgYSBwcm9taXNlLXJldHVybmluZyBmdW5jdGlvbjtcbiAgICAgIC8vIHdyYXBwaW5nIGluIGBQcm9taXNlLnJlc29sdmVgIG1ha2VzIGl0IGludG8gYSBwcm9taXNlIGVpdGhlciB3YXkuXG4gICAgICBQcm9taXNlLnJlc29sdmUoZm4uY2FsbChpbnRlcmNlcHRvciwgb3B0aW9ucy5wYXRoLCBwYXJzZWRSZXF1ZXN0Qm9keSkpXG4gICAgICAgIC50aGVuKGNvbnRpbnVlV2l0aFJlc3BvbnNlQm9keSlcbiAgICAgICAgLmNhdGNoKGVyciA9PiByZXEuZGVzdHJveShlcnIpKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKGludGVyY2VwdG9yLmZ1bGxSZXBseUZ1bmN0aW9uKSB7XG4gICAgICBjb25zdCBwYXJzZWRSZXF1ZXN0Qm9keSA9IHBhcnNlSlNPTlJlcXVlc3RCb2R5KHJlcSwgcmVxdWVzdEJvZHlTdHJpbmcpXG5cbiAgICAgIGxldCBmbiA9IGludGVyY2VwdG9yLmZ1bGxSZXBseUZ1bmN0aW9uXG4gICAgICBpZiAoZm4ubGVuZ3RoID09PSAzKSB7XG4gICAgICAgIGZuID0gdXRpbC5wcm9taXNpZnkoZm4pXG4gICAgICB9XG5cbiAgICAgIFByb21pc2UucmVzb2x2ZShmbi5jYWxsKGludGVyY2VwdG9yLCBvcHRpb25zLnBhdGgsIHBhcnNlZFJlcXVlc3RCb2R5KSlcbiAgICAgICAgLnRoZW4oY29udGludWVXaXRoRnVsbFJlc3BvbnNlKVxuICAgICAgICAuY2F0Y2goZXJyID0+IHJlcS5kZXN0cm95KGVycikpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBjb21tb24uaXNDb250ZW50RW5jb2RlZChpbnRlcmNlcHRvci5oZWFkZXJzKSAmJlxuICAgICAgIWNvbW1vbi5pc1N0cmVhbShpbnRlcmNlcHRvci5ib2R5KVxuICAgICkge1xuICAgICAgLy8gIElmIHRoZSBjb250ZW50IGlzIGVuY29kZWQgd2Uga25vdyB0aGF0IHRoZSByZXNwb25zZSBib2R5ICptdXN0KiBiZSBhbiBhcnJheVxuICAgICAgLy8gIG9mIHJlc3BvbnNlIGJ1ZmZlcnMgd2hpY2ggc2hvdWxkIGJlIG1vY2tlZCBvbmUgYnkgb25lLlxuICAgICAgLy8gIChvdGhlcndpc2UgZGVjb21wcmVzc2lvbnMgYWZ0ZXIgdGhlIGZpcnN0IG9uZSBmYWlscyBhcyB1bnppcCBleHBlY3RzIHRvIHJlY2VpdmVcbiAgICAgIC8vICBidWZmZXIgYnkgYnVmZmVyIGFuZCBub3Qgb25lIHNpbmdsZSBtZXJnZWQgYnVmZmVyKVxuICAgICAgY29uc3QgYnVmZmVyRGF0YSA9IEFycmF5LmlzQXJyYXkoaW50ZXJjZXB0b3IuYm9keSlcbiAgICAgICAgPyBpbnRlcmNlcHRvci5ib2R5XG4gICAgICAgIDogW2ludGVyY2VwdG9yLmJvZHldXG4gICAgICBjb25zdCByZXNwb25zZUJ1ZmZlcnMgPSBidWZmZXJEYXRhLm1hcChkYXRhID0+IEJ1ZmZlci5mcm9tKGRhdGEsICdoZXgnKSlcbiAgICAgIGNvbnN0IHJlc3BvbnNlQm9keSA9IG5ldyBSZWFkYWJsZUJ1ZmZlcnMocmVzcG9uc2VCdWZmZXJzKVxuICAgICAgY29udGludWVXaXRoUmVzcG9uc2VCb2R5KHJlc3BvbnNlQm9keSlcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIElmIHdlIGdldCB0byB0aGlzIHBvaW50LCB0aGUgYm9keSBpcyBlaXRoZXIgYSBzdHJpbmcgb3IgYW4gb2JqZWN0IHRoYXRcbiAgICAvLyB3aWxsIGV2ZW50dWFsbHkgYmUgSlNPTiBzdHJpbmdpZmllZC5cbiAgICBsZXQgcmVzcG9uc2VCb2R5ID0gaW50ZXJjZXB0b3IuYm9keVxuXG4gICAgLy8gSWYgdGhlIHJlcXVlc3Qgd2FzIG5vdCBVVEY4LXJlcHJlc2VudGFibGUgdGhlbiB3ZSBhc3N1bWUgdGhhdCB0aGVcbiAgICAvLyByZXNwb25zZSB3b24ndCBiZSBlaXRoZXIuIEluIHRoYXQgY2FzZSB3ZSBzZW5kIHRoZSByZXNwb25zZSBhcyBhIEJ1ZmZlclxuICAgIC8vIG9iamVjdCBhcyB0aGF0J3Mgd2hhdCB0aGUgY2xpZW50IHdpbGwgZXhwZWN0LlxuICAgIGlmICghcmVxdWVzdEJvZHlJc1V0ZjhSZXByZXNlbnRhYmxlICYmIHR5cGVvZiByZXNwb25zZUJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBUcnkgdG8gY3JlYXRlIHRoZSBidWZmZXIgZnJvbSB0aGUgaW50ZXJjZXB0b3IncyBib2R5IHJlc3BvbnNlIGFzIGhleC5cbiAgICAgIHJlc3BvbnNlQm9keSA9IEJ1ZmZlci5mcm9tKHJlc3BvbnNlQm9keSwgJ2hleCcpXG5cbiAgICAgIC8vIENyZWF0aW5nIGJ1ZmZlcnMgZG9lcyBub3QgbmVjZXNzYXJpbHkgdGhyb3cgZXJyb3JzOyBjaGVjayBmb3IgZGlmZmVyZW5jZSBpbiBzaXplLlxuICAgICAgaWYgKFxuICAgICAgICAhcmVzcG9uc2VCb2R5IHx8XG4gICAgICAgIChpbnRlcmNlcHRvci5ib2R5Lmxlbmd0aCA+IDAgJiYgcmVzcG9uc2VCb2R5Lmxlbmd0aCA9PT0gMClcbiAgICAgICkge1xuICAgICAgICAvLyBXZSBmYWxsYmFjayBvbiBjb25zdHJ1Y3RpbmcgYnVmZmVyIGZyb20gdXRmOCByZXByZXNlbnRhdGlvbiBvZiB0aGUgYm9keS5cbiAgICAgICAgcmVzcG9uc2VCb2R5ID0gQnVmZmVyLmZyb20oaW50ZXJjZXB0b3IuYm9keSwgJ3V0ZjgnKVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjb250aW51ZVdpdGhSZXNwb25zZUJvZHkocmVzcG9uc2VCb2R5KVxuICB9XG5cbiAgZnVuY3Rpb24gY29udGludWVXaXRoRnVsbFJlc3BvbnNlKGZ1bGxSZXBseVJlc3VsdCkge1xuICAgIGxldCByZXNwb25zZUJvZHlcbiAgICB0cnkge1xuICAgICAgcmVzcG9uc2VCb2R5ID0gcGFyc2VGdWxsUmVwbHlSZXN1bHQocmVzcG9uc2UsIGZ1bGxSZXBseVJlc3VsdClcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJlcS5kZXN0cm95KGVycilcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnRpbnVlV2l0aFJlc3BvbnNlQm9keShyZXNwb25zZUJvZHkpXG4gIH1cblxuICBmdW5jdGlvbiBwcmVwYXJlUmVzcG9uc2VIZWFkZXJzKGJvZHkpIHtcbiAgICBjb25zdCBkZWZhdWx0SGVhZGVycyA9IFsuLi5pbnRlcmNlcHRvci5zY29wZS5fZGVmYXVsdFJlcGx5SGVhZGVyc11cblxuICAgIC8vIEluY2x1ZGUgYSBKU09OIGNvbnRlbnQgdHlwZSB3aGVuIEpTT04uc3RyaW5naWZ5IGlzIGNhbGxlZCBvbiB0aGUgYm9keS5cbiAgICAvLyBUaGlzIGlzIGEgY29udmVuaWVuY2UgYWRkZWQgYnkgTm9jayB0aGF0IGhhcyBubyBhbmFsb2cgaW4gTm9kZS4gSXQncyBhZGRlZCB0byB0aGVcbiAgICAvLyBkZWZhdWx0cywgc28gaXQgd2lsbCBiZSBpZ25vcmVkIGlmIHRoZSBjYWxsZXIgZXhwbGljaXRseSBwcm92aWRlZCB0aGUgaGVhZGVyIGFscmVhZHkuXG4gICAgY29uc3QgaXNKU09OID1cbiAgICAgIGJvZHkgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgdHlwZW9mIGJvZHkgIT09ICdzdHJpbmcnICYmXG4gICAgICAhQnVmZmVyLmlzQnVmZmVyKGJvZHkpICYmXG4gICAgICAhY29tbW9uLmlzU3RyZWFtKGJvZHkpXG5cbiAgICBpZiAoaXNKU09OKSB7XG4gICAgICBkZWZhdWx0SGVhZGVycy5wdXNoKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpXG4gICAgfVxuXG4gICAgcmVzcG9uc2UucmF3SGVhZGVycy5wdXNoKFxuICAgICAgLi4uc2VsZWN0RGVmYXVsdEhlYWRlcnMocmVzcG9uc2UucmF3SGVhZGVycywgZGVmYXVsdEhlYWRlcnMpXG4gICAgKVxuXG4gICAgLy8gRXZhbHVhdGUgZnVuY3Rpb25hbCBoZWFkZXJzLlxuICAgIGNvbW1vbi5mb3JFYWNoSGVhZGVyKHJlc3BvbnNlLnJhd0hlYWRlcnMsICh2YWx1ZSwgZmllbGROYW1lLCBpKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJlc3BvbnNlLnJhd0hlYWRlcnNbaSArIDFdID0gdmFsdWUocmVxLCByZXNwb25zZSwgYm9keSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgcmVzcG9uc2UuaGVhZGVycyA9IGNvbW1vbi5oZWFkZXJzQXJyYXlUb09iamVjdChyZXNwb25zZS5yYXdIZWFkZXJzKVxuICB9XG5cbiAgZnVuY3Rpb24gY29udGludWVXaXRoUmVzcG9uc2VCb2R5KHJhd0JvZHkpIHtcbiAgICBwcmVwYXJlUmVzcG9uc2VIZWFkZXJzKHJhd0JvZHkpXG4gICAgY29uc3QgYm9keUFzU3RyZWFtID0gY29udmVydEJvZHlUb1N0cmVhbShyYXdCb2R5KVxuICAgIGJvZHlBc1N0cmVhbS5wYXVzZSgpXG5cbiAgICAvLyBJbmNvbWluZ01lc3NhZ2UgZXh0ZW5kcyBSZWFkYWJsZSBzbyB3ZSBjYW4ndCBzaW1wbHkgcGlwZS5cbiAgICBib2R5QXNTdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICAgIHJlc3BvbnNlLnB1c2goY2h1bmspXG4gICAgfSlcbiAgICBib2R5QXNTdHJlYW0ub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGh0dHBzOi8vbm9kZWpzLm9yZy9kaXN0L2xhdGVzdC12MTAueC9kb2NzL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2NvbXBsZXRlXG4gICAgICByZXNwb25zZS5jb21wbGV0ZSA9IHRydWVcbiAgICAgIHJlc3BvbnNlLnB1c2gobnVsbClcblxuICAgICAgaW50ZXJjZXB0b3Iuc2NvcGUuZW1pdCgncmVwbGllZCcsIHJlcSwgaW50ZXJjZXB0b3IpXG4gICAgfSlcbiAgICBib2R5QXNTdHJlYW0ub24oJ2Vycm9yJywgZnVuY3Rpb24gKGVycikge1xuICAgICAgcmVzcG9uc2UuZW1pdCgnZXJyb3InLCBlcnIpXG4gICAgfSlcblxuICAgIGNvbnN0IHsgZGVsYXlCb2R5SW5NcywgZGVsYXlDb25uZWN0aW9uSW5NcyB9ID0gaW50ZXJjZXB0b3JcblxuICAgIGZ1bmN0aW9uIHJlc3BvbmQoKSB7XG4gICAgICBpZiAoY29tbW9uLmlzUmVxdWVzdERlc3Ryb3llZChyZXEpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICAvLyBFdmVuIHRob3VnaCB3ZSd2ZSBoYWQgdGhlIHJlc3BvbnNlIG9iamVjdCBmb3IgYXdoaWxlIGF0IHRoaXMgcG9pbnQsXG4gICAgICAvLyB3ZSBvbmx5IGF0dGFjaCBpdCB0byB0aGUgcmVxdWVzdCBpbW1lZGlhdGVseSBiZWZvcmUgdGhlIGByZXNwb25zZWBcbiAgICAgIC8vIGV2ZW50IGJlY2F1c2UsIGFzIGluIE5vZGUsIGl0IGFsdGVycyB0aGUgZXJyb3IgaGFuZGxpbmcgYXJvdW5kIGFib3J0cy5cbiAgICAgIHJlcS5yZXMgPSByZXNwb25zZVxuICAgICAgcmVzcG9uc2UucmVxID0gcmVxXG5cbiAgICAgIGxvZ2dlcignZW1pdHRpbmcgcmVzcG9uc2UnKVxuICAgICAgcmVxLmVtaXQoJ3Jlc3BvbnNlJywgcmVzcG9uc2UpXG5cbiAgICAgIGNvbW1vbi5zZXRUaW1lb3V0KCgpID0+IGJvZHlBc1N0cmVhbS5yZXN1bWUoKSwgZGVsYXlCb2R5SW5NcylcbiAgICB9XG5cbiAgICBzb2NrZXQuYXBwbHlEZWxheShkZWxheUNvbm5lY3Rpb25Jbk1zKVxuICAgIGNvbW1vbi5zZXRUaW1lb3V0KHJlc3BvbmQsIGRlbGF5Q29ubmVjdGlvbkluTXMpXG4gIH1cblxuICAvLyBDYWxsaW5nIGBzdGFydGAgaW1tZWRpYXRlbHkgY291bGQgdGFrZSB0aGUgcmVxdWVzdCBhbGwgdGhlIHdheSB0byB0aGUgY29ubmVjdGlvbiBkZWxheVxuICAvLyBkdXJpbmcgYSBzaW5nbGUgbWljcm90YXNrIGV4ZWN1dGlvbi4gVGhpcyBzZXRJbW1lZGlhdGUgc3RhbGxzIHRoZSBwbGF5YmFjayB0byBlbnN1cmUgdGhlXG4gIC8vIGNvcnJlY3QgZXZlbnRzIGFyZSBlbWl0dGVkIGZpcnN0ICgnc29ja2V0JywgJ2ZpbmlzaCcpIGFuZCBhbnkgYWJvcnRzIGluIHRoZSBpbiB0aGUgcXVldWUgb3JcbiAgLy8gY2FsbGVkIGR1cmluZyBhICdmaW5pc2gnIGxpc3RlbmVyIGNhbiBiZSBjYWxsZWQuXG4gIGNvbW1vbi5zZXRJbW1lZGlhdGUoKCkgPT4ge1xuICAgIGlmICghY29tbW9uLmlzUmVxdWVzdERlc3Ryb3llZChyZXEpKSB7XG4gICAgICBzdGFydCgpXG4gICAgfVxuICB9KVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgcGxheWJhY2tJbnRlcmNlcHRvciB9XG4iXX0=
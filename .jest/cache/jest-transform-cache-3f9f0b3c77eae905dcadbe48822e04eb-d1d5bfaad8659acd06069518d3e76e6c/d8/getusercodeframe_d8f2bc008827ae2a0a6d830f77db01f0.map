{"version":3,"sources":["get-user-code-frame.js"],"names":["Object","defineProperty","exports","value","getUserCodeFrame","chalk","readFileSync","codeFrameColumns","nodeRequire","module","require","call","getCodeFrame","frame","locationStart","indexOf","locationEnd","frameLocation","slice","frameLocationElements","split","parseInt","filename","line","column","rawFileContents","codeFrame","start","highlightCode","linesBelow","dim","err","Error","firstClientCodeFrame","stack","find","includes"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,gBAAR,GAA2BA,gBAA3B;AAEA,IAAIC,KAAK,GAAG,IAAZ;AACA,IAAIC,YAAY,GAAG,IAAnB;AACA,IAAIC,gBAAgB,GAAG,IAAvB;;AAEA,IAAI;AACF,MAAMC,WAAW,GAAGC,MAAM,IAAIA,MAAM,CAACC,OAArC;AACAJ,EAAAA,YAAY,GAAGE,WAAW,CAACG,IAAZ,CAAiBF,MAAjB,EAAyB,IAAzB,EAA+BH,YAA9C;AACAC,EAAAA,gBAAgB,GAAGC,WAAW,CAACG,IAAZ,CAAiBF,MAAjB,EAAyB,mBAAzB,EAA8CF,gBAAjE;AACAF,EAAAA,KAAK,GAAGG,WAAW,CAACG,IAAZ,CAAiBF,MAAjB,EAAyB,OAAzB,CAAR;AACD,CALD,CAKE,gBAAM,CACP;;AAGD,SAASG,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,MAAMC,aAAa,GAAGD,KAAK,CAACE,OAAN,CAAc,GAAd,IAAqB,CAA3C;AACA,MAAMC,WAAW,GAAGH,KAAK,CAACE,OAAN,CAAc,GAAd,CAApB;AACA,MAAME,aAAa,GAAGJ,KAAK,CAACK,KAAN,CAAYJ,aAAZ,EAA2BE,WAA3B,CAAtB;AACA,MAAMG,qBAAqB,GAAGF,aAAa,CAACG,KAAd,CAAoB,GAApB,CAA9B;AACA,aAAiC,CAACD,qBAAqB,CAAC,CAAD,CAAtB,EAA2BE,QAAQ,CAACF,qBAAqB,CAAC,CAAD,CAAtB,EAA2B,EAA3B,CAAnC,EAAmEE,QAAQ,CAACF,qBAAqB,CAAC,CAAD,CAAtB,EAA2B,EAA3B,CAA3E,CAAjC;AAAA,MAAOG,QAAP;AAAA,MAAiBC,IAAjB;AAAA,MAAuBC,MAAvB;AACA,MAAIC,eAAe,GAAG,EAAtB;;AAEA,MAAI;AACFA,IAAAA,eAAe,GAAGnB,YAAY,CAACgB,QAAD,EAAW,OAAX,CAA9B;AACD,GAFD,CAEE,iBAAM;AACN,WAAO,EAAP;AACD;;AAED,MAAMI,SAAS,GAAGnB,gBAAgB,CAACkB,eAAD,EAAkB;AAClDE,IAAAA,KAAK,EAAE;AACLJ,MAAAA,IAAI,EAAJA,IADK;AAELC,MAAAA,MAAM,EAANA;AAFK;AAD2C,GAAlB,EAK/B;AACDI,IAAAA,aAAa,EAAE,IADd;AAEDC,IAAAA,UAAU,EAAE;AAFX,GAL+B,CAAlC;AASA,SAAUxB,KAAK,CAACyB,GAAN,CAAUb,aAAV,CAAV,UAAuCS,SAAvC;AACD;;AAED,SAAStB,gBAAT,GAA4B;AAI1B,MAAI,CAACE,YAAD,IAAiB,CAACC,gBAAtB,EAAwC;AACtC,WAAO,EAAP;AACD;;AAED,MAAMwB,GAAG,GAAG,IAAIC,KAAJ,EAAZ;AACA,MAAMC,oBAAoB,GAAGF,GAAG,CAACG,KAAJ,CAAUd,KAAV,CAAgB,IAAhB,EAAsBF,KAAtB,CAA4B,CAA5B,EAC5BiB,IAD4B,CACvB,UAAAtB,KAAK;AAAA,WAAI,CAACA,KAAK,CAACuB,QAAN,CAAe,eAAf,CAAL;AAAA,GADkB,CAA7B;AAGA,SAAOxB,YAAY,CAACqB,oBAAD,CAAnB;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getUserCodeFrame = getUserCodeFrame;\n// We try to load node dependencies\nlet chalk = null;\nlet readFileSync = null;\nlet codeFrameColumns = null;\n\ntry {\n  const nodeRequire = module && module.require;\n  readFileSync = nodeRequire.call(module, 'fs').readFileSync;\n  codeFrameColumns = nodeRequire.call(module, '@babel/code-frame').codeFrameColumns;\n  chalk = nodeRequire.call(module, 'chalk');\n} catch {// We're in a browser environment\n} // frame has the form \"at myMethod (location/to/my/file.js:10:2)\"\n\n\nfunction getCodeFrame(frame) {\n  const locationStart = frame.indexOf('(') + 1;\n  const locationEnd = frame.indexOf(')');\n  const frameLocation = frame.slice(locationStart, locationEnd);\n  const frameLocationElements = frameLocation.split(':');\n  const [filename, line, column] = [frameLocationElements[0], parseInt(frameLocationElements[1], 10), parseInt(frameLocationElements[2], 10)];\n  let rawFileContents = '';\n\n  try {\n    rawFileContents = readFileSync(filename, 'utf-8');\n  } catch {\n    return '';\n  }\n\n  const codeFrame = codeFrameColumns(rawFileContents, {\n    start: {\n      line,\n      column\n    }\n  }, {\n    highlightCode: true,\n    linesBelow: 0\n  });\n  return `${chalk.dim(frameLocation)}\\n${codeFrame}\\n`;\n}\n\nfunction getUserCodeFrame() {\n  // If we couldn't load dependencies, we can't generate the user trace\n\n  /* istanbul ignore next */\n  if (!readFileSync || !codeFrameColumns) {\n    return '';\n  }\n\n  const err = new Error();\n  const firstClientCodeFrame = err.stack.split('\\n').slice(1) // Remove first line which has the form \"Error: TypeError\"\n  .find(frame => !frame.includes('node_modules/')); // Ignore frames from 3rd party libraries\n\n  return getCodeFrame(firstClientCodeFrame);\n}"]}
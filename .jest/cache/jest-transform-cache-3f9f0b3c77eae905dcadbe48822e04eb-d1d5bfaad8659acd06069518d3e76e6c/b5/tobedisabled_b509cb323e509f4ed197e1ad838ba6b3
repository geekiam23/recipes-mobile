4a09c7c4784f1e32d052b606e135231c
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toBeDisabled = toBeDisabled;
exports.toBeEnabled = toBeEnabled;

var _ramda = require("ramda");

var _jestMatcherUtils = require("jest-matcher-utils");

var _utils = require("./utils");

var DISABLE_TYPES = ['Button', 'Slider', 'Switch', 'Text', 'TouchableHighlight', 'TouchableOpacity', 'TouchableWithoutFeedback', 'TouchableNativeFeedback', 'View', 'TextInput', 'Pressable'];

function isElementDisabledByParent(parent) {
  return isElementDisabled(parent);
}

function isElementDisabled(element) {
  var propDisabled = (0, _ramda.path)(['props', 'disabled'], element);
  var hasStatesDisabled = (0, _ramda.compose)((0, _ramda.includes)('disabled'), (0, _ramda.defaultTo)([]), (0, _ramda.path)(['props', 'accessibilityStates']));
  var hasStateDisabled = (0, _ramda.compose)((0, _ramda.propEq)('disabled', true), (0, _ramda.defaultTo)({}), (0, _ramda.path)(['props', 'accessibilityState']));
  var stateDisabled = (0, _ramda.anyPass)([hasStatesDisabled, hasStateDisabled])(element);
  return DISABLE_TYPES.includes((0, _utils.getType)(element)) && (Boolean(propDisabled) || stateDisabled);
}

function isAncestorDisabled(element) {
  var parent = element.parent;
  return Boolean(parent) && (isElementDisabledByParent(element, parent) || isAncestorDisabled(parent));
}

function toBeDisabled(element) {
  var _this = this;

  (0, _utils.checkReactElement)(element, toBeDisabled, this);
  var isDisabled = isElementDisabled(element) || isAncestorDisabled(element);
  return {
    pass: isDisabled,
    message: function message() {
      var is = isDisabled ? 'is' : 'is not';
      return [(0, _jestMatcherUtils.matcherHint)((_this.isNot ? '.not' : '') + ".toBeDisabled", 'element', ''), '', "Received element " + is + " disabled:", (0, _utils.printElement)(element)].join('\n');
    }
  };
}

function toBeEnabled(element) {
  var _this2 = this;

  (0, _utils.checkReactElement)(element, toBeDisabled, this);
  var isEnabled = !isElementDisabled(element);
  return {
    pass: isEnabled,
    message: function message() {
      var is = isEnabled ? 'is' : 'is not';
      return [(0, _jestMatcherUtils.matcherHint)((_this2.isNot ? '.not' : '') + ".toBeEnabled", 'element', ''), '', "Received element " + is + " enabled:", (0, _utils.printElement)(element)].join('\n');
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRvLWJlLWRpc2FibGVkLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidG9CZURpc2FibGVkIiwidG9CZUVuYWJsZWQiLCJfcmFtZGEiLCJyZXF1aXJlIiwiX2plc3RNYXRjaGVyVXRpbHMiLCJfdXRpbHMiLCJESVNBQkxFX1RZUEVTIiwiaXNFbGVtZW50RGlzYWJsZWRCeVBhcmVudCIsInBhcmVudCIsImlzRWxlbWVudERpc2FibGVkIiwiZWxlbWVudCIsInByb3BEaXNhYmxlZCIsInBhdGgiLCJoYXNTdGF0ZXNEaXNhYmxlZCIsImNvbXBvc2UiLCJpbmNsdWRlcyIsImRlZmF1bHRUbyIsImhhc1N0YXRlRGlzYWJsZWQiLCJwcm9wRXEiLCJzdGF0ZURpc2FibGVkIiwiYW55UGFzcyIsImdldFR5cGUiLCJCb29sZWFuIiwiaXNBbmNlc3RvckRpc2FibGVkIiwiX3RoaXMiLCJjaGVja1JlYWN0RWxlbWVudCIsImlzRGlzYWJsZWQiLCJwYXNzIiwibWVzc2FnZSIsImlzIiwibWF0Y2hlckhpbnQiLCJpc05vdCIsInByaW50RWxlbWVudCIsImpvaW4iLCJfdGhpczIiLCJpc0VuYWJsZWQiXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDQyxFQUFBQSxLQUFLLEVBQUU7QUFEb0MsQ0FBN0M7QUFHQUQsT0FBTyxDQUFDRSxZQUFSLEdBQXVCQSxZQUF2QjtBQUNBRixPQUFPLENBQUNHLFdBQVIsR0FBc0JBLFdBQXRCOztBQUVBLElBQUlDLE1BQU0sR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBcEI7O0FBRUEsSUFBSUMsaUJBQWlCLEdBQUdELE9BQU8sQ0FBQyxvQkFBRCxDQUEvQjs7QUFFQSxJQUFJRSxNQUFNLEdBQUdGLE9BQU8sV0FBcEI7O0FBRUEsSUFBSUcsYUFBYSxHQUFHLENBQUMsUUFBRCxFQUFXLFFBQVgsRUFBcUIs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QUF6QixDQUFoSixFQUFtTHVCLElBQW5MLENBQXdMLElBQXhMLENBQVA7QUFDRDtBQUxJLEdBQVA7QUFPRDs7QUFFRCxTQUFTaEMsV0FBVCxDQUFxQlMsT0FBckIsRUFBOEI7QUFDNUIsTUFBSXdCLE1BQU0sR0FBRyxJQUFiOztBQUVBLEdBQUMsR0FBRzdCLE1BQU0sQ0FBQ29CLGlCQUFYLEVBQThCZixPQUE5QixFQUF1Q1YsWUFBdkMsRUFBcUQsSUFBckQ7QUFDQSxNQUFJbUMsU0FBUyxHQUFHLENBQUMxQixpQkFBaUIsQ0FBQ0MsT0FBRCxDQUFsQztBQUNBLFNBQU87QUFDTGlCLElBQUFBLElBQUksRUFBRVEsU0FERDtBQUVMUCxJQUFBQSxPQUFPLEVBQUUsU0FBU0EsT0FBVCxHQUFtQjtBQUMxQixVQUFJQyxFQUFFLEdBQUdNLFNBQVMsR0FBRyxJQUFILEdBQVUsUUFBNUI7QUFDQSxhQUFPLENBQUMsQ0FBQyxHQUFHL0IsaUJBQWlCLENBQUMwQixXQUF0QixFQUFtQyxDQUFDSSxNQUFNLENBQUNILEtBQVAsR0FBZSxNQUFmLEdBQXdCLEVBQXpCLElBQStCLGNBQWxFLEVBQWtGLFNBQWxGLEVBQTZGLEVBQTdGLENBQUQsRUFBbUcsRUFBbkcsRUFBdUcsc0JBQXNCRixFQUF0QixHQUEyQixXQUFsSSxFQUErSSxDQUFDLEdBQUd4QixNQUFNLENBQUMyQixZQUFYLEVBQXlCdEIsT0FBekIsQ0FBL0ksRUFBa0x1QixJQUFsTCxDQUF1TCxJQUF2TCxDQUFQO0FBQ0Q7QUFMSSxHQUFQO0FBT0QiLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy50b0JlRGlzYWJsZWQgPSB0b0JlRGlzYWJsZWQ7XG5leHBvcnRzLnRvQmVFbmFibGVkID0gdG9CZUVuYWJsZWQ7XG5cbnZhciBfcmFtZGEgPSByZXF1aXJlKFwicmFtZGFcIik7XG5cbnZhciBfamVzdE1hdGNoZXJVdGlscyA9IHJlcXVpcmUoXCJqZXN0LW1hdGNoZXItdXRpbHNcIik7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcblxudmFyIERJU0FCTEVfVFlQRVMgPSBbJ0J1dHRvbicsICdTbGlkZXInLCAnU3dpdGNoJywgJ1RleHQnLCAnVG91Y2hhYmxlSGlnaGxpZ2h0JywgJ1RvdWNoYWJsZU9wYWNpdHknLCAnVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrJywgJ1RvdWNoYWJsZU5hdGl2ZUZlZWRiYWNrJywgJ1ZpZXcnLCAnVGV4dElucHV0JywgJ1ByZXNzYWJsZSddO1xuXG5mdW5jdGlvbiBpc0VsZW1lbnREaXNhYmxlZEJ5UGFyZW50KHBhcmVudCkge1xuICByZXR1cm4gaXNFbGVtZW50RGlzYWJsZWQocGFyZW50KTtcbn1cblxuZnVuY3Rpb24gaXNFbGVtZW50RGlzYWJsZWQoZWxlbWVudCkge1xuICB2YXIgcHJvcERpc2FibGVkID0gKDAsIF9yYW1kYS5wYXRoKShbJ3Byb3BzJywgJ2Rpc2FibGVkJ10sIGVsZW1lbnQpO1xuICB2YXIgaGFzU3RhdGVzRGlzYWJsZWQgPSAoMCwgX3JhbWRhLmNvbXBvc2UpKCgwLCBfcmFtZGEuaW5jbHVkZXMpKCdkaXNhYmxlZCcpLCAoMCwgX3JhbWRhLmRlZmF1bHRUbykoW10pLCAoMCwgX3JhbWRhLnBhdGgpKFsncHJvcHMnLCAnYWNjZXNzaWJpbGl0eVN0YXRlcyddKSk7XG4gIHZhciBoYXNTdGF0ZURpc2FibGVkID0gKDAsIF9yYW1kYS5jb21wb3NlKSgoMCwgX3JhbWRhLnByb3BFcSkoJ2Rpc2FibGVkJywgdHJ1ZSksICgwLCBfcmFtZGEuZGVmYXVsdFRvKSh7fSksICgwLCBfcmFtZGEucGF0aCkoWydwcm9wcycsICdhY2Nlc3NpYmlsaXR5U3RhdGUnXSkpO1xuICB2YXIgc3RhdGVEaXNhYmxlZCA9ICgwLCBfcmFtZGEuYW55UGFzcykoW2hhc1N0YXRlc0Rpc2FibGVkLCBoYXNTdGF0ZURpc2FibGVkXSkoZWxlbWVudCk7XG4gIHJldHVybiBESVNBQkxFX1RZUEVTLmluY2x1ZGVzKCgwLCBfdXRpbHMuZ2V0VHlwZSkoZWxlbWVudCkpICYmIChCb29sZWFuKHByb3BEaXNhYmxlZCkgfHwgc3RhdGVEaXNhYmxlZCk7XG59XG5cbmZ1bmN0aW9uIGlzQW5jZXN0b3JEaXNhYmxlZChlbGVtZW50KSB7XG4gIHZhciBwYXJlbnQgPSBlbGVtZW50LnBhcmVudDtcbiAgcmV0dXJuIEJvb2xlYW4ocGFyZW50KSAmJiAoaXNFbGVtZW50RGlzYWJsZWRCeVBhcmVudChlbGVtZW50LCBwYXJlbnQpIHx8IGlzQW5jZXN0b3JEaXNhYmxlZChwYXJlbnQpKTtcbn1cblxuZnVuY3Rpb24gdG9CZURpc2FibGVkKGVsZW1lbnQpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICAoMCwgX3V0aWxzLmNoZWNrUmVhY3RFbGVtZW50KShlbGVtZW50LCB0b0JlRGlzYWJsZWQsIHRoaXMpO1xuICB2YXIgaXNEaXNhYmxlZCA9IGlzRWxlbWVudERpc2FibGVkKGVsZW1lbnQpIHx8IGlzQW5jZXN0b3JEaXNhYmxlZChlbGVtZW50KTtcbiAgcmV0dXJuIHtcbiAgICBwYXNzOiBpc0Rpc2FibGVkLFxuICAgIG1lc3NhZ2U6IGZ1bmN0aW9uIG1lc3NhZ2UoKSB7XG4gICAgICB2YXIgaXMgPSBpc0Rpc2FibGVkID8gJ2lzJyA6ICdpcyBub3QnO1xuICAgICAgcmV0dXJuIFsoMCwgX2plc3RNYXRjaGVyVXRpbHMubWF0Y2hlckhpbnQpKChfdGhpcy5pc05vdCA/ICcubm90JyA6ICcnKSArIFwiLnRvQmVEaXNhYmxlZFwiLCAnZWxlbWVudCcsICcnKSwgJycsIFwiUmVjZWl2ZWQgZWxlbWVudCBcIiArIGlzICsgXCIgZGlzYWJsZWQ6XCIsICgwLCBfdXRpbHMucHJpbnRFbGVtZW50KShlbGVtZW50KV0uam9pbignXFxuJyk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiB0b0JlRW5hYmxlZChlbGVtZW50KSB7XG4gIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICgwLCBfdXRpbHMuY2hlY2tSZWFjdEVsZW1lbnQpKGVsZW1lbnQsIHRvQmVEaXNhYmxlZCwgdGhpcyk7XG4gIHZhciBpc0VuYWJsZWQgPSAhaXNFbGVtZW50RGlzYWJsZWQoZWxlbWVudCk7XG4gIHJldHVybiB7XG4gICAgcGFzczogaXNFbmFibGVkLFxuICAgIG1lc3NhZ2U6IGZ1bmN0aW9uIG1lc3NhZ2UoKSB7XG4gICAgICB2YXIgaXMgPSBpc0VuYWJsZWQgPyAnaXMnIDogJ2lzIG5vdCc7XG4gICAgICByZXR1cm4gWygwLCBfamVzdE1hdGNoZXJVdGlscy5tYXRjaGVySGludCkoKF90aGlzMi5pc05vdCA/ICcubm90JyA6ICcnKSArIFwiLnRvQmVFbmFibGVkXCIsICdlbGVtZW50JywgJycpLCAnJywgXCJSZWNlaXZlZCBlbGVtZW50IFwiICsgaXMgKyBcIiBlbmFibGVkOlwiLCAoMCwgX3V0aWxzLnByaW50RWxlbWVudCkoZWxlbWVudCldLmpvaW4oJ1xcbicpO1xuICAgIH1cbiAgfTtcbn0iXX0=
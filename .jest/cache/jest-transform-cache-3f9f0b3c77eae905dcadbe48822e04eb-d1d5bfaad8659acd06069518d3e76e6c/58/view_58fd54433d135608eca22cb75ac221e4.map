{"version":3,"sources":["view.js"],"names":["_curry2","require","Const","x","value","view","lens","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAAgBC,OAAO,sBAAlC;;AAKA,IAAIC,KAAK,GAAG,SAARA,KAAQ,CAAUC,CAAV,EAAa;AACvB,SAAO;AAAEC,IAAAA,KAAK,EAAED,CAAT;AAAY,wBAAoB,0BAAY;AAC/C,aAAO,IAAP;AACD;AAFI,GAAP;AAGD,CAJD;;AA2BA,IAAIE,IAAI,GAAgBL,OAAO,CAAC,SAASK,IAAT,CAAcC,IAAd,EAAoBH,CAApB,EAAuB;AAGrD,SAAOG,IAAI,CAACJ,KAAD,CAAJ,CAAYC,CAAZ,EAAeC,KAAtB;AACD,CAJ8B,CAA/B;;AAKAG,MAAM,CAACC,OAAP,GAAiBH,IAAjB","sourcesContent":["var _curry2 = /*#__PURE__*/require('./internal/_curry2');\n\n// `Const` is a functor that effectively ignores the function given to `map`.\n\n\nvar Const = function (x) {\n  return { value: x, 'fantasy-land/map': function () {\n      return this;\n    } };\n};\n\n/**\n * Returns a \"view\" of the given data structure, determined by the given lens.\n * The lens's focus determines which portion of the data structure is visible.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> s -> a\n * @param {Lens} lens\n * @param {*} x\n * @return {*}\n * @see R.prop, R.lensIndex, R.lensProp\n * @example\n *\n *      const xLens = R.lensProp('x');\n *\n *      R.view(xLens, {x: 1, y: 2});  //=> 1\n *      R.view(xLens, {x: 4, y: 2});  //=> 4\n */\nvar view = /*#__PURE__*/_curry2(function view(lens, x) {\n  // Using `Const` effectively ignores the setter function of the `lens`,\n  // leaving the value returned by the getter function unmodified.\n  return lens(Const)(x).value;\n});\nmodule.exports = view;"]}
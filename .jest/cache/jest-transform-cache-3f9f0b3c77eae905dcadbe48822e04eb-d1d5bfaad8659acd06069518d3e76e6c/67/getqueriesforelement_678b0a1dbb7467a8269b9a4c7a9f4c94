af9a51153bcdbdf57e233d569c0a7a38
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getQueriesForElement = getQueriesForElement;

var defaultQueries = _interopRequireWildcard(require("./queries"));

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function getQueriesForElement(element) {
  var queries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultQueries;
  var initialValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  return Object.keys(queries).reduce(function (helpers, key) {
    var fn = queries[key];
    helpers[key] = fn.bind(null, element);
    return helpers;
  }, initialValue);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdldC1xdWVyaWVzLWZvci1lbGVtZW50LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZ2V0UXVlcmllc0ZvckVsZW1lbnQiLCJkZWZhdWx0UXVlcmllcyIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiZWxlbWVudCIsInF1ZXJpZXMiLCJpbml0aWFsVmFsdWUiLCJrZXlzIiwicmVkdWNlIiwiaGVscGVycyIsImZuIiwiYmluZCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLEVBQUFBLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLG9CQUFSLEdBQStCQSxvQkFBL0I7O0FBRUEsSUFBSUMsY0FBYyxHQUFHQyx1QkFBdUIsQ0FBQ0MsT0FBTyxhQUFSLENBQTVDOztBQUVBLFNBQVNDLHdCQUFULENBQWtDQyxXQUFsQyxFQUErQztBQUFFLE1BQUksT0FBT0MsT0FBUCxLQUFtQixVQUF2QixFQUFtQyxPQUFPLElBQVA7QUFBYSxNQUFJQyxpQkFBaUIsR0FBRyxJQUFJRCxPQUFKLEVBQXhCO0FBQXVDLE1BQUlFLGdCQUFnQixHQUFHLElBQUlGLE9BQUosRUFBdkI7QUFBc0MsU0FBTyxDQUFDRix3QkFBd0IsR0FBRyxrQ0FBVUMsV0FBVixFQUF1QjtBQUFFLFdBQU9BLFdBQVcsR0FBR0csZ0JBQUgsR0FBc0JELGlCQUF4QztBQUE0RCxHQUFqSCxFQUFtSEYsV0FBbkgsQ0FBUDtBQUF5STs7QUFFdlQsU0FBU0gsdUJBQVQsQ0FBaUNPLEdBQWpDLEVBQXNDSixXQUF0QyxFQUFtRDtBQUFFLE1BQUksQ0FBQ0EsV0FBRCxJQUFnQkksR0FBaEIsSUFBdUJBLEdBQUcsQ0FBQ0MsVUFBL0IsRUFBMkM7QUFBRSxXQUFPRCxHQUFQO0FBQWE7O0FBQUMsTUFBSUEsR0FBRyxLQUFLLElBQVIsSUFBZ0IsT0FBT0EsR0FBUCxLQUFlLFFBQWYsSUFBMkIsT0FBT0EsR0FBUCxLQUFlLFVBQTlELEVBQTBFO0FBQUUsV0FBTztBQUFFRSxNQUFBQSxPQUFPLEVBQUVGO0FBQVgsS0FBUDtBQUEwQjs7QUFBQyxNQUFJRyxLQUFLLEdBQUdSLHdCQUF3QixDQUFDQyxXQUFELENBQXBDOztBQUFtRCxNQUFJTyxLQUFLLElBQUlBLEtBQUssQ0FBQ0MsR0FBTixDQUFVSixHQUFWLENBQWIsRUFBNkI7QUFBRSxXQUFPRyxLQUFLLENBQUNFLEdBQU4sQ0FBVUwsR0FBVixDQUFQO0FBQXdCOztBQUFDLE1BQUlNLE1BQU0sR0FBRyxFQUFiO0FBQWlCLE1BQUlDLHFCQUFxQixHQUFHcEIsTUFBTSxDQUFDQyxjQUFQLElBQXlCRCxNQUFNLENBQUNxQix3QkFBNUQ7O0FBQXNGLE9BQUssSUFBSUMsR0FBVCxJQUFnQlQsR0FBaEIsRUFBcUI7QUFBRSxRQUFJUyxHQUFHLEtBQUssU0FBUixJQUFxQnRCLE1BQU0sQ0FBQ3VCLFNBQVAsQ0FBaUJDLGNBQWpCLENBQWdDQyxJQUFoQyxDQUFxQ1osR0FBckMsRUFBMENTLEdBQTFDLENBQXpCLEVBQXlFO0FBQUUsVUFBSUksSUFBSSxHQUFHTixxQkFBcUIsR0FBR3BCLE1BQU0sQ0FBQ3FCLHdCQUFQLENBQWdDUixHQUFoQyxFQUFxQ1MsR0FBckMsQ0FBSCxHQUErQyxJQUEvRTs7QUFBcUYsVUFBSUksSUFBSSxLQUFLQSxJQUFJLENBQUNSLEdBQUwsSUFBWVEsSUFBSSxDQUFDQyxHQUF0QixDQUFSLEVBQW9DO0FBQUUzQixRQUFBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JrQixNQUF0QixFQUE4QkcsR0FBOUIsRUFBbUNJLElBQW5DO0FBQTJDLE9BQWpGLE1BQXVGO0FBQUVQLFFBQUFBLE1BQU0sQ0FBQ0csR0FBRCxDQUFOLEdBQWNULEdBQUcsQ0FBQ1MsR0FBRCxDQUFqQjtBQUF5QjtBQUFFO0FBQUU7O0FBQUNILEVBQUFBLE1BQU0sQ0FBQ0osT0FBUCxHQUFpQkYsR0FBakI7O0FBQXNCLE1BQUlHLEtBQUosRUFBVztBQUFFQSxJQUFBQSxLQUFLLENBQUNXLEdBQU4sQ0FBVWQsR0FBVixFQUFlTSxNQUFmO0FBQXlCOztBQUFDLFNBQU9BLE1BQVA7QUFBZ0I7O0FBWXB5QixTQUFTZixvQkFBVCxDQUE4QndCLE9BQTlCLEVBQW9GO0FBQUEsTUFBN0NDLE9BQTZDLHVFQUFuQ3hCLGNBQW1DO0FBQUEsTUFBbkJ5QixZQUFtQix1RUFBSixFQUFJO0FBQ2xGLFNBQU85QixNQUFNLENBQUMrQixJQUFQLENBQVlGLE9BQVosRUFBcUJHLE1BQXJCLENBQTRCLFVBQUNDLE9BQUQsRUFBVVgsR0FBVixFQUFrQjtBQUNuRCxRQUFNWSxFQUFFLEdBQUdMLE9BQU8sQ0FBQ1AsR0FBRCxDQUFsQjtBQUNBVyxJQUFBQSxPQUFPLENBQUNYLEdBQUQsQ0FBUCxHQUFlWSxFQUFFLENBQUNDLElBQUgsQ0FBUSxJQUFSLEVBQWNQLE9BQWQsQ0FBZjtBQUNBLFdBQU9LLE9BQVA7QUFDRCxHQUpNLEVBSUpILFlBSkksQ0FBUDtBQUtEIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmdldFF1ZXJpZXNGb3JFbGVtZW50ID0gZ2V0UXVlcmllc0ZvckVsZW1lbnQ7XG5cbnZhciBkZWZhdWx0UXVlcmllcyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL3F1ZXJpZXNcIikpO1xuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGVCYWJlbEludGVyb3AgPSBuZXcgV2Vha01hcCgpOyB2YXIgY2FjaGVOb2RlSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHJldHVybiAoX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gKG5vZGVJbnRlcm9wKSB7IHJldHVybiBub2RlSW50ZXJvcCA/IGNhY2hlTm9kZUludGVyb3AgOiBjYWNoZUJhYmVsSW50ZXJvcDsgfSkobm9kZUludGVyb3ApOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaiwgbm9kZUludGVyb3ApIHsgaWYgKCFub2RlSW50ZXJvcCAmJiBvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IGRlZmF1bHQ6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKGtleSAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG4vKipcbiAqIEB0eXBlZGVmIHt7W2tleTogc3RyaW5nXTogRnVuY3Rpb259fSBGdW5jTWFwXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IGNvbnRhaW5lclxuICogQHBhcmFtIHtGdW5jTWFwfSBxdWVyaWVzIG9iamVjdCBvZiBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbml0aWFsVmFsdWUgZm9yIHJlZHVjZXJcbiAqIEByZXR1cm5zIHtGdW5jTWFwfSByZXR1cm5zIG9iamVjdCBvZiBmdW5jdGlvbnMgYm91bmQgdG8gY29udGFpbmVyXG4gKi9cbmZ1bmN0aW9uIGdldFF1ZXJpZXNGb3JFbGVtZW50KGVsZW1lbnQsIHF1ZXJpZXMgPSBkZWZhdWx0UXVlcmllcywgaW5pdGlhbFZhbHVlID0ge30pIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHF1ZXJpZXMpLnJlZHVjZSgoaGVscGVycywga2V5KSA9PiB7XG4gICAgY29uc3QgZm4gPSBxdWVyaWVzW2tleV07XG4gICAgaGVscGVyc1trZXldID0gZm4uYmluZChudWxsLCBlbGVtZW50KTtcbiAgICByZXR1cm4gaGVscGVycztcbiAgfSwgaW5pdGlhbFZhbHVlKTtcbn0iXX0=
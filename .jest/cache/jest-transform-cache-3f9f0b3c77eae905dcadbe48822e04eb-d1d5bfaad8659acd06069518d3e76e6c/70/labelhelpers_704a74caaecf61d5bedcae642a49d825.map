{"version":3,"sources":["label-helpers.js"],"names":["Object","defineProperty","exports","value","getLabels","getRealLabels","getLabelContent","_helpers","require","labelledNodeNames","getTextContent","node","includes","nodeName","toLowerCase","nodeType","TEXT_NODE","textContent","Array","from","childNodes","map","childNode","join","element","tagName","labels","undefined","_labels","isLabelable","ownerDocument","querySelectorAll","filter","label","control","test","getAttribute","container","selector","ariaLabelledBy","labelsId","split","length","labelId","labellingElement","querySelector","content","formControl","textToMatch","formControlSelector","labelledFormControl","formControlElement","matches"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLabels = getLabels;\nexports.getRealLabels = getRealLabels;\nexports.getLabelContent = getLabelContent;\n\nvar _helpers = require(\"./helpers\");\n\nconst labelledNodeNames = ['button', 'meter', 'output', 'progress', 'select', 'textarea', 'input'];\n\nfunction getTextContent(node) {\n  if (labelledNodeNames.includes(node.nodeName.toLowerCase())) {\n    return '';\n  }\n\n  if (node.nodeType === _helpers.TEXT_NODE) return node.textContent;\n  return Array.from(node.childNodes).map(childNode => getTextContent(childNode)).join('');\n}\n\nfunction getLabelContent(element) {\n  let textContent;\n\n  if (element.tagName.toLowerCase() === 'label') {\n    textContent = getTextContent(element);\n  } else {\n    textContent = element.value || element.textContent;\n  }\n\n  return textContent;\n} // Based on https://github.com/eps1lon/dom-accessibility-api/pull/352\n\n\nfunction getRealLabels(element) {\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- types are not aware of older browsers that don't implement `labels`\n  if (element.labels !== undefined) {\n    var _labels;\n\n    return (_labels = element.labels) != null ? _labels : [];\n  }\n\n  if (!isLabelable(element)) return [];\n  const labels = element.ownerDocument.querySelectorAll('label');\n  return Array.from(labels).filter(label => label.control === element);\n}\n\nfunction isLabelable(element) {\n  return /BUTTON|METER|OUTPUT|PROGRESS|SELECT|TEXTAREA/.test(element.tagName) || element.tagName === 'INPUT' && element.getAttribute('type') !== 'hidden';\n}\n\nfunction getLabels(container, element, {\n  selector = '*'\n} = {}) {\n  const ariaLabelledBy = element.getAttribute('aria-labelledby');\n  const labelsId = ariaLabelledBy ? ariaLabelledBy.split(' ') : [];\n  return labelsId.length ? labelsId.map(labelId => {\n    const labellingElement = container.querySelector(`[id=\"${labelId}\"]`);\n    return labellingElement ? {\n      content: getLabelContent(labellingElement),\n      formControl: null\n    } : {\n      content: '',\n      formControl: null\n    };\n  }) : Array.from(getRealLabels(element)).map(label => {\n    const textToMatch = getLabelContent(label);\n    const formControlSelector = 'button, input, meter, output, progress, select, textarea';\n    const labelledFormControl = Array.from(label.querySelectorAll(formControlSelector)).filter(formControlElement => formControlElement.matches(selector))[0];\n    return {\n      content: textToMatch,\n      formControl: labelledFormControl\n    };\n  });\n}"]}
{"version":3,"sources":["Screens.tsx"],"names":["Screens","require","React","render","rest","display","active","AnimatedWebScreen","Animated","shouldUseActivityState","MaybeScreenContainer","enabled","Platform","MaybeScreen"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, Platform, ViewProps } from 'react-native';\n\nlet Screens: typeof import('react-native-screens') | undefined;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {\n  // Ignore\n}\n\n// The web implementation in react-native-screens seems buggy.\n// The view doesn't become visible after coming back in some cases.\n// So we use our custom implementation.\nclass WebScreen extends React.Component<\n  ViewProps & {\n    active: number;\n    children: React.ReactNode;\n  }\n> {\n  render() {\n    const { active, style, ...rest } = this.props;\n\n    return (\n      <View\n        // @ts-expect-error: hidden exists on web, but not in React Native\n        hidden={!active}\n        style={[style, { display: active ? 'flex' : 'none' }]}\n        {...rest}\n      />\n    );\n  }\n}\n\nconst AnimatedWebScreen = Animated.createAnimatedComponent(WebScreen);\n\n// @ts-ignore\nexport const shouldUseActivityState = Screens?.shouldUseActivityState;\n\nexport const MaybeScreenContainer = ({\n  enabled,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  children: React.ReactNode;\n}) => {\n  if (enabled && Platform.OS !== 'web' && Screens?.screensEnabled()) {\n    return (\n      // @ts-ignore\n      <Screens.ScreenContainer enabled={enabled} {...rest} />\n    );\n  }\n\n  return <View {...rest} />;\n};\n\nexport const MaybeScreen = ({\n  enabled,\n  active,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  active: 0 | 1 | 2 | Animated.AnimatedInterpolation;\n  children: React.ReactNode;\n}) => {\n  if (enabled && Platform.OS === 'web') {\n    return <AnimatedWebScreen active={active} {...rest} />;\n  }\n\n  if (enabled && Screens?.screensEnabled()) {\n    if (shouldUseActivityState) {\n      return (\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        <Screens.Screen enabled={enabled} activityState={active} {...rest} />\n      );\n    } else {\n      return (\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        <Screens.Screen enabled={enabled} active={active} {...rest} />\n      );\n    }\n  }\n\n  return <View {...rest} />;\n};\n"]}
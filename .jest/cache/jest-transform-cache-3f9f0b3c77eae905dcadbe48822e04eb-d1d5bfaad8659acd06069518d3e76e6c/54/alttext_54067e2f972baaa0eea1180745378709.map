{"version":3,"sources":["alt-text.js"],"names":["Object","defineProperty","exports","value","findByAltText","findAllByAltText","getAllByAltText","getByAltText","queryAllByAltText","queryByAltText","_queryHelpers","require","_helpers","_allUtils","container","alt","exact","collapseWhitespace","trim","normalizer","checkContainerType","matcher","matches","fuzzyMatches","matchNormalizer","makeNormalizer","Array","from","querySelectorAll","filter","node","getAttribute","getMultipleError","c","getMissingError","queryAllByAltTextWithSuggestions","wrapAllByQueryWithSuggestion","name","buildQueries"],"mappings":"AAAA;;;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,aAAR,GAAwBF,OAAO,CAACG,gBAAR,GAA2BH,OAAO,CAACI,eAAR,GAA0BJ,OAAO,CAACK,YAAR,GAAuBL,OAAO,CAACM,iBAAR,GAA4BN,OAAO,CAACO,cAAR,GAAyB,KAAK,CAA9J;;AAEA,IAAIC,aAAa,GAAGC,OAAO,oBAA3B;;AAEA,IAAIC,QAAQ,GAAGD,OAAO,cAAtB;;AAEA,IAAIE,SAAS,GAAGF,OAAO,eAAvB;;AAEA,IAAMH,iBAAiB,GAAG,SAApBA,iBAAoB,CAACM,SAAD,EAAYC,GAAZ,EAKf;AAAA,iFAAP,EAAO;AAAA,wBAJTC,KAIS;AAAA,MAJTA,KAIS,2BAJD,IAIC;AAAA,MAHTC,kBAGS,QAHTA,kBAGS;AAAA,MAFTC,IAES,QAFTA,IAES;AAAA,MADTC,UACS,QADTA,UACS;;AACT,GAAC,GAAGP,QAAQ,CAACQ,kBAAb,EAAiCN,SAAjC;AACA,MAAMO,OAAO,GAAGL,KAAK,GAAGH,SAAS,CAACS,OAAb,GAAuBT,SAAS,CAACU,YAAtD;AACA,MAAMC,eAAe,GAAG,CAAC,GAAGX,SAAS,CAACY,cAAd,EAA8B;AACpDR,IAAAA,kBAAkB,EAAlBA,kBADoD;AAEpDC,IAAAA,IAAI,EAAJA,IAFoD;AAGpDC,IAAAA,UAAU,EAAVA;AAHoD,GAA9B,CAAxB;AAKA,SAAOO,KAAK,CAACC,IAAN,CAAWb,SAAS,CAACc,gBAAV,CAA2B,gBAA3B,CAAX,EAAyDC,MAAzD,CAAgE,UAAAC,IAAI;AAAA,WAAIT,OAAO,CAACS,IAAI,CAACC,YAAL,CAAkB,KAAlB,CAAD,EAA2BD,IAA3B,EAAiCf,GAAjC,EAAsCS,eAAtC,CAAX;AAAA,GAApE,CAAP;AACD,CAdD;;AAgBA,IAAMQ,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,CAAD,EAAIlB,GAAJ;AAAA,yDAA0DA,GAA1D;AAAA,CAAzB;;AAEA,IAAMmB,eAAe,GAAG,SAAlBA,eAAkB,CAACD,CAAD,EAAIlB,GAAJ;AAAA,2DAA4DA,GAA5D;AAAA,CAAxB;;AAEA,IAAMoB,gCAAgC,GAAG,CAAC,GAAGzB,aAAa,CAAC0B,4BAAlB,EAAgD5B,iBAAhD,EAAmEA,iBAAiB,CAAC6B,IAArF,EAA2F,UAA3F,CAAzC;AACAnC,OAAO,CAACM,iBAAR,GAA4B2B,gCAA5B;;AACA,YAAyF,CAAC,GAAGtB,SAAS,CAACyB,YAAd,EAA4B9B,iBAA5B,EAA+CwB,gBAA/C,EAAiEE,eAAjE,CAAzF;AAAA;AAAA,IAAOzB,cAAP;AAAA,IAAuBH,eAAvB;AAAA,IAAwCC,YAAxC;AAAA,IAAsDF,gBAAtD;AAAA,IAAwED,aAAxE;;AACAF,OAAO,CAACE,aAAR,GAAwBA,aAAxB;AACAF,OAAO,CAACG,gBAAR,GAA2BA,gBAA3B;AACAH,OAAO,CAACK,YAAR,GAAuBA,YAAvB;AACAL,OAAO,CAACI,eAAR,GAA0BA,eAA1B;AACAJ,OAAO,CAACO,cAAR,GAAyBA,cAAzB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findByAltText = exports.findAllByAltText = exports.getAllByAltText = exports.getByAltText = exports.queryAllByAltText = exports.queryByAltText = void 0;\n\nvar _queryHelpers = require(\"../query-helpers\");\n\nvar _helpers = require(\"../helpers\");\n\nvar _allUtils = require(\"./all-utils\");\n\nconst queryAllByAltText = (container, alt, {\n  exact = true,\n  collapseWhitespace,\n  trim,\n  normalizer\n} = {}) => {\n  (0, _helpers.checkContainerType)(container);\n  const matcher = exact ? _allUtils.matches : _allUtils.fuzzyMatches;\n  const matchNormalizer = (0, _allUtils.makeNormalizer)({\n    collapseWhitespace,\n    trim,\n    normalizer\n  });\n  return Array.from(container.querySelectorAll('img,input,area')).filter(node => matcher(node.getAttribute('alt'), node, alt, matchNormalizer));\n};\n\nconst getMultipleError = (c, alt) => `Found multiple elements with the alt text: ${alt}`;\n\nconst getMissingError = (c, alt) => `Unable to find an element with the alt text: ${alt}`;\n\nconst queryAllByAltTextWithSuggestions = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByAltText, queryAllByAltText.name, 'queryAll');\nexports.queryAllByAltText = queryAllByAltTextWithSuggestions;\nconst [queryByAltText, getAllByAltText, getByAltText, findAllByAltText, findByAltText] = (0, _allUtils.buildQueries)(queryAllByAltText, getMultipleError, getMissingError);\nexports.findByAltText = findByAltText;\nexports.findAllByAltText = findAllByAltText;\nexports.getByAltText = getByAltText;\nexports.getAllByAltText = getAllByAltText;\nexports.queryByAltText = queryByAltText;"]}
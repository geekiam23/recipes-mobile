8a076697426030db045444a6c8417bf0
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findByText = exports.findAllByText = exports.getAllByText = exports.getByText = exports.queryAllByText = exports.queryByText = void 0;

var _queryHelpers = require("../query-helpers");

var _helpers = require("../helpers");

var _shared = require("../shared");

var _allUtils = require("./all-utils");

var queryAllByText = function queryAllByText(container, text) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref$selector = _ref.selector,
      selector = _ref$selector === void 0 ? '*' : _ref$selector,
      _ref$exact = _ref.exact,
      exact = _ref$exact === void 0 ? true : _ref$exact,
      collapseWhitespace = _ref.collapseWhitespace,
      trim = _ref.trim,
      _ref$ignore = _ref.ignore,
      ignore = _ref$ignore === void 0 ? _shared.DEFAULT_IGNORE_TAGS : _ref$ignore,
      normalizer = _ref.normalizer;

  (0, _helpers.checkContainerType)(container);
  var matcher = exact ? _allUtils.matches : _allUtils.fuzzyMatches;
  var matchNormalizer = (0, _allUtils.makeNormalizer)({
    collapseWhitespace: collapseWhitespace,
    trim: trim,
    normalizer: normalizer
  });
  var baseArray = [];

  if (typeof container.matches === 'function' && container.matches(selector)) {
    baseArray = [container];
  }

  return [].concat((0, _toConsumableArray2.default)(baseArray), (0, _toConsumableArray2.default)(Array.from(container.querySelectorAll(selector)))).filter(function (node) {
    return !ignore || !node.matches(ignore);
  }).filter(function (node) {
    return matcher((0, _allUtils.getNodeText)(node), node, text, matchNormalizer);
  });
};

var getMultipleError = function getMultipleError(c, text) {
  return "Found multiple elements with the text: " + text;
};

var getMissingError = function getMissingError(c, text) {
  return "Unable to find an element with the text: " + text + ". This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.";
};

var queryAllByTextWithSuggestions = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByText, queryAllByText.name, 'queryAll');
exports.queryAllByText = queryAllByTextWithSuggestions;

var _ref2 = (0, _allUtils.buildQueries)(queryAllByText, getMultipleError, getMissingError),
    _ref3 = (0, _slicedToArray2.default)(_ref2, 5),
    queryByText = _ref3[0],
    getAllByText = _ref3[1],
    getByText = _ref3[2],
    findAllByText = _ref3[3],
    findByText = _ref3[4];

exports.findByText = findByText;
exports.findAllByText = findAllByText;
exports.getByText = getByText;
exports.getAllByText = getAllByText;
exports.queryByText = queryByText;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRleHQuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJmaW5kQnlUZXh0IiwiZmluZEFsbEJ5VGV4dCIsImdldEFsbEJ5VGV4dCIsImdldEJ5VGV4dCIsInF1ZXJ5QWxsQnlUZXh0IiwicXVlcnlCeVRleHQiLCJfcXVlcnlIZWxwZXJzIiwicmVxdWlyZSIsIl9oZWxwZXJzIiwiX3NoYXJlZCIsIl9hbGxVdGlscyIsImNvbnRhaW5lciIsInRleHQiLCJzZWxlY3RvciIsImV4YWN0IiwiY29sbGFwc2VXaGl0ZXNwYWNlIiwidHJpbSIsImlnbm9yZSIsIkRFRkFVTFRfSUdOT1JFX1RBR1MiLCJub3JtYWxpemVyIiwiY2hlY2tDb250YWluZXJUeXBlIiwibWF0Y2hlciIsIm1hdGNoZXMiLCJmdXp6eU1hdGNoZXMiLCJtYXRjaE5vcm1hbGl6ZXIiLCJtYWtlTm9ybWFsaXplciIsImJhc2VBcnJheSIsIkFycmF5IiwiZnJvbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmaWx0ZXIiLCJub2RlIiwiZ2V0Tm9kZVRleHQiLCJnZXRNdWx0aXBsZUVycm9yIiwiYyIsImdldE1pc3NpbmdFcnJvciIsInF1ZXJ5QWxsQnlUZXh0V2l0aFN1Z2dlc3Rpb25zIiwid3JhcEFsbEJ5UXVlcnlXaXRoU3VnZ2VzdGlvbiIsIm5hbWUiLCJidWlsZFF1ZXJpZXMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQUVBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDQyxFQUFBQSxLQUFLLEVBQUU7QUFEb0MsQ0FBN0M7QUFHQUQsT0FBTyxDQUFDRSxVQUFSLEdBQXFCRixPQUFPLENBQUNHLGFBQVIsR0FBd0JILE9BQU8sQ0FBQ0ksWUFBUixHQUF1QkosT0FBTyxDQUFDSyxTQUFSLEdBQW9CTCxPQUFPLENBQUNNLGNBQVIsR0FBeUJOLE9BQU8sQ0FBQ08sV0FBUixHQUFzQixLQUFLLENB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QUFxQkEsVUFBckI7QUFDQUYsT0FBTyxDQUFDRyxhQUFSLEdBQXdCQSxhQUF4QjtBQUNBSCxPQUFPLENBQUNLLFNBQVIsR0FBb0JBLFNBQXBCO0FBQ0FMLE9BQU8sQ0FBQ0ksWUFBUixHQUF1QkEsWUFBdkI7QUFDQUosT0FBTyxDQUFDTyxXQUFSLEdBQXNCQSxXQUF0QiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5maW5kQnlUZXh0ID0gZXhwb3J0cy5maW5kQWxsQnlUZXh0ID0gZXhwb3J0cy5nZXRBbGxCeVRleHQgPSBleHBvcnRzLmdldEJ5VGV4dCA9IGV4cG9ydHMucXVlcnlBbGxCeVRleHQgPSBleHBvcnRzLnF1ZXJ5QnlUZXh0ID0gdm9pZCAwO1xuXG52YXIgX3F1ZXJ5SGVscGVycyA9IHJlcXVpcmUoXCIuLi9xdWVyeS1oZWxwZXJzXCIpO1xuXG52YXIgX2hlbHBlcnMgPSByZXF1aXJlKFwiLi4vaGVscGVyc1wiKTtcblxudmFyIF9zaGFyZWQgPSByZXF1aXJlKFwiLi4vc2hhcmVkXCIpO1xuXG52YXIgX2FsbFV0aWxzID0gcmVxdWlyZShcIi4vYWxsLXV0aWxzXCIpO1xuXG5jb25zdCBxdWVyeUFsbEJ5VGV4dCA9IChjb250YWluZXIsIHRleHQsIHtcbiAgc2VsZWN0b3IgPSAnKicsXG4gIGV4YWN0ID0gdHJ1ZSxcbiAgY29sbGFwc2VXaGl0ZXNwYWNlLFxuICB0cmltLFxuICBpZ25vcmUgPSBfc2hhcmVkLkRFRkFVTFRfSUdOT1JFX1RBR1MsXG4gIG5vcm1hbGl6ZXJcbn0gPSB7fSkgPT4ge1xuICAoMCwgX2hlbHBlcnMuY2hlY2tDb250YWluZXJUeXBlKShjb250YWluZXIpO1xuICBjb25zdCBtYXRjaGVyID0gZXhhY3QgPyBfYWxsVXRpbHMubWF0Y2hlcyA6IF9hbGxVdGlscy5mdXp6eU1hdGNoZXM7XG4gIGNvbnN0IG1hdGNoTm9ybWFsaXplciA9ICgwLCBfYWxsVXRpbHMubWFrZU5vcm1hbGl6ZXIpKHtcbiAgICBjb2xsYXBzZVdoaXRlc3BhY2UsXG4gICAgdHJpbSxcbiAgICBub3JtYWxpemVyXG4gIH0pO1xuICBsZXQgYmFzZUFycmF5ID0gW107XG5cbiAgaWYgKHR5cGVvZiBjb250YWluZXIubWF0Y2hlcyA9PT0gJ2Z1bmN0aW9uJyAmJiBjb250YWluZXIubWF0Y2hlcyhzZWxlY3RvcikpIHtcbiAgICBiYXNlQXJyYXkgPSBbY29udGFpbmVyXTtcbiAgfVxuXG4gIHJldHVybiBbLi4uYmFzZUFycmF5LCAuLi5BcnJheS5mcm9tKGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSldIC8vIFRPRE86IGBtYXRjaGVzYCBhY2NvcmRpbmcgbGliLmRvbS5kLnRzIGNhbiBnZXQgb25seSBgc3RyaW5nYCBidXQgYWNjb3JkaW5nIG91ciBjb2RlIGl0IGNhbiBoYW5kbGUgYWxzbyBib29sZWFuIDopXG4gIC5maWx0ZXIobm9kZSA9PiAhaWdub3JlIHx8ICFub2RlLm1hdGNoZXMoaWdub3JlKSkuZmlsdGVyKG5vZGUgPT4gbWF0Y2hlcigoMCwgX2FsbFV0aWxzLmdldE5vZGVUZXh0KShub2RlKSwgbm9kZSwgdGV4dCwgbWF0Y2hOb3JtYWxpemVyKSk7XG59O1xuXG5jb25zdCBnZXRNdWx0aXBsZUVycm9yID0gKGMsIHRleHQpID0+IGBGb3VuZCBtdWx0aXBsZSBlbGVtZW50cyB3aXRoIHRoZSB0ZXh0OiAke3RleHR9YDtcblxuY29uc3QgZ2V0TWlzc2luZ0Vycm9yID0gKGMsIHRleHQpID0+IGBVbmFibGUgdG8gZmluZCBhbiBlbGVtZW50IHdpdGggdGhlIHRleHQ6ICR7dGV4dH0uIFRoaXMgY291bGQgYmUgYmVjYXVzZSB0aGUgdGV4dCBpcyBicm9rZW4gdXAgYnkgbXVsdGlwbGUgZWxlbWVudHMuIEluIHRoaXMgY2FzZSwgeW91IGNhbiBwcm92aWRlIGEgZnVuY3Rpb24gZm9yIHlvdXIgdGV4dCBtYXRjaGVyIHRvIG1ha2UgeW91ciBtYXRjaGVyIG1vcmUgZmxleGlibGUuYDtcblxuY29uc3QgcXVlcnlBbGxCeVRleHRXaXRoU3VnZ2VzdGlvbnMgPSAoMCwgX3F1ZXJ5SGVscGVycy53cmFwQWxsQnlRdWVyeVdpdGhTdWdnZXN0aW9uKShxdWVyeUFsbEJ5VGV4dCwgcXVlcnlBbGxCeVRleHQubmFtZSwgJ3F1ZXJ5QWxsJyk7XG5leHBvcnRzLnF1ZXJ5QWxsQnlUZXh0ID0gcXVlcnlBbGxCeVRleHRXaXRoU3VnZ2VzdGlvbnM7XG5jb25zdCBbcXVlcnlCeVRleHQsIGdldEFsbEJ5VGV4dCwgZ2V0QnlUZXh0LCBmaW5kQWxsQnlUZXh0LCBmaW5kQnlUZXh0XSA9ICgwLCBfYWxsVXRpbHMuYnVpbGRRdWVyaWVzKShxdWVyeUFsbEJ5VGV4dCwgZ2V0TXVsdGlwbGVFcnJvciwgZ2V0TWlzc2luZ0Vycm9yKTtcbmV4cG9ydHMuZmluZEJ5VGV4dCA9IGZpbmRCeVRleHQ7XG5leHBvcnRzLmZpbmRBbGxCeVRleHQgPSBmaW5kQWxsQnlUZXh0O1xuZXhwb3J0cy5nZXRCeVRleHQgPSBnZXRCeVRleHQ7XG5leHBvcnRzLmdldEFsbEJ5VGV4dCA9IGdldEFsbEJ5VGV4dDtcbmV4cG9ydHMucXVlcnlCeVRleHQgPSBxdWVyeUJ5VGV4dDsiXX0=
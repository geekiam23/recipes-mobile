107aa4697cb223cc5d9d2d19171a13b1
var _isArrayLike = require("./_isArrayLike");

var _xwrap = require("./_xwrap");

var bind = require("../bind");

function _arrayReduce(xf, acc, list) {
  var idx = 0;
  var len = list.length;

  while (idx < len) {
    acc = xf['@@transducer/step'](acc, list[idx]);

    if (acc && acc['@@transducer/reduced']) {
      acc = acc['@@transducer/value'];
      break;
    }

    idx += 1;
  }

  return xf['@@transducer/result'](acc);
}

function _iterableReduce(xf, acc, iter) {
  var step = iter.next();

  while (!step.done) {
    acc = xf['@@transducer/step'](acc, step.value);

    if (acc && acc['@@transducer/reduced']) {
      acc = acc['@@transducer/value'];
      break;
    }

    step = iter.next();
  }

  return xf['@@transducer/result'](acc);
}

function _methodReduce(xf, acc, obj, methodName) {
  return xf['@@transducer/result'](obj[methodName](bind(xf['@@transducer/step'], xf), acc));
}

var symIterator = typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator';

function _reduce(fn, acc, list) {
  if (typeof fn === 'function') {
    fn = _xwrap(fn);
  }

  if (_isArrayLike(list)) {
    return _arrayReduce(fn, acc, list);
  }

  if (typeof list['fantasy-land/reduce'] === 'function') {
    return _methodReduce(fn, acc, list, 'fantasy-land/reduce');
  }

  if (list[symIterator] != null) {
    return _iterableReduce(fn, acc, list[symIterator]());
  }

  if (typeof list.next === 'function') {
    return _iterableReduce(fn, acc, list);
  }

  if (typeof list.reduce === 'function') {
    return _methodReduce(fn, acc, list, 'reduce');
  }

  throw new TypeError('reduce: list must be array or iterable');
}

module.exports = _reduce;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9yZWR1Y2UuanMiXSwibmFtZXMiOlsiX2lzQXJyYXlMaWtlIiwicmVxdWlyZSIsIl94d3JhcCIsImJpbmQiLCJfYXJyYXlSZWR1Y2UiLCJ4ZiIsImFjYyIsImxpc3QiLCJpZHgiLCJsZW4iLCJsZW5ndGgiLCJfaXRlcmFibGVSZWR1Y2UiLCJpdGVyIiwic3RlcCIsIm5leHQiLCJkb25lIiwidmFsdWUiLCJfbWV0aG9kUmVkdWNlIiwib2JqIiwibWV0aG9kTmFtZSIsInN5bUl0ZXJhdG9yIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJfcmVkdWNlIiwiZm4iLCJyZWR1Y2UiLCJUeXBlRXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxZQUFZLEdBQWdCQyxPQUFPLGtCQUF2Qzs7QUFFQSxJQUFJQyxNQUFNLEdBQWdCRCxPQUFPLFlBQWpDOztBQUVBLElBQUlFLElBQUksR0FBZ0JGLE9BQU8sV0FBL0I7O0FBRUEsU0FBU0csWUFBVCxDQUFzQkMsRUFBdEIsRUFBMEJDLEdBQTFCLEVBQStCQyxJQUEvQixFQUFxQztBQUNuQyxNQUFJQyxHQUFHLEdBQUcsQ0FBVjtBQUNBLE1BQUlDLEdBQUcsR0FBR0YsSUFBSSxDQUFDRyxNQUFmOztBQUNBLFNBQU9GLEdBQUcsR0FBR0MsR0FBYixFQUFrQjtBQUNoQkgsSUFBQUEsR0FBRyxHQUFHRCxFQUFFLENBQUMsbUJBQUQsQ0FBRixDQUF3QkMsR0FBeEIsRUFBNkJDLElBQUksQ0FBQ0MsR0FBRCxDQUFqQyxDQUFOOztBQUNBLFFBQUlGLEdBQUcsSUFBSUEsR0FBRyxDQUFDLHNCQUFELENBQWQsRUFBd0M7QUFDdENBLE1BQUFBLEdBQUcsR0FBR0EsR0FBRyxDQUFDLG9CQUFELENBQVQ7QUFDQTtBQUNEOztBQUNERSxJQUFBQSxHQUFHLElBQUksQ0FBUDtBQUNEOztBQUNELFNBQU9ILEVBQUUsQ0FBQyxxQkFBRCxDQUFGLENBQTBCQyxHQUExQixDQUFQO0FBQ0Q7O0FBRUQsU0FBU0ssZUFBVCxDQUF5Qk4sRUFBekIsRUFBNkJDLEdBQTdCLEVBQWtDTSxJQUFsQyxFQUF3QztBQUN0QyxNQUFJQyxJQUFJLEdBQUdELElBQUksQ0FBQ0UsSUFBTCxFQUFYOztBQUNBLFNBQU8sQ0FBQ0QsSUFBSSxDQUFDRSxJQUFiLEVBQW1CO0FBQ2pCVCxJQUFBQSxHQUFHLEdBQUdELEVBQUUsQ0FBQyxtQkFBRCxDQUFGLENBQXdCQyxHQUF4QixFQUE2Qk8sSUFBSSxDQUFDRyxLQUFsQyxDQUFOOztBQUNBLFFBQUlWLEdBQUcsSUFBSUEsR0FBRyxDQUFDLHNCQUFELENBQWQsRUFBd0M7QUFDdENBLE1BQUFBLEdBQUcsR0FBR0EsR0FBRyxDQUFDLG9CQUFELENBQVQ7QUFDQTtBQUNEOztBQUNETyxJQUFBQSxJQUFJLEdBQUdELElBQUksQ0FBQ0UsSUFBTCxFQUFQO0FBQ0Q7O0FBQ0QsU0FBT1QsRUFBRSxDQUFDLHFCQUFELENBQUYsQ0FBMEJDLEdBQTFCLENBQVA7QUFDRDs7QUFFRCxTQUFTVyxhQUFULENBQXVCWixFQUF2QixFQUEyQkMsR0FBM0IsRUFBZ0NZLEdBQWhDLEVBQXFDQyxVQUFyQyxFQUFpRDtBQUMvQyxTQUFPZCxFQUFFLENBQUMscUJBQUQsQ0FBRixDQUEwQmEsR0FBRyxDQUFDQyxVQUFELENBQUgsQ0FBZ0JoQixJQUFJLENBQUNFLEVBQUUsQ0FBQyxtQkFBRCxDQUFILEVBQTBCQSxFQUExQixDQUFwQixFQUFtREMsR0FBbkQsQ0FBMUIsQ0FBUDtBQUNEOztBQUVELElBQUljLFdBQVcsR0FBRyxPQUFPQyxNQUFQLEtBQWtCLFdBQWxCLEdBQWdDQSxNQUFNLENBQUNDLFFBQXZDLEdBQWtELFlBQXBFOztBQUVBLFNBQVNDLE9BQVQsQ0FBaUJDLEVBQWpCLEVBQXFCbEIsR0FBckIsRUFBMEJDLElBQTFCLEVBQWdDO0FBQzlCLE1BQUksT0FBT2lCLEVBQVAsS0FBYyxVQUFsQixFQUE4QjtBQUM1QkEsSUFBQUEsRUFBRSxHQUFHdEIsTUFBTSxDQUFDc0IsRUFBRCxDQUFYO0FBQ0Q7O0FBQ0QsTUFBSXhCLFlBQVksQ0FBQ08sSUFBRCxDQUFoQixFQUF3QjtBQUN0QixXQUFPSCxZQUFZLENBQUNvQixFQUFELEVBQUtsQixHQUFMLEVBQVVDLElBQVYsQ0FBbkI7QUFDRDs7QUFDRCxNQUFJLE9BQU9BLElBQUksQ0FBQyxxQkFBRCxDQUFYLEtBQXVDLFVBQTNDLEVBQXVEO0FBQ3JELFdBQU9VLGFBQWEsQ0FBQ08sRUFBRCxFQUFLbEIsR0FBTCxFQUFVQyxJQUFWLEVBQWdCLHFCQUFoQixDQUFwQjtBQUNEOztBQUNELE1BQUlBLElBQUksQ0FBQ2EsV0FBRCxDQUFKLElBQXFCLElBQXpCLEVBQStCO0FBQzdCLFdBQU9ULGVBQWUsQ0FBQ2EsRUFBRCxFQUFLbEIsR0FBTCxFQUFVQyxJQUFJLENBQUNhLFdBQUQsQ0FBSixFQUFWLENBQXRCO0FBQ0Q7O0FBQ0QsTUFBSSxPQUFPYixJQUFJLENBQUNPLElBQVosS0FBcUIsVUFBekIsRUFBcUM7QUFDbkMsV0FBT0gsZUFBZSxDQUFDYSxFQUFELEVBQUtsQixHQUFMLEVBQVVDLElBQVYsQ0FBdEI7QUFDRDs7QUFDRCxNQUFJLE9BQU9BLElBQUksQ0FBQ2tCLE1BQVosS0FBdUIsVUFBM0IsRUFBdUM7QUFDckMsV0FBT1IsYUFBYSxDQUFDTyxFQUFELEVBQUtsQixHQUFMLEVBQVVDLElBQVYsRUFBZ0IsUUFBaEIsQ0FBcEI7QUFDRDs7QUFFRCxRQUFNLElBQUltQixTQUFKLENBQWMsd0NBQWQsQ0FBTjtBQUNEOztBQUNEQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJMLE9BQWpCIiwic291cmNlc0NvbnRlbnQiOlsidmFyIF9pc0FycmF5TGlrZSA9IC8qI19fUFVSRV9fKi9yZXF1aXJlKCcuL19pc0FycmF5TGlrZScpO1xuXG52YXIgX3h3cmFwID0gLyojX19QVVJFX18qL3JlcXVpcmUoJy4vX3h3cmFwJyk7XG5cbnZhciBiaW5kID0gLyojX19QVVJFX18qL3JlcXVpcmUoJy4uL2JpbmQnKTtcblxuZnVuY3Rpb24gX2FycmF5UmVkdWNlKHhmLCBhY2MsIGxpc3QpIHtcbiAgdmFyIGlkeCA9IDA7XG4gIHZhciBsZW4gPSBsaXN0Lmxlbmd0aDtcbiAgd2hpbGUgKGlkeCA8IGxlbikge1xuICAgIGFjYyA9IHhmWydAQHRyYW5zZHVjZXIvc3RlcCddKGFjYywgbGlzdFtpZHhdKTtcbiAgICBpZiAoYWNjICYmIGFjY1snQEB0cmFuc2R1Y2VyL3JlZHVjZWQnXSkge1xuICAgICAgYWNjID0gYWNjWydAQHRyYW5zZHVjZXIvdmFsdWUnXTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpZHggKz0gMTtcbiAgfVxuICByZXR1cm4geGZbJ0BAdHJhbnNkdWNlci9yZXN1bHQnXShhY2MpO1xufVxuXG5mdW5jdGlvbiBfaXRlcmFibGVSZWR1Y2UoeGYsIGFjYywgaXRlcikge1xuICB2YXIgc3RlcCA9IGl0ZXIubmV4dCgpO1xuICB3aGlsZSAoIXN0ZXAuZG9uZSkge1xuICAgIGFjYyA9IHhmWydAQHRyYW5zZHVjZXIvc3RlcCddKGFjYywgc3RlcC52YWx1ZSk7XG4gICAgaWYgKGFjYyAmJiBhY2NbJ0BAdHJhbnNkdWNlci9yZWR1Y2VkJ10pIHtcbiAgICAgIGFjYyA9IGFjY1snQEB0cmFuc2R1Y2VyL3ZhbHVlJ107XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgc3RlcCA9IGl0ZXIubmV4dCgpO1xuICB9XG4gIHJldHVybiB4ZlsnQEB0cmFuc2R1Y2VyL3Jlc3VsdCddKGFjYyk7XG59XG5cbmZ1bmN0aW9uIF9tZXRob2RSZWR1Y2UoeGYsIGFjYywgb2JqLCBtZXRob2ROYW1lKSB7XG4gIHJldHVybiB4ZlsnQEB0cmFuc2R1Y2VyL3Jlc3VsdCddKG9ialttZXRob2ROYW1lXShiaW5kKHhmWydAQHRyYW5zZHVjZXIvc3RlcCddLCB4ZiksIGFjYykpO1xufVxuXG52YXIgc3ltSXRlcmF0b3IgPSB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyA/IFN5bWJvbC5pdGVyYXRvciA6ICdAQGl0ZXJhdG9yJztcblxuZnVuY3Rpb24gX3JlZHVjZShmbiwgYWNjLCBsaXN0KSB7XG4gIGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICBmbiA9IF94d3JhcChmbik7XG4gIH1cbiAgaWYgKF9pc0FycmF5TGlrZShsaXN0KSkge1xuICAgIHJldHVybiBfYXJyYXlSZWR1Y2UoZm4sIGFjYywgbGlzdCk7XG4gIH1cbiAgaWYgKHR5cGVvZiBsaXN0WydmYW50YXN5LWxhbmQvcmVkdWNlJ10gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gX21ldGhvZFJlZHVjZShmbiwgYWNjLCBsaXN0LCAnZmFudGFzeS1sYW5kL3JlZHVjZScpO1xuICB9XG4gIGlmIChsaXN0W3N5bUl0ZXJhdG9yXSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIF9pdGVyYWJsZVJlZHVjZShmbiwgYWNjLCBsaXN0W3N5bUl0ZXJhdG9yXSgpKTtcbiAgfVxuICBpZiAodHlwZW9mIGxpc3QubmV4dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBfaXRlcmFibGVSZWR1Y2UoZm4sIGFjYywgbGlzdCk7XG4gIH1cbiAgaWYgKHR5cGVvZiBsaXN0LnJlZHVjZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBfbWV0aG9kUmVkdWNlKGZuLCBhY2MsIGxpc3QsICdyZWR1Y2UnKTtcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3JlZHVjZTogbGlzdCBtdXN0IGJlIGFycmF5IG9yIGl0ZXJhYmxlJyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9yZWR1Y2U7Il19
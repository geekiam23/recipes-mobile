b876c7a6c08c4855f155407a2a90e79b
var bind = require("../internals/function-bind-context");

var IndexedObject = require("../internals/indexed-object");

var toObject = require("../internals/to-object");

var toLength = require("../internals/to-length");

var arraySpeciesCreate = require("../internals/array-species-create");

var push = [].push;

var createMethod = function createMethod(TYPE) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var IS_FILTER_OUT = TYPE == 7;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  return function ($this, callbackfn, that, specificCreate) {
    var O = toObject($this);
    var self = IndexedObject(O);
    var boundFunction = bind(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var create = specificCreate || arraySpeciesCreate;
    var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_OUT ? create($this, 0) : undefined;
    var value, result;

    for (; length > index; index++) {
      if (NO_HOLES || index in self) {
        value = self[index];
        result = boundFunction(value, index, O);

        if (TYPE) {
          if (IS_MAP) target[index] = result;else if (result) switch (TYPE) {
              case 3:
                return true;

              case 5:
                return value;

              case 6:
                return index;

              case 2:
                push.call(target, value);
            } else switch (TYPE) {
              case 4:
                return false;

              case 7:
                push.call(target, value);
            }
        }
      }
    }

    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
  };
};

module.exports = {
  forEach: createMethod(0),
  map: createMethod(1),
  filter: createMethod(2),
  some: createMethod(3),
  every: createMethod(4),
  find: createMethod(5),
  findIndex: createMethod(6),
  filterOut: createMethod(7)
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFycmF5LWl0ZXJhdGlvbi5qcyJdLCJuYW1lcyI6WyJiaW5kIiwicmVxdWlyZSIsIkluZGV4ZWRPYmplY3QiLCJ0b09iamVjdCIsInRvTGVuZ3RoIiwiYXJyYXlTcGVjaWVzQ3JlYXRlIiwicHVzaCIsImNyZWF0ZU1ldGhvZCIsIlRZUEUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiSVNfRklMVEVSX09VVCIsIk5PX0hPTEVTIiwiJHRoaXMiLCJjYWxsYmFja2ZuIiwidGhhdCIsInNwZWNpZmljQ3JlYXRlIiwiTyIsInNlbGYiLCJib3VuZEZ1bmN0aW9uIiwibGVuZ3RoIiwiaW5kZXgiLCJjcmVhdGUiLCJ0YXJnZXQiLCJ1bmRlZmluZWQiLCJ2YWx1ZSIsInJlc3VsdCIsImNhbGwiLCJtb2R1bGUiLCJleHBvcnRzIiwiZm9yRWFjaCIsIm1hcCIsImZpbHRlciIsInNvbWUiLCJldmVyeSIsImZpbmQiLCJmaW5kSW5kZXgiLCJmaWx0ZXJPdXQiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLElBQUksR0FBR0MsT0FBTyxzQ0FBbEI7O0FBQ0EsSUFBSUMsYUFBYSxHQUFHRCxPQUFPLCtCQUEzQjs7QUFDQSxJQUFJRSxRQUFRLEdBQUdGLE9BQU8sMEJBQXRCOztBQUNBLElBQUlHLFFBQVEsR0FBR0gsT0FBTywwQkFBdEI7O0FBQ0EsSUFBSUksa0JBQWtCLEdBQUdKLE9BQU8scUNBQWhDOztBQUVBLElBQUlLLElBQUksR0FBRyxHQUFHQSxJQUFkOztBQUdBLElBQUlDLFlBQVksR0FBRyxTQUFmQSxZQUFlLENBQVVDLElBQVYsRUFBZ0I7QUFDakMsTUFBSUMsTUFBTSxHQUFHRCxJQUFJLElBQUksQ0FBckI7QUFDQSxNQUFJRSxTQUFTLEdBQUdGLElBQUksSUFBSSxDQUF4QjtBQUNBLE1BQUlHLE9BQU8sR0FBR0gsSUFBSSxJQUFJLENBQXRCO0FBQ0EsTUFBSUksUUFBUSxHQUFHSixJQUFJLElBQUksQ0FB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b3VyY2VzQ29udGVudCI6WyJ2YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbnZhciBwdXNoID0gW10ucHVzaDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGZvckVhY2gsIG1hcCwgZmlsdGVyLCBzb21lLCBldmVyeSwgZmluZCwgZmluZEluZGV4LCBmaWx0ZXJPdXQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgSVNfRklMVEVSX09VVCA9IFRZUEUgPT0gNztcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQsIHNwZWNpZmljQ3JlYXRlKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCgkdGhpcyk7XG4gICAgdmFyIHNlbGYgPSBJbmRleGVkT2JqZWN0KE8pO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCB0aGF0LCAzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGNyZWF0ZSA9IHNwZWNpZmljQ3JlYXRlIHx8IGFycmF5U3BlY2llc0NyZWF0ZTtcbiAgICB2YXIgdGFyZ2V0ID0gSVNfTUFQID8gY3JlYXRlKCR0aGlzLCBsZW5ndGgpIDogSVNfRklMVEVSIHx8IElTX0ZJTFRFUl9PVVQgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWx1ZSwgcmVzdWx0O1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsdWUgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlc3VsdCA9IGJvdW5kRnVuY3Rpb24odmFsdWUsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHRhcmdldFtpbmRleF0gPSByZXN1bHQ7IC8vIG1hcFxuICAgICAgICBlbHNlIGlmIChyZXN1bHQpIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsdWU7ICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAgLy8gZmluZEluZGV4XG4gICAgICAgICAgY2FzZSAyOiBwdXNoLmNhbGwodGFyZ2V0LCB2YWx1ZSk7IC8vIGZpbHRlclxuICAgICAgICB9IGVsc2Ugc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSA0OiByZXR1cm4gZmFsc2U7ICAgICAgICAgICAgIC8vIGV2ZXJ5XG4gICAgICAgICAgY2FzZSA3OiBwdXNoLmNhbGwodGFyZ2V0LCB2YWx1ZSk7IC8vIGZpbHRlck91dFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiB0YXJnZXQ7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxuICBmb3JFYWNoOiBjcmVhdGVNZXRob2QoMCksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUubWFwYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubWFwXG4gIG1hcDogY3JlYXRlTWV0aG9kKDEpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbHRlclxuICBmaWx0ZXI6IGNyZWF0ZU1ldGhvZCgyKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5zb21lYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc29tZVxuICBzb21lOiBjcmVhdGVNZXRob2QoMyksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZXZlcnlgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5ldmVyeVxuICBldmVyeTogY3JlYXRlTWV0aG9kKDQpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kXG4gIGZpbmQ6IGNyZWF0ZU1ldGhvZCg1KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXhgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kSW5kZXhcbiAgZmluZEluZGV4OiBjcmVhdGVNZXRob2QoNiksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyT3V0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtYXJyYXktZmlsdGVyaW5nXG4gIGZpbHRlck91dDogY3JlYXRlTWV0aG9kKDcpXG59O1xuIl19
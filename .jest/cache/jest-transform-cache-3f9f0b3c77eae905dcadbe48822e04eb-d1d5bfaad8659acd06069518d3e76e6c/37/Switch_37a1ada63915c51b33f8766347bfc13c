08779e699d9d9e6705e27aaffc22d2e3
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _Platform = _interopRequireDefault(require("../../Utilities/Platform"));

var React = _interopRequireWildcard(require("react"));

var _StyleSheet = _interopRequireDefault(require("../../StyleSheet/StyleSheet"));

var _AndroidSwitchNativeComponent = _interopRequireWildcard(require("./AndroidSwitchNativeComponent"));

var _SwitchNativeComponent = _interopRequireWildcard(require("./SwitchNativeComponent"));

var _excluded = ["disabled", "ios_backgroundColor", "onChange", "onValueChange", "style", "thumbColor", "trackColor", "value"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var Switch = function (_React$Component) {
  (0, _inherits2.default)(Switch, _React$Component);

  var _super = _createSuper(Switch);

  function Switch() {
    var _this;

    (0, _classCallCheck2.default)(this, Switch);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this._handleChange = function (event) {
      if (_this.props.onChange != null) {
        _this.props.onChange(event);
      }

      if (_this.props.onValueChange != null) {
        _this.props.onValueChange(event.nativeEvent.value);
      }

      _this._lastNativeValue = event.nativeEvent.value;

      _this.forceUpdate();
    };

    _this._handleSwitchNativeComponentRef = function (ref) {
      _this._nativeSwitchRef = ref;
    };

    return _this;
  }

  (0, _createClass2.default)(Switch, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          disabled = _this$props.disabled,
          ios_backgroundColor = _this$props.ios_backgroundColor,
          onChange = _this$props.onChange,
          onValueChange = _this$props.onValueChange,
          style = _this$props.style,
          thumbColor = _this$props.thumbColor,
          trackColor = _this$props.trackColor,
          value = _this$props.value,
          props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
      var trackColorForFalse = trackColor == null ? void 0 : trackColor.false;
      var trackColorForTrue = trackColor == null ? void 0 : trackColor.true;

      if (_Platform.default.OS === 'android') {
        var _props$accessibilityR;

        var platformProps = {
          enabled: disabled !== true,
          on: value === true,
          style: style,
          thumbTintColor: thumbColor,
          trackColorForFalse: trackColorForFalse,
          trackColorForTrue: trackColorForTrue,
          trackTintColor: value === true ? trackColorForTrue : trackColorForFalse
        };
        return React.createElement(_AndroidSwitchNativeComponent.default, (0, _extends2.default)({}, props, platformProps, {
          accessibilityRole: (_props$accessibilityR = props.accessibilityRole) != null ? _props$accessibilityR : 'switch',
          onChange: this._handleChange,
          onResponderTerminationRequest: returnsFalse,
          onStartShouldSetResponder: returnsTrue,
          ref: this._handleSwitchNativeComponentRef
        }));
      } else {
        var _props$accessibilityR2;

        var _platformProps = {
          disabled: disabled,
          onTintColor: trackColorForTrue,
          style: _StyleSheet.default.compose({
            height: 31,
            width: 51
          }, _StyleSheet.default.compose(style, ios_backgroundColor == null ? null : {
            backgroundColor: ios_backgroundColor,
            borderRadius: 16
          })),
          thumbTintColor: thumbColor,
          tintColor: trackColorForFalse,
          value: value === true
        };
        return React.createElement(_SwitchNativeComponent.default, (0, _extends2.default)({}, props, _platformProps, {
          accessibilityRole: (_props$accessibilityR2 = props.accessibilityRole) != null ? _props$accessibilityR2 : 'switch',
          onChange: this._handleChange,
          onResponderTerminationRequest: returnsFalse,
          onStartShouldSetResponder: returnsTrue,
          ref: this._handleSwitchNativeComponentRef
        }));
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var nativeProps = {};
      var value = this.props.value === true;

      if (this._lastNativeValue !== value) {
        nativeProps.value = value;
      }

      if (Object.keys(nativeProps).length > 0 && this._nativeSwitchRef && this._nativeSwitchRef.setNativeProps) {
        if (_Platform.default.OS === 'android') {
          _AndroidSwitchNativeComponent.Commands.setNativeValue(this._nativeSwitchRef, nativeProps.value);
        } else {
          _SwitchNativeComponent.Commands.setValue(this._nativeSwitchRef, nativeProps.value);
        }
      }
    }
  }]);
  return Switch;
}(React.Component);

var returnsFalse = function returnsFalse() {
  return false;
};

var returnsTrue = function returnsTrue() {
  return true;
};

module.exports = Switch;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlN3aXRjaC5qcyJdLCJuYW1lcyI6WyJTd2l0Y2giLCJfaGFuZGxlQ2hhbmdlIiwiZXZlbnQiLCJwcm9wcyIsIm9uQ2hhbmdlIiwib25WYWx1ZUNoYW5nZSIsIm5hdGl2ZUV2ZW50IiwidmFsdWUiLCJfbGFzdE5hdGl2ZVZhbHVlIiwiZm9yY2VVcGRhdGUiLCJfaGFuZGxlU3dpdGNoTmF0aXZlQ29tcG9uZW50UmVmIiwicmVmIiwiX25hdGl2ZVN3aXRjaFJlZiIsImRpc2FibGVkIiwiaW9zX2JhY2tncm91bmRDb2xvciIsInN0eWxlIiwidGh1bWJDb2xvciIsInRyYWNrQ29sb3IiLCJ0cmFja0NvbG9yRm9yRmFsc2UiLCJmYWxzZSIsInRyYWNrQ29sb3JGb3JUcnVlIiwidHJ1ZSIsIlBsYXRmb3JtIiwiT1MiLCJwbGF0Zm9ybVByb3BzIiwiZW5hYmxlZCIsIm9uIiwidGh1bWJUaW50Q29sb3IiLCJ0cmFja1RpbnRDb2xvciIsImFjY2Vzc2liaWxpdHlSb2xlIiwicmV0dXJuc0ZhbHNlIiwicmV0dXJuc1RydWUiLCJvblRpbnRDb2xvciIsIlN0eWxlU2hlZXQiLCJjb21wb3NlIiwiaGVpZ2h0Iiwid2lkdGgiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJSYWRpdXMiLCJ0aW50Q29sb3IiLCJuYXRpdmVQcm9wcyIsIk9iamVjdCIsImtleXMiLCJsZW5ndGgiLCJzZXROYXRpdmVQcm9wcyIsIkFuZHJvaWRTd2l0Y2hDb21tYW5kcyIsInNldE5hdGl2ZVZhbHVlIiwiU3dpdGNoQ29tbWFuZHMiLCJzZXRWYWx1ZSIsIlJlYWN0IiwiQ29tcG9uZW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBV0E7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBOztBQUNBOztBQUNBOztBQUVBOztBQUdBOzs7Ozs7Ozs7Ozs7SUErR01BLE07Ozs7Ozs7Ozs7Ozs7Ozs7VUEwR0pDLGEsR0FBZ0IsVUFBQ0MsS0FBRCxFQUE4QjtBQUM1QyxVQUFJLE1BQUtDLEtBQUwsQ0FB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b3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICogQGdlbmVyYXRlLWRvY3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCBQbGF0Zm9ybSBmcm9tICcuLi8uLi9VdGlsaXRpZXMvUGxhdGZvcm0nO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFN0eWxlU2hlZXQgZnJvbSAnLi4vLi4vU3R5bGVTaGVldC9TdHlsZVNoZWV0JztcblxuaW1wb3J0IEFuZHJvaWRTd2l0Y2hOYXRpdmVDb21wb25lbnQsIHtcbiAgQ29tbWFuZHMgYXMgQW5kcm9pZFN3aXRjaENvbW1hbmRzLFxufSBmcm9tICcuL0FuZHJvaWRTd2l0Y2hOYXRpdmVDb21wb25lbnQnO1xuaW1wb3J0IFN3aXRjaE5hdGl2ZUNvbXBvbmVudCwge1xuICBDb21tYW5kcyBhcyBTd2l0Y2hDb21tYW5kcyxcbn0gZnJvbSAnLi9Td2l0Y2hOYXRpdmVDb21wb25lbnQnO1xuXG5pbXBvcnQgdHlwZSB7Q29sb3JWYWx1ZX0gZnJvbSAnLi4vLi4vU3R5bGVTaGVldC9TdHlsZVNoZWV0JztcbmltcG9ydCB0eXBlIHtTeW50aGV0aWNFdmVudH0gZnJvbSAnLi4vLi4vVHlwZXMvQ29yZUV2ZW50VHlwZXMnO1xuaW1wb3J0IHR5cGUge1ZpZXdQcm9wc30gZnJvbSAnLi4vVmlldy9WaWV3UHJvcFR5cGVzJztcblxudHlwZSBTd2l0Y2hDaGFuZ2VFdmVudCA9IFN5bnRoZXRpY0V2ZW50PFxuICAkUmVhZE9ubHk8e3xcbiAgICB2YWx1ZTogYm9vbGVhbixcbiAgfH0+LFxuPjtcblxuZXhwb3J0IHR5cGUgUHJvcHMgPSAkUmVhZE9ubHk8e3xcbiAgLi4uVmlld1Byb3BzLFxuXG4gIC8qKlxuICAgIElmIHRydWUgdGhlIHVzZXIgd29uJ3QgYmUgYWJsZSB0byB0b2dnbGUgdGhlIHN3aXRjaC5cblxuICAgIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlZD86ID9ib29sZWFuLFxuXG4gIC8qKlxuICAgIFRoZSB2YWx1ZSBvZiB0aGUgc3dpdGNoLiBJZiB0cnVlIHRoZSBzd2l0Y2ggd2lsbCBiZSB0dXJuZWQgb24uXG5cbiAgICBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgdmFsdWU/OiA/Ym9vbGVhbixcblxuICAvKipcbiAgICBDb2xvciBvZiB0aGUgZm9yZWdyb3VuZCBzd2l0Y2ggZ3JpcC4gSWYgdGhpcyBpcyBzZXQgb24gaU9TLCB0aGUgc3dpdGNoIGdyaXAgd2lsbCBsb3NlIGl0cyBkcm9wIHNoYWRvdy5cbiAgICovXG4gIHRodW1iQ29sb3I/OiA/Q29sb3JWYWx1ZSxcblxuICAvKipcbiAgICBDdXN0b20gY29sb3JzIGZvciB0aGUgc3dpdGNoIHRyYWNrLlxuXG4gICAgX2lPU186IFdoZW4gdGhlIHN3aXRjaCB2YWx1ZSBpcyBmYWxzZSwgdGhlIHRyYWNrIHNocmlua3MgaW50byB0aGUgYm9yZGVyLiBJZiB5b3Ugd2FudCB0byBjaGFuZ2UgdGhlXG4gICAgY29sb3Igb2YgdGhlIGJhY2tncm91bmQgZXhwb3NlZCBieSB0aGUgc2hydW5rZW4gdHJhY2ssIHVzZVxuICAgICBbYGlvc19iYWNrZ3JvdW5kQ29sb3JgXShodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3N3aXRjaCNpb3NfYmFja2dyb3VuZENvbG9yKS5cbiAgICovXG4gIHRyYWNrQ29sb3I/OiA/JFJlYWRPbmx5PHt8XG4gICAgZmFsc2U/OiA/Q29sb3JWYWx1ZSxcbiAgICB0cnVlPzogP0NvbG9yVmFsdWUsXG4gIHx9PixcblxuICAvKipcbiAgICBPbiBpT1MsIGN1c3RvbSBjb2xvciBmb3IgdGhlIGJhY2tncm91bmQuIFRoaXMgYmFja2dyb3VuZCBjb2xvciBjYW4gYmVcbiAgICBzZWVuIGVpdGhlciB3aGVuIHRoZSBzd2l0Y2ggdmFsdWUgaXMgZmFsc2Ugb3Igd2hlbiB0aGUgc3dpdGNoIGlzXG4gICAgZGlzYWJsZWQgKGFuZCB0aGUgc3dpdGNoIGlzIHRyYW5zbHVjZW50KS5cbiAgICovXG4gIGlvc19iYWNrZ3JvdW5kQ29sb3I/OiA/Q29sb3JWYWx1ZSxcblxuICAvKipcbiAgICBJbnZva2VkIHdoZW4gdGhlIHVzZXIgdHJpZXMgdG8gY2hhbmdlIHRoZSB2YWx1ZSBvZiB0aGUgc3dpdGNoLiBSZWNlaXZlc1xuICAgIHRoZSBjaGFuZ2UgZXZlbnQgYXMgYW4gYXJndW1lbnQuIElmIHlvdSB3YW50IHRvIG9ubHkgcmVjZWl2ZSB0aGUgbmV3XG4gICAgdmFsdWUsIHVzZSBgb25WYWx1ZUNoYW5nZWAgaW5zdGVhZC5cbiAgICovXG4gIG9uQ2hhbmdlPzogPyhldmVudDogU3dpdGNoQ2hhbmdlRXZlbnQpID0+IFByb21pc2U8dm9pZD4gfCB2b2lkLFxuXG4gIC8qKlxuICAgIEludm9rZWQgd2hlbiB0aGUgdXNlciB0cmllcyB0byBjaGFuZ2UgdGhlIHZhbHVlIG9mIHRoZSBzd2l0Y2guIFJlY2VpdmVzXG4gICAgdGhlIG5ldyB2YWx1ZSBhcyBhbiBhcmd1bWVudC4gSWYgeW91IHdhbnQgdG8gaW5zdGVhZCByZWNlaXZlIGFuIGV2ZW50LFxuICAgIHVzZSBgb25DaGFuZ2VgLlxuICAgKi9cbiAgb25WYWx1ZUNoYW5nZT86ID8odmFsdWU6IGJvb2xlYW4pID0+IFByb21pc2U8dm9pZD4gfCB2b2lkLFxufH0+O1xuXG4vKipcbiAgUmVuZGVycyBhIGJvb2xlYW4gaW5wdXQuXG5cbiAgVGhpcyBpcyBhIGNvbnRyb2xsZWQgY29tcG9uZW50IHRoYXQgcmVxdWlyZXMgYW4gYG9uVmFsdWVDaGFuZ2VgXG4gIGNhbGxiYWNrIHRoYXQgdXBkYXRlcyB0aGUgYHZhbHVlYCBwcm9wIGluIG9yZGVyIGZvciB0aGUgY29tcG9uZW50IHRvXG4gIHJlZmxlY3QgdXNlciBhY3Rpb25zLiBJZiB0aGUgYHZhbHVlYCBwcm9wIGlzIG5vdCB1cGRhdGVkLCB0aGVcbiAgY29tcG9uZW50IHdpbGwgY29udGludWUgdG8gcmVuZGVyIHRoZSBzdXBwbGllZCBgdmFsdWVgIHByb3AgaW5zdGVhZCBvZlxuICB0aGUgZXhwZWN0ZWQgcmVzdWx0IG9mIGFueSB1c2VyIGFjdGlvbnMuXG5cbiAgYGBgU25hY2tQbGF5ZXIgbmFtZT1Td2l0Y2hcbiAgaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG4gIGltcG9ydCB7IFZpZXcsIFN3aXRjaCwgU3R5bGVTaGVldCB9IGZyb20gXCJyZWFjdC1uYXRpdmVcIjtcblxuICBjb25zdCBBcHAgPSAoKSA9PiB7XG4gICAgY29uc3QgW2lzRW5hYmxlZCwgc2V0SXNFbmFibGVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICBjb25zdCB0b2dnbGVTd2l0Y2ggPSAoKSA9PiBzZXRJc0VuYWJsZWQocHJldmlvdXNTdGF0ZSA9PiAhcHJldmlvdXNTdGF0ZSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9PlxuICAgICAgICA8U3dpdGNoXG4gICAgICAgICAgdHJhY2tDb2xvcj17eyBmYWxzZTogXCIjNzY3NTc3XCIsIHRydWU6IFwiIzgxYjBmZlwiIH19XG4gICAgICAgICAgdGh1bWJDb2xvcj17aXNFbmFibGVkID8gXCIjZjVkZDRiXCIgOiBcIiNmNGYzZjRcIn1cbiAgICAgICAgICBpb3NfYmFja2dyb3VuZENvbG9yPVwiIzNlM2UzZVwiXG4gICAgICAgICAgb25WYWx1ZUNoYW5nZT17dG9nZ2xlU3dpdGNofVxuICAgICAgICAgIHZhbHVlPXtpc0VuYWJsZWR9XG4gICAgICAgIC8+XG4gICAgICA8L1ZpZXc+XG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgICBjb250YWluZXI6IHtcbiAgICAgIGZsZXg6IDEsXG4gICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCJcbiAgICB9XG4gIH0pO1xuXG4gIGV4cG9ydCBkZWZhdWx0IEFwcDtcbiAgYGBgXG4gKi9cbmNsYXNzIFN3aXRjaCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcz4ge1xuICBfbmF0aXZlU3dpdGNoUmVmOiA/UmVhY3QuRWxlbWVudFJlZjxcbiAgICB0eXBlb2YgU3dpdGNoTmF0aXZlQ29tcG9uZW50IHwgdHlwZW9mIEFuZHJvaWRTd2l0Y2hOYXRpdmVDb21wb25lbnQsXG4gID47XG4gIF9sYXN0TmF0aXZlVmFsdWU6ID9ib29sZWFuO1xuXG4gIHJlbmRlcigpOiBSZWFjdC5Ob2RlIHtcbiAgICBjb25zdCB7XG4gICAgICBkaXNhYmxlZCxcbiAgICAgIGlvc19iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICBvbkNoYW5nZSxcbiAgICAgIG9uVmFsdWVDaGFuZ2UsXG4gICAgICBzdHlsZSxcbiAgICAgIHRodW1iQ29sb3IsXG4gICAgICB0cmFja0NvbG9yLFxuICAgICAgdmFsdWUsXG4gICAgICAuLi5wcm9wc1xuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgdHJhY2tDb2xvckZvckZhbHNlID0gdHJhY2tDb2xvcj8uZmFsc2U7XG4gICAgY29uc3QgdHJhY2tDb2xvckZvclRydWUgPSB0cmFja0NvbG9yPy50cnVlO1xuXG4gICAgaWYgKFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCcpIHtcbiAgICAgIGNvbnN0IHBsYXRmb3JtUHJvcHMgPSB7XG4gICAgICAgIGVuYWJsZWQ6IGRpc2FibGVkICE9PSB0cnVlLFxuICAgICAgICBvbjogdmFsdWUgPT09IHRydWUsXG4gICAgICAgIHN0eWxlLFxuICAgICAgICB0aHVtYlRpbnRDb2xvcjogdGh1bWJDb2xvcixcbiAgICAgICAgdHJhY2tDb2xvckZvckZhbHNlOiB0cmFja0NvbG9yRm9yRmFsc2UsXG4gICAgICAgIHRyYWNrQ29sb3JGb3JUcnVlOiB0cmFja0NvbG9yRm9yVHJ1ZSxcbiAgICAgICAgdHJhY2tUaW50Q29sb3I6IHZhbHVlID09PSB0cnVlID8gdHJhY2tDb2xvckZvclRydWUgOiB0cmFja0NvbG9yRm9yRmFsc2UsXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8QW5kcm9pZFN3aXRjaE5hdGl2ZUNvbXBvbmVudFxuICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgICB7Li4ucGxhdGZvcm1Qcm9wc31cbiAgICAgICAgICBhY2Nlc3NpYmlsaXR5Um9sZT17cHJvcHMuYWNjZXNzaWJpbGl0eVJvbGUgPz8gJ3N3aXRjaCd9XG4gICAgICAgICAgb25DaGFuZ2U9e3RoaXMuX2hhbmRsZUNoYW5nZX1cbiAgICAgICAgICBvblJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdD17cmV0dXJuc0ZhbHNlfVxuICAgICAgICAgIG9uU3RhcnRTaG91bGRTZXRSZXNwb25kZXI9e3JldHVybnNUcnVlfVxuICAgICAgICAgIHJlZj17dGhpcy5faGFuZGxlU3dpdGNoTmF0aXZlQ29tcG9uZW50UmVmfVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcGxhdGZvcm1Qcm9wcyA9IHtcbiAgICAgICAgZGlzYWJsZWQsXG4gICAgICAgIG9uVGludENvbG9yOiB0cmFja0NvbG9yRm9yVHJ1ZSxcbiAgICAgICAgc3R5bGU6IFN0eWxlU2hlZXQuY29tcG9zZShcbiAgICAgICAgICB7aGVpZ2h0OiAzMSwgd2lkdGg6IDUxfSxcbiAgICAgICAgICBTdHlsZVNoZWV0LmNvbXBvc2UoXG4gICAgICAgICAgICBzdHlsZSxcbiAgICAgICAgICAgIGlvc19iYWNrZ3JvdW5kQ29sb3IgPT0gbnVsbFxuICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGlvc19iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IDE2LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKSxcbiAgICAgICAgdGh1bWJUaW50Q29sb3I6IHRodW1iQ29sb3IsXG4gICAgICAgIHRpbnRDb2xvcjogdHJhY2tDb2xvckZvckZhbHNlLFxuICAgICAgICB2YWx1ZTogdmFsdWUgPT09IHRydWUsXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8U3dpdGNoTmF0aXZlQ29tcG9uZW50XG4gICAgICAgICAgey4uLnByb3BzfVxuICAgICAgICAgIHsuLi5wbGF0Zm9ybVByb3BzfVxuICAgICAgICAgIGFjY2Vzc2liaWxpdHlSb2xlPXtwcm9wcy5hY2Nlc3NpYmlsaXR5Um9sZSA/PyAnc3dpdGNoJ31cbiAgICAgICAgICBvbkNoYW5nZT17dGhpcy5faGFuZGxlQ2hhbmdlfVxuICAgICAgICAgIG9uUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0PXtyZXR1cm5zRmFsc2V9XG4gICAgICAgICAgb25TdGFydFNob3VsZFNldFJlc3BvbmRlcj17cmV0dXJuc1RydWV9XG4gICAgICAgICAgcmVmPXt0aGlzLl9oYW5kbGVTd2l0Y2hOYXRpdmVDb21wb25lbnRSZWZ9XG4gICAgICAgIC8+XG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAvLyBUaGlzIGlzIG5lY2Vzc2FyeSBpbiBjYXNlIG5hdGl2ZSB1cGRhdGVzIHRoZSBzd2l0Y2ggYW5kIEpTIGRlY2lkZXNcbiAgICAvLyB0aGF0IHRoZSB1cGRhdGUgc2hvdWxkIGJlIGlnbm9yZWQgYW5kIHdlIHNob3VsZCBzdGljayB3aXRoIHRoZSB2YWx1ZVxuICAgIC8vIHRoYXQgd2UgaGF2ZSBpbiBKUy5cbiAgICBjb25zdCBuYXRpdmVQcm9wcyA9IHt9O1xuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5wcm9wcy52YWx1ZSA9PT0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLl9sYXN0TmF0aXZlVmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICBuYXRpdmVQcm9wcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIE9iamVjdC5rZXlzKG5hdGl2ZVByb3BzKS5sZW5ndGggPiAwICYmXG4gICAgICB0aGlzLl9uYXRpdmVTd2l0Y2hSZWYgJiZcbiAgICAgIHRoaXMuX25hdGl2ZVN3aXRjaFJlZi5zZXROYXRpdmVQcm9wc1xuICAgICkge1xuICAgICAgaWYgKFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCcpIHtcbiAgICAgICAgQW5kcm9pZFN3aXRjaENvbW1hbmRzLnNldE5hdGl2ZVZhbHVlKFxuICAgICAgICAgIHRoaXMuX25hdGl2ZVN3aXRjaFJlZixcbiAgICAgICAgICBuYXRpdmVQcm9wcy52YWx1ZSxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFN3aXRjaENvbW1hbmRzLnNldFZhbHVlKHRoaXMuX25hdGl2ZVN3aXRjaFJlZiwgbmF0aXZlUHJvcHMudmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9oYW5kbGVDaGFuZ2UgPSAoZXZlbnQ6IFN3aXRjaENoYW5nZUV2ZW50KSA9PiB7XG4gICAgaWYgKHRoaXMucHJvcHMub25DaGFuZ2UgIT0gbnVsbCkge1xuICAgICAgdGhpcy5wcm9wcy5vbkNoYW5nZShldmVudCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMub25WYWx1ZUNoYW5nZSAhPSBudWxsKSB7XG4gICAgICB0aGlzLnByb3BzLm9uVmFsdWVDaGFuZ2UoZXZlbnQubmF0aXZlRXZlbnQudmFsdWUpO1xuICAgIH1cblxuICAgIHRoaXMuX2xhc3ROYXRpdmVWYWx1ZSA9IGV2ZW50Lm5hdGl2ZUV2ZW50LnZhbHVlO1xuICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcbiAgfTtcblxuICBfaGFuZGxlU3dpdGNoTmF0aXZlQ29tcG9uZW50UmVmID0gKFxuICAgIHJlZjogP1JlYWN0LkVsZW1lbnRSZWY8XG4gICAgICB0eXBlb2YgU3dpdGNoTmF0aXZlQ29tcG9uZW50IHwgdHlwZW9mIEFuZHJvaWRTd2l0Y2hOYXRpdmVDb21wb25lbnQsXG4gICAgPixcbiAgKSA9PiB7XG4gICAgdGhpcy5fbmF0aXZlU3dpdGNoUmVmID0gcmVmO1xuICB9O1xufVxuXG5jb25zdCByZXR1cm5zRmFsc2UgPSAoKSA9PiBmYWxzZTtcbmNvbnN0IHJldHVybnNUcnVlID0gKCkgPT4gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBTd2l0Y2g7XG4iXX0=
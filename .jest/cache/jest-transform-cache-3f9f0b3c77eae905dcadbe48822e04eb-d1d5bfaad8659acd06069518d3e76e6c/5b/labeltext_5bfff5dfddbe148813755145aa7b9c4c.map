{"version":3,"sources":["label-text.js"],"names":["Object","defineProperty","exports","value","findByLabelText","findAllByLabelText","getByLabelText","getAllByLabelText","queryByLabelText","queryAllByLabelText","_config","require","_helpers","_labelHelpers","_allUtils","queryAllLabels","container","Array","from","querySelectorAll","map","node","textToMatch","getLabelContent","filter","queryAllLabelsByText","text","exact","trim","collapseWhitespace","normalizer","matcher","matches","fuzzyMatches","matchNormalizer","makeNormalizer","textToMatchByLabels","selector","checkContainerType","matchingLabelledElements","element","getRealLabels","length","hasAttribute","reduce","labelledElements","labelledElement","labelList","getLabels","label","Boolean","formControl","forEach","content","push","labelsValue","join","labelValue","index","labelsFiltered","splice","concat","queryAllByAttribute","Set","rest","els","labels","tagNames","getTagNameOfElementAssociatedWithLabelViaFor","tagName","getConfig","getElementError","htmlFor","getAttribute","querySelector","toLowerCase","getMultipleError","c","wrapSingleQueryWithSuggestion","makeSingleQuery","name","makeFindQuery","wrapAllByQueryWithSuggestion","getAllByLabelTextWithSuggestions","getByLabelTextWithSuggestions","queryAllByLabelTextWithSuggestions"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findByLabelText = exports.findAllByLabelText = exports.getByLabelText = exports.getAllByLabelText = exports.queryByLabelText = exports.queryAllByLabelText = void 0;\n\nvar _config = require(\"../config\");\n\nvar _helpers = require(\"../helpers\");\n\nvar _labelHelpers = require(\"../label-helpers\");\n\nvar _allUtils = require(\"./all-utils\");\n\nfunction queryAllLabels(container) {\n  return Array.from(container.querySelectorAll('label,input')).map(node => {\n    return {\n      node,\n      textToMatch: (0, _labelHelpers.getLabelContent)(node)\n    };\n  }).filter(({\n    textToMatch\n  }) => textToMatch !== null);\n}\n\nconst queryAllLabelsByText = (container, text, {\n  exact = true,\n  trim,\n  collapseWhitespace,\n  normalizer\n} = {}) => {\n  const matcher = exact ? _allUtils.matches : _allUtils.fuzzyMatches;\n  const matchNormalizer = (0, _allUtils.makeNormalizer)({\n    collapseWhitespace,\n    trim,\n    normalizer\n  });\n  const textToMatchByLabels = queryAllLabels(container);\n  return textToMatchByLabels.filter(({\n    node,\n    textToMatch\n  }) => matcher(textToMatch, node, text, matchNormalizer)).map(({\n    node\n  }) => node);\n};\n\nconst queryAllByLabelText = (container, text, {\n  selector = '*',\n  exact = true,\n  collapseWhitespace,\n  trim,\n  normalizer\n} = {}) => {\n  (0, _helpers.checkContainerType)(container);\n  const matcher = exact ? _allUtils.matches : _allUtils.fuzzyMatches;\n  const matchNormalizer = (0, _allUtils.makeNormalizer)({\n    collapseWhitespace,\n    trim,\n    normalizer\n  });\n  const matchingLabelledElements = Array.from(container.querySelectorAll('*')).filter(element => {\n    return (0, _labelHelpers.getRealLabels)(element).length || element.hasAttribute('aria-labelledby');\n  }).reduce((labelledElements, labelledElement) => {\n    const labelList = (0, _labelHelpers.getLabels)(container, labelledElement, {\n      selector\n    });\n    labelList.filter(label => Boolean(label.formControl)).forEach(label => {\n      if (matcher(label.content, label.formControl, text, matchNormalizer) && label.formControl) labelledElements.push(label.formControl);\n    });\n    const labelsValue = labelList.filter(label => Boolean(label.content)).map(label => label.content);\n    if (matcher(labelsValue.join(' '), labelledElement, text, matchNormalizer)) labelledElements.push(labelledElement);\n\n    if (labelsValue.length > 1) {\n      labelsValue.forEach((labelValue, index) => {\n        if (matcher(labelValue, labelledElement, text, matchNormalizer)) labelledElements.push(labelledElement);\n        const labelsFiltered = [...labelsValue];\n        labelsFiltered.splice(index, 1);\n\n        if (labelsFiltered.length > 1) {\n          if (matcher(labelsFiltered.join(' '), labelledElement, text, matchNormalizer)) labelledElements.push(labelledElement);\n        }\n      });\n    }\n\n    return labelledElements;\n  }, []).concat( // TODO: Remove ignore after `queryAllByAttribute` will be moved to TS\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  (0, _allUtils.queryAllByAttribute)('aria-label', container, text, {\n    exact,\n    normalizer: matchNormalizer\n  }));\n  return Array.from(new Set(matchingLabelledElements)).filter(element => element.matches(selector));\n}; // the getAll* query would normally look like this:\n// const getAllByLabelText = makeGetAllQuery(\n//   queryAllByLabelText,\n//   (c, text) => `Unable to find a label with the text of: ${text}`,\n// )\n// however, we can give a more helpful error message than the generic one,\n// so we're writing this one out by hand.\n\n\nconst getAllByLabelText = (container, text, ...rest) => {\n  const els = queryAllByLabelText(container, text, ...rest);\n\n  if (!els.length) {\n    const labels = queryAllLabelsByText(container, text, ...rest);\n\n    if (labels.length) {\n      const tagNames = labels.map(label => getTagNameOfElementAssociatedWithLabelViaFor(container, label)).filter(tagName => !!tagName);\n\n      if (tagNames.length) {\n        throw (0, _config.getConfig)().getElementError(tagNames.map(tagName => `Found a label with the text of: ${text}, however the element associated with this label (<${tagName} />) is non-labellable [https://html.spec.whatwg.org/multipage/forms.html#category-label]. If you really need to label a <${tagName} />, you can use aria-label or aria-labelledby instead.`).join('\\n\\n'), container);\n      } else {\n        throw (0, _config.getConfig)().getElementError(`Found a label with the text of: ${text}, however no form control was found associated to that label. Make sure you're using the \"for\" attribute or \"aria-labelledby\" attribute correctly.`, container);\n      }\n    } else {\n      throw (0, _config.getConfig)().getElementError(`Unable to find a label with the text of: ${text}`, container);\n    }\n  }\n\n  return els;\n};\n\nfunction getTagNameOfElementAssociatedWithLabelViaFor(container, label) {\n  const htmlFor = label.getAttribute('for');\n\n  if (!htmlFor) {\n    return null;\n  }\n\n  const element = container.querySelector(`[id=\"${htmlFor}\"]`);\n  return element ? element.tagName.toLowerCase() : null;\n} // the reason mentioned above is the same reason we're not using buildQueries\n\n\nconst getMultipleError = (c, text) => `Found multiple elements with the text of: ${text}`;\n\nconst queryByLabelText = (0, _allUtils.wrapSingleQueryWithSuggestion)((0, _allUtils.makeSingleQuery)(queryAllByLabelText, getMultipleError), queryAllByLabelText.name, 'query');\nexports.queryByLabelText = queryByLabelText;\nconst getByLabelText = (0, _allUtils.makeSingleQuery)(getAllByLabelText, getMultipleError);\nconst findAllByLabelText = (0, _allUtils.makeFindQuery)((0, _allUtils.wrapAllByQueryWithSuggestion)(getAllByLabelText, getAllByLabelText.name, 'findAll'));\nexports.findAllByLabelText = findAllByLabelText;\nconst findByLabelText = (0, _allUtils.makeFindQuery)((0, _allUtils.wrapSingleQueryWithSuggestion)(getByLabelText, getAllByLabelText.name, 'find'));\nexports.findByLabelText = findByLabelText;\nconst getAllByLabelTextWithSuggestions = (0, _allUtils.wrapAllByQueryWithSuggestion)(getAllByLabelText, getAllByLabelText.name, 'getAll');\nexports.getAllByLabelText = getAllByLabelTextWithSuggestions;\nconst getByLabelTextWithSuggestions = (0, _allUtils.wrapSingleQueryWithSuggestion)(getByLabelText, getAllByLabelText.name, 'get');\nexports.getByLabelText = getByLabelTextWithSuggestions;\nconst queryAllByLabelTextWithSuggestions = (0, _allUtils.wrapAllByQueryWithSuggestion)(queryAllByLabelText, queryAllByLabelText.name, 'queryAll');\nexports.queryAllByLabelText = queryAllByLabelTextWithSuggestions;"]}
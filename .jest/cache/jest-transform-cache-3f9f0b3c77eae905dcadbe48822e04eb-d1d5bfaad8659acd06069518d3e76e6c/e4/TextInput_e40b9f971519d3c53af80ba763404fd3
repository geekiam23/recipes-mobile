c72689ac0700166f5377491718f028cc
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var DeprecatedTextInputPropTypes = require("../../DeprecatedPropTypes/DeprecatedTextInputPropTypes");

var Platform = require("../../Utilities/Platform");

var React = require('react');

var StyleSheet = require("../../StyleSheet/StyleSheet");

var Text = require("../../Text/Text");

var TextAncestor = require("../../Text/TextAncestor");

var TextInputState = require("./TextInputState");

var TouchableWithoutFeedback = require("../Touchable/TouchableWithoutFeedback");

var invariant = require('invariant');

var nullthrows = require('nullthrows');

var setAndForwardRef = require("../../Utilities/setAndForwardRef");

var useLayoutEffect = React.useLayoutEffect,
    useRef = React.useRef,
    useState = React.useState;
var AndroidTextInput;
var AndroidTextInputCommands;
var RCTSinglelineTextInputView;
var RCTSinglelineTextInputNativeCommands;
var RCTMultilineTextInputView;
var RCTMultilineTextInputNativeCommands;

if (Platform.OS === 'android') {
  AndroidTextInput = require("./AndroidTextInputNativeComponent").default;
  AndroidTextInputCommands = require("./AndroidTextInputNativeComponent").Commands;
} else if (Platform.OS === 'ios') {
  RCTSinglelineTextInputView = require("./RCTSingelineTextInputNativeComponent").default;
  RCTSinglelineTextInputNativeCommands = require("./RCTSingelineTextInputNativeComponent").Commands;
  RCTMultilineTextInputView = require("./RCTMultilineTextInputNativeComponent").default;
  RCTMultilineTextInputNativeCommands = require("./RCTMultilineTextInputNativeComponent").Commands;
}

var emptyFunctionThatReturnsTrue = function emptyFunctionThatReturnsTrue() {
  return true;
};

function InternalTextInput(props) {
  var _props$selection$end, _props$blurOnSubmit;

  var inputRef = useRef(null);
  var selection = props.selection == null ? null : {
    start: props.selection.start,
    end: (_props$selection$end = props.selection.end) != null ? _props$selection$end : props.selection.start
  };

  var _useState = useState(0),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      mostRecentEventCount = _useState2[0],
      setMostRecentEventCount = _useState2[1];

  var _useState3 = useState(props.value),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      lastNativeText = _useState4[0],
      setLastNativeText = _useState4[1];

  var _useState5 = useState({
    selection: selection,
    mostRecentEventCount: mostRecentEventCount
  }),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      lastNativeSelectionState = _useState6[0],
      setLastNativeSelection = _useState6[1];

  var lastNativeSelection = lastNativeSelectionState.selection;
  var lastNativeSelectionEventCount = lastNativeSelectionState.mostRecentEventCount;

  if (lastNativeSelectionEventCount < mostRecentEventCount) {
    selection = null;
  }

  var viewCommands;

  if (AndroidTextInputCommands) {
    viewCommands = AndroidTextInputCommands;
  } else {
    viewCommands = props.multiline ? RCTMultilineTextInputNativeCommands : RCTSinglelineTextInputNativeCommands;
  }

  var text = typeof props.value === 'string' ? props.value : typeof props.defaultValue === 'string' ? props.defaultValue : '';
  useLayoutEffect(function () {
    var nativeUpdate = {};

    if (lastNativeText !== props.value && typeof props.value === 'string') {
      nativeUpdate.text = props.value;
      setLastNativeText(props.value);
    }

    if (selection && lastNativeSelection && (lastNativeSelection.start !== selection.start || lastNativeSelection.end !== selection.end)) {
      nativeUpdate.selection = selection;
      setLastNativeSelection({
        selection: selection,
        mostRecentEventCount: mostRecentEventCount
      });
    }

    if (Object.keys(nativeUpdate).length === 0) {
      return;
    }

    if (inputRef.current != null) {
      var _selection$start, _selection, _selection$end, _selection2;

      viewCommands.setTextAndSelection(inputRef.current, mostRecentEventCount, text, (_selection$start = (_selection = selection) == null ? void 0 : _selection.start) != null ? _selection$start : -1, (_selection$end = (_selection2 = selection) == null ? void 0 : _selection2.end) != null ? _selection$end : -1);
    }
  }, [mostRecentEventCount, inputRef, props.value, props.defaultValue, lastNativeText, selection, lastNativeSelection, text, viewCommands]);
  useLayoutEffect(function () {
    var inputRefValue = inputRef.current;

    if (inputRefValue != null) {
      TextInputState.registerInput(inputRefValue);
      return function () {
        TextInputState.unregisterInput(inputRefValue);

        if (TextInputState.currentlyFocusedInput() === inputRefValue) {
          nullthrows(inputRefValue).blur();
        }
      };
    }
  }, [inputRef]);

  function clear() {
    if (inputRef.current != null) {
      viewCommands.setTextAndSelection(inputRef.current, mostRecentEventCount, '', 0, 0);
    }
  }

  function isFocused() {
    return TextInputState.currentlyFocusedInput() === inputRef.current;
  }

  function getNativeRef() {
    return inputRef.current;
  }

  var _setNativeRef = setAndForwardRef({
    getForwardedRef: function getForwardedRef() {
      return props.forwardedRef;
    },
    setLocalRef: function setLocalRef(ref) {
      inputRef.current = ref;

      if (ref) {
        ref.clear = clear;
        ref.isFocused = isFocused;
        ref.getNativeRef = getNativeRef;
      }
    }
  });

  var _onPress = function _onPress(event) {
    if (props.editable || props.editable === undefined) {
      nullthrows(inputRef.current).focus();
    }
  };

  var _onChange = function _onChange(event) {
    var text = event.nativeEvent.text;
    props.onChange && props.onChange(event);
    props.onChangeText && props.onChangeText(text);

    if (inputRef.current == null) {
      return;
    }

    setLastNativeText(text);
    setMostRecentEventCount(event.nativeEvent.eventCount);
  };

  var _onSelectionChange = function _onSelectionChange(event) {
    props.onSelectionChange && props.onSelectionChange(event);

    if (inputRef.current == null) {
      return;
    }

    setLastNativeSelection({
      selection: event.nativeEvent.selection,
      mostRecentEventCount: mostRecentEventCount
    });
  };

  var _onFocus = function _onFocus(event) {
    TextInputState.focusInput(inputRef.current);

    if (props.onFocus) {
      props.onFocus(event);
    }
  };

  var _onBlur = function _onBlur(event) {
    TextInputState.blurInput(inputRef.current);

    if (props.onBlur) {
      props.onBlur(event);
    }
  };

  var _onScroll = function _onScroll(event) {
    props.onScroll && props.onScroll(event);
  };

  var textInput = null;
  var additionalTouchableProps = (0, _extends2.default)({}, null);
  var blurOnSubmit = (_props$blurOnSubmit = props.blurOnSubmit) != null ? _props$blurOnSubmit : !props.multiline;

  if (Platform.OS === 'ios') {
    var RCTTextInputView = props.multiline ? RCTMultilineTextInputView : RCTSinglelineTextInputView;
    var style = props.multiline ? [styles.multilineInput, props.style] : props.style;
    additionalTouchableProps.rejectResponderTermination = props.rejectResponderTermination;
    textInput = React.createElement(RCTTextInputView, (0, _extends2.default)({
      ref: _setNativeRef
    }, props, {
      blurOnSubmit: blurOnSubmit,
      dataDetectorTypes: props.dataDetectorTypes,
      mostRecentEventCount: mostRecentEventCount,
      onBlur: _onBlur,
      onChange: _onChange,
      onContentSizeChange: props.onContentSizeChange,
      onFocus: _onFocus,
      onScroll: _onScroll,
      onSelectionChange: _onSelectionChange,
      onSelectionChangeShouldSetResponder: emptyFunctionThatReturnsTrue,
      selection: selection,
      style: style,
      text: text
    }));
  } else if (Platform.OS === 'android') {
    var _style = [props.style];
    var autoCapitalize = props.autoCapitalize || 'sentences';
    var children = props.children;
    var childCount = React.Children.count(children);
    invariant(!(props.value && childCount), 'Cannot specify both value and children.');

    if (childCount > 1) {
      children = React.createElement(Text, null, children);
    }

    textInput = React.createElement(AndroidTextInput, (0, _extends2.default)({
      ref: _setNativeRef
    }, props, {
      autoCapitalize: autoCapitalize,
      blurOnSubmit: blurOnSubmit,
      children: children,
      disableFullscreenUI: props.disableFullscreenUI,
      mostRecentEventCount: mostRecentEventCount,
      onBlur: _onBlur,
      onChange: _onChange,
      onFocus: _onFocus,
      onScroll: _onScroll,
      onSelectionChange: _onSelectionChange,
      selection: selection,
      style: _style,
      text: text,
      textBreakStrategy: props.textBreakStrategy
    }));
  }

  return React.createElement(TextAncestor.Provider, {
    value: true
  }, React.createElement(TouchableWithoutFeedback, (0, _extends2.default)({
    onLayout: props.onLayout,
    onPress: _onPress,
    onPressIn: props.onPressIn,
    onPressOut: props.onPressOut,
    accessible: props.accessible,
    accessibilityLabel: props.accessibilityLabel,
    accessibilityRole: props.accessibilityRole,
    accessibilityState: props.accessibilityState,
    nativeID: props.nativeID,
    testID: props.testID
  }, additionalTouchableProps), textInput));
}

var ExportedForwardRef = React.forwardRef(function TextInput(props, forwardedRef) {
  return React.createElement(InternalTextInput, (0, _extends2.default)({}, props, {
    forwardedRef: forwardedRef
  }));
});
ExportedForwardRef.defaultProps = {
  allowFontScaling: true,
  rejectResponderTermination: true,
  underlineColorAndroid: 'transparent'
};
ExportedForwardRef.propTypes = DeprecatedTextInputPropTypes;
ExportedForwardRef.State = {
  currentlyFocusedInput: TextInputState.currentlyFocusedInput,
  currentlyFocusedField: TextInputState.currentlyFocusedField,
  focusTextInput: TextInputState.focusTextInput,
  blurTextInput: TextInputState.blurTextInput
};
var styles = StyleSheet.create({
  multilineInput: {
    paddingTop: 5
  }
});
module.exports = ExportedForwardRef;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
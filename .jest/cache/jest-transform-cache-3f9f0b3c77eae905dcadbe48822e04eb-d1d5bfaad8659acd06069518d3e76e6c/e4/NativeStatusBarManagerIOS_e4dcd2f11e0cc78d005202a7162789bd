203d6135a35aa799d4b3c9c02dfa93b6
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var TurboModuleRegistry = _interopRequireWildcard(require("../../TurboModule/TurboModuleRegistry"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var NativeModule = TurboModuleRegistry.getEnforcing('StatusBarManager');
var constants = null;
var NativeStatusBarManager = {
  getConstants: function getConstants() {
    if (constants == null) {
      constants = NativeModule.getConstants();
    }

    return constants;
  },
  getHeight: function getHeight(callback) {
    NativeModule.getHeight(callback);
  },
  setNetworkActivityIndicatorVisible: function setNetworkActivityIndicatorVisible(visible) {
    NativeModule.setNetworkActivityIndicatorVisible(visible);
  },
  addListener: function addListener(eventType) {
    NativeModule.addListener(eventType);
  },
  removeListeners: function removeListeners(count) {
    NativeModule.removeListeners(count);
  },
  setStyle: function setStyle(statusBarStyle, animated) {
    NativeModule.setStyle(statusBarStyle, animated);
  },
  setHidden: function setHidden(hidden, withAnimation) {
    NativeModule.setHidden(hidden, withAnimation);
  }
};
var _default = NativeStatusBarManager;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk5hdGl2ZVN0YXR1c0Jhck1hbmFnZXJJT1MuanMiXSwibmFtZXMiOlsiTmF0aXZlTW9kdWxlIiwiVHVyYm9Nb2R1bGVSZWdpc3RyeSIsImdldEVuZm9yY2luZyIsImNvbnN0YW50cyIsIk5hdGl2ZVN0YXR1c0Jhck1hbmFnZXIiLCJnZXRDb25zdGFudHMiLCJnZXRIZWlnaHQiLCJjYWxsYmFjayIsInNldE5ldHdvcmtBY3Rpdml0eUluZGljYXRvclZpc2libGUiLCJ2aXNpYmxlIiwiYWRkTGlzdGVuZXIiLCJldmVudFR5cGUiLCJyZW1vdmVMaXN0ZW5lcnMiLCJjb3VudCIsInNldFN0eWxlIiwic3RhdHVzQmFyU3R5bGUiLCJhbmltYXRlZCIsInNldEhpZGRlbiIsImhpZGRlbiIsIndpdGhBbmltYXRpb24iXSwibWFwcGluZ3MiOiJBQVVBOzs7Ozs7O0FBR0E7Ozs7OztBQTJCQSxJQUFNQSxZQUFZLEdBQUdDLG1CQUFtQixDQUFDQyxZQUFwQixDQUF1QyxrQkFBdkMsQ0FBckI7QUFDQSxJQUFJQyxTQUFTLEdBQUcsSUFBaEI7QUFFQSxJQUFNQyxzQkFBc0IsR0FBRztBQUM3QkMsRUFBQUEsWUFENkIsMEJBSTFCO0FBQ0QsUUFBSUYsU0FBUyxJQUFJLElBQWpCLEVBQXVCO0FBQ3JCQSxNQUFBQSxTQUFTLEdBQUdILFlBQVksQ0FBQ0ssWUFBYixFQUFaO0FBQ0Q7O0FBQ0QsV0FBT0YsU0FBUDtBQUNELEdBVDRCO0FBWTdCRyxFQUFBQSxTQVo2QixxQkFZbkJDLFFBWm1CLEVBWW1DO0FBQzlEUCxJQUFBQSxZQUFZLENBQUNNLFNBQWIsQ0FBdUJDLFFBQXZCO0FBQ0QsR0FkNEI7QUFnQjdCQyxFQUFBQSxrQ0FoQjZCLDhDQWdCTUMsT0FoQk4sRUFnQjhCO0FBQ3pEVCxJQUFBQSxZQUFZLENBQUNRLGtDQUFiLENBQWdEQyxPQUFoRDtBQUNELEdBbEI0QjtBQW9CN0JDLEVBQUFBLFdBcEI2Qix1QkFvQmpCQyxTQXBCaUIsRUFvQlE7QUFDbkNYLElBQUFBLFlBQVksQ0FBQ1UsV0FBYixDQUF5QkMsU0FBekI7QUFDRCxHQXRCNEI7QUF3QjdCQyxFQUFBQSxlQXhCNkIsMkJBd0JiQyxLQXhCYSxFQXdCUTtBQUNuQ2IsSUFBQUEsWUFBWSxDQUFDWSxlQUFiLENBQTZCQyxLQUE3QjtBQUNELEdBMUI0QjtBQWtDN0JDLEVBQUFBLFFBbEM2QixvQkFrQ3BCQyxjQWxDb0IsRUFrQ01DLFFBbENOLEVBa0MrQjtBQUMxRGhCLElBQUFBLFlBQVksQ0FBQ2MsUUFBYixDQUFzQkMsY0FBdEIsRUFBc0NDLFFBQXRDO0FBQ0QsR0FwQzRCO0FBeUM3QkMsRUFBQUEsU0F6QzZCLHFCQXlDbkJDLE1BekNtQixFQXlDRkMsYUF6Q0UsRUF5QzJCO0FBQ3REbkIsSUFBQUEsWUFBWSxDQUFDaUIsU0FBYixDQUF1QkMsTUFBdkIsRUFBK0JDLGFBQS9CO0FBQ0Q7QUEzQzRCLENBQS9CO2VBOENlZixzQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3cgc3RyaWN0XG4gKiBAZm9ybWF0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdHlwZSB7VHVyYm9Nb2R1bGV9IGZyb20gJy4uLy4uL1R1cmJvTW9kdWxlL1JDVEV4cG9ydCc7XG5pbXBvcnQgKiBhcyBUdXJib01vZHVsZVJlZ2lzdHJ5IGZyb20gJy4uLy4uL1R1cmJvTW9kdWxlL1R1cmJvTW9kdWxlUmVnaXN0cnknO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNwZWMgZXh0ZW5kcyBUdXJib01vZHVsZSB7XG4gICtnZXRDb25zdGFudHM6ICgpID0+IHt8XG4gICAgK0hFSUdIVDogbnVtYmVyLFxuICAgICtERUZBVUxUX0JBQ0tHUk9VTkRfQ09MT1I/OiBudW1iZXIsXG4gIHx9O1xuXG4gIC8vIFRPRE8oVDQ3NzU0MjcyKSBDYW4gd2UgcmVtb3ZlIHRoaXMgbWV0aG9kP1xuICArZ2V0SGVpZ2h0OiAoY2FsbGJhY2s6IChyZXN1bHQ6IHt8aGVpZ2h0OiBudW1iZXJ8fSkgPT4gdm9pZCkgPT4gdm9pZDtcbiAgK3NldE5ldHdvcmtBY3Rpdml0eUluZGljYXRvclZpc2libGU6ICh2aXNpYmxlOiBib29sZWFuKSA9PiB2b2lkO1xuICArYWRkTGlzdGVuZXI6IChldmVudFR5cGU6IHN0cmluZykgPT4gdm9pZDtcbiAgK3JlbW92ZUxpc3RlbmVyczogKGNvdW50OiBudW1iZXIpID0+IHZvaWQ7XG5cbiAgLyoqXG4gICAqICAtIHN0YXR1c0JhclN0eWxlcyBjYW4gYmU6XG4gICAqICAgIC0gJ2RlZmF1bHQnXG4gICAqICAgIC0gJ2RhcmstY29udGVudCdcbiAgICogICAgLSAnbGlnaHQtY29udGVudCdcbiAgICovXG4gICtzZXRTdHlsZTogKHN0YXR1c0JhclN0eWxlPzogP3N0cmluZywgYW5pbWF0ZWQ6IGJvb2xlYW4pID0+IHZvaWQ7XG4gIC8qKlxuICAgKiAgLSB3aXRoQW5pbWF0aW9uIGNhbiBiZTogJ25vbmUnIHwgJ2ZhZGUnIHwgJ3NsaWRlJ1xuICAgKi9cbiAgK3NldEhpZGRlbjogKGhpZGRlbjogYm9vbGVhbiwgd2l0aEFuaW1hdGlvbjogc3RyaW5nKSA9PiB2b2lkO1xufVxuXG5jb25zdCBOYXRpdmVNb2R1bGUgPSBUdXJib01vZHVsZVJlZ2lzdHJ5LmdldEVuZm9yY2luZzxTcGVjPignU3RhdHVzQmFyTWFuYWdlcicpO1xubGV0IGNvbnN0YW50cyA9IG51bGw7XG5cbmNvbnN0IE5hdGl2ZVN0YXR1c0Jhck1hbmFnZXIgPSB7XG4gIGdldENvbnN0YW50cygpOiB7fFxuICAgICtIRUlHSFQ6IG51bWJlcixcbiAgICArREVGQVVMVF9CQUNLR1JPVU5EX0NPTE9SPzogbnVtYmVyLFxuICB8fSB7XG4gICAgaWYgKGNvbnN0YW50cyA9PSBudWxsKSB7XG4gICAgICBjb25zdGFudHMgPSBOYXRpdmVNb2R1bGUuZ2V0Q29uc3RhbnRzKCk7XG4gICAgfVxuICAgIHJldHVybiBjb25zdGFudHM7XG4gIH0sXG5cbiAgLy8gVE9ETyhUNDc3NTQyNzIpIENhbiB3ZSByZW1vdmUgdGhpcyBtZXRob2Q/XG4gIGdldEhlaWdodChjYWxsYmFjazogKHJlc3VsdDoge3xoZWlnaHQ6IG51bWJlcnx9KSA9PiB2b2lkKTogdm9pZCB7XG4gICAgTmF0aXZlTW9kdWxlLmdldEhlaWdodChjYWxsYmFjayk7XG4gIH0sXG5cbiAgc2V0TmV0d29ya0FjdGl2aXR5SW5kaWNhdG9yVmlzaWJsZSh2aXNpYmxlOiBib29sZWFuKTogdm9pZCB7XG4gICAgTmF0aXZlTW9kdWxlLnNldE5ldHdvcmtBY3Rpdml0eUluZGljYXRvclZpc2libGUodmlzaWJsZSk7XG4gIH0sXG5cbiAgYWRkTGlzdGVuZXIoZXZlbnRUeXBlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBOYXRpdmVNb2R1bGUuYWRkTGlzdGVuZXIoZXZlbnRUeXBlKTtcbiAgfSxcblxuICByZW1vdmVMaXN0ZW5lcnMoY291bnQ6IG51bWJlcik6IHZvaWQge1xuICAgIE5hdGl2ZU1vZHVsZS5yZW1vdmVMaXN0ZW5lcnMoY291bnQpO1xuICB9LFxuXG4gIC8qKlxuICAgKiAgLSBzdGF0dXNCYXJTdHlsZXMgY2FuIGJlOlxuICAgKiAgICAtICdkZWZhdWx0J1xuICAgKiAgICAtICdkYXJrLWNvbnRlbnQnXG4gICAqICAgIC0gJ2xpZ2h0LWNvbnRlbnQnXG4gICAqL1xuICBzZXRTdHlsZShzdGF0dXNCYXJTdHlsZT86ID9zdHJpbmcsIGFuaW1hdGVkOiBib29sZWFuKTogdm9pZCB7XG4gICAgTmF0aXZlTW9kdWxlLnNldFN0eWxlKHN0YXR1c0JhclN0eWxlLCBhbmltYXRlZCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqICAtIHdpdGhBbmltYXRpb24gY2FuIGJlOiAnbm9uZScgfCAnZmFkZScgfCAnc2xpZGUnXG4gICAqL1xuICBzZXRIaWRkZW4oaGlkZGVuOiBib29sZWFuLCB3aXRoQW5pbWF0aW9uOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBOYXRpdmVNb2R1bGUuc2V0SGlkZGVuKGhpZGRlbiwgd2l0aEFuaW1hdGlvbik7XG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBOYXRpdmVTdGF0dXNCYXJNYW5hZ2VyO1xuIl19
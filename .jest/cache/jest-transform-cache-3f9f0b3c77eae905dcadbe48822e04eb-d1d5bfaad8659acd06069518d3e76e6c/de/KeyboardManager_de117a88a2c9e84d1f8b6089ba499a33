a311d66e533e351f6fb6e4af633a8e40
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var KeyboardManager = function (_React$Component) {
  (0, _inherits2.default)(KeyboardManager, _React$Component);

  var _super = _createSuper(KeyboardManager);

  function KeyboardManager() {
    var _this;

    (0, _classCallCheck2.default)(this, KeyboardManager);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "previouslyFocusedTextInput", undefined);

    _defineProperty((0, _assertThisInitialized2.default)(_this), "startTimestamp", 0);

    _defineProperty((0, _assertThisInitialized2.default)(_this), "keyboardTimeout", void 0);

    _defineProperty((0, _assertThisInitialized2.default)(_this), "clearKeyboardTimeout", function () {
      if (_this.keyboardTimeout !== undefined) {
        clearTimeout(_this.keyboardTimeout);
        _this.keyboardTimeout = undefined;
      }
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "handlePageChangeStart", function () {
      if (!_this.props.enabled) {
        return;
      }

      _this.clearKeyboardTimeout();

      var input = _reactNative.TextInput.State.currentlyFocusedInput ? _reactNative.TextInput.State.currentlyFocusedInput() : _reactNative.TextInput.State.currentlyFocusedField();

      _reactNative.TextInput.State.blurTextInput(input);

      _this.previouslyFocusedTextInput = input;
      _this.startTimestamp = Date.now();
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "handlePageChangeConfirm", function (force) {
      if (!_this.props.enabled) {
        return;
      }

      _this.clearKeyboardTimeout();

      if (force) {
        _reactNative.Keyboard.dismiss();
      } else {
        var input = _this.previouslyFocusedTextInput;

        if (input) {
          _reactNative.TextInput.State.blurTextInput(input);
        }
      }

      _this.previouslyFocusedTextInput = undefined;
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "handlePageChangeCancel", function () {
      if (!_this.props.enabled) {
        return;
      }

      _this.clearKeyboardTimeout();

      var input = _this.previouslyFocusedTextInput;

      if (input) {
        if (Date.now() - _this.startTimestamp < 100) {
          _this.keyboardTimeout = setTimeout(function () {
            _reactNative.TextInput.State.focusTextInput(input);

            _this.previouslyFocusedTextInput = undefined;
          }, 100);
        } else {
          _reactNative.TextInput.State.focusTextInput(input);

          _this.previouslyFocusedTextInput = undefined;
        }
      }
    });

    return _this;
  }

  (0, _createClass2.default)(KeyboardManager, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.clearKeyboardTimeout();
    }
  }, {
    key: "render",
    value: function render() {
      return this.props.children({
        onPageChangeStart: this.handlePageChangeStart,
        onPageChangeConfirm: this.handlePageChangeConfirm,
        onPageChangeCancel: this.handlePageChangeCancel
      });
    }
  }]);
  return KeyboardManager;
}(React.Component);

exports.default = KeyboardManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
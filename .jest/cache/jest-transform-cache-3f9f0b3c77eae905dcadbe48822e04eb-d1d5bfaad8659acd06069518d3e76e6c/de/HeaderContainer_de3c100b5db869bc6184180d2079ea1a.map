{"version":3,"sources":["HeaderContainer.tsx"],"names":["style","focusedRoute","getFocusedRoute","parentPreviousScene","React","PreviousSceneContext","mode","i","self","headerShown","headerTransparent","scene","isFocused","previous","getPreviousScene","route","previousScene","nextScene","previousHeaderShown","nextHeaderShown","isHeaderStatic","props","layout","insets","navigation","styleInterpolator","gestureDirection","forSlideUp","forSlideRight","forSlideLeft","forNoAnimation","onContentHeightChange","e","height","styles","header","position","top","left","right"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport {\n  NavigationContext,\n  NavigationRouteContext,\n  Route,\n  ParamListBase,\n} from '@react-navigation/native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport Header from './Header';\nimport {\n  forSlideLeft,\n  forSlideUp,\n  forNoAnimation,\n  forSlideRight,\n} from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport PreviousSceneContext from '../../utils/PreviousSceneContext';\nimport type {\n  Layout,\n  Scene,\n  StackHeaderStyleInterpolator,\n  StackNavigationProp,\n  GestureDirection,\n} from '../../types';\n\nexport type Props = {\n  mode: 'float' | 'screen';\n  layout: Layout;\n  insets: EdgeInsets;\n  scenes: (Scene<Route<string>> | undefined)[];\n  getPreviousScene: (props: {\n    route: Route<string>;\n  }) => Scene<Route<string>> | undefined;\n  getFocusedRoute: () => Route<string>;\n  onContentHeightChange?: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  styleInterpolator: StackHeaderStyleInterpolator;\n  gestureDirection: GestureDirection;\n  style?: StyleProp<ViewStyle>;\n};\n\nexport default function HeaderContainer({\n  mode,\n  scenes,\n  layout,\n  insets,\n  getPreviousScene,\n  getFocusedRoute,\n  onContentHeightChange,\n  gestureDirection,\n  styleInterpolator,\n  style,\n}: Props) {\n  const focusedRoute = getFocusedRoute();\n  const parentPreviousScene = React.useContext(PreviousSceneContext);\n\n  return (\n    <Animated.View pointerEvents=\"box-none\" style={style}>\n      {scenes.slice(-3).map((scene, i, self) => {\n        if ((mode === 'screen' && i !== self.length - 1) || !scene) {\n          return null;\n        }\n\n        const { header, headerShown = true, headerTransparent } =\n          scene.descriptor.options || {};\n\n        if (!headerShown) {\n          return null;\n        }\n\n        const isFocused = focusedRoute.key === scene.route.key;\n        const previous =\n          getPreviousScene({ route: scene.route }) ?? parentPreviousScene;\n\n        // If the screen is next to a headerless screen, we need to make the header appear static\n        // This makes the header look like it's moving with the screen\n        const previousScene = self[i - 1];\n        const nextScene = self[i + 1];\n\n        const { headerShown: previousHeaderShown = true } =\n          previousScene?.descriptor.options || {};\n\n        const { headerShown: nextHeaderShown = true } =\n          nextScene?.descriptor.options || {};\n\n        const isHeaderStatic =\n          (previousHeaderShown === false &&\n            // We still need to animate when coming back from next scene\n            // A hacky way to check this is if the next scene exists\n            !nextScene) ||\n          nextHeaderShown === false;\n\n        const props = {\n          mode,\n          layout,\n          insets,\n          scene,\n          previous,\n          navigation: scene.descriptor.navigation as StackNavigationProp<\n            ParamListBase\n          >,\n          styleInterpolator:\n            mode === 'float'\n              ? isHeaderStatic\n                ? gestureDirection === 'vertical' ||\n                  gestureDirection === 'vertical-inverted'\n                  ? forSlideUp\n                  : gestureDirection === 'horizontal-inverted'\n                  ? forSlideRight\n                  : forSlideLeft\n                : styleInterpolator\n              : forNoAnimation,\n        };\n\n        return (\n          <NavigationContext.Provider\n            key={scene.route.key}\n            value={scene.descriptor.navigation}\n          >\n            <NavigationRouteContext.Provider value={scene.route}>\n              <View\n                onLayout={\n                  onContentHeightChange\n                    ? (e) => {\n                        const { height } = e.nativeEvent.layout;\n\n                        onContentHeightChange({\n                          route: scene.route,\n                          height,\n                        });\n                      }\n                    : undefined\n                }\n                pointerEvents={isFocused ? 'box-none' : 'none'}\n                accessibilityElementsHidden={!isFocused}\n                importantForAccessibility={\n                  isFocused ? 'auto' : 'no-hide-descendants'\n                }\n                style={\n                  // Avoid positioning the focused header absolutely\n                  // Otherwise accessibility tools don't seem to be able to find it\n                  (mode === 'float' && !isFocused) || headerTransparent\n                    ? styles.header\n                    : null\n                }\n              >\n                {header !== undefined ? header(props) : <Header {...props} />}\n              </View>\n            </NavigationRouteContext.Provider>\n          </NavigationContext.Provider>\n        );\n      })}\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n});\n"]}
0460423c1aa6f7419f9cbb3e8633942a
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fireEvent = void 0;

var _dom = require("@testing-library/dom");

var fireEvent = function fireEvent() {
  return (0, _dom.fireEvent).apply(void 0, arguments);
};

exports.fireEvent = fireEvent;
Object.keys(_dom.fireEvent).forEach(function (key) {
  fireEvent[key] = function () {
    var _dom$fireEvent;

    return (_dom$fireEvent = _dom.fireEvent)[key].apply(_dom$fireEvent, arguments);
  };
});
var mouseEnter = fireEvent.mouseEnter;
var mouseLeave = fireEvent.mouseLeave;

fireEvent.mouseEnter = function () {
  mouseEnter.apply(void 0, arguments);
  return fireEvent.mouseOver.apply(fireEvent, arguments);
};

fireEvent.mouseLeave = function () {
  mouseLeave.apply(void 0, arguments);
  return fireEvent.mouseOut.apply(fireEvent, arguments);
};

var pointerEnter = fireEvent.pointerEnter;
var pointerLeave = fireEvent.pointerLeave;

fireEvent.pointerEnter = function () {
  pointerEnter.apply(void 0, arguments);
  return fireEvent.pointerOver.apply(fireEvent, arguments);
};

fireEvent.pointerLeave = function () {
  pointerLeave.apply(void 0, arguments);
  return fireEvent.pointerOut.apply(fireEvent, arguments);
};

var select = fireEvent.select;

fireEvent.select = function (node, init) {
  select(node, init);
  node.focus();
  fireEvent.keyUp(node, init);
};

var blur = fireEvent.blur;
var focus = fireEvent.focus;

fireEvent.blur = function () {
  fireEvent.focusOut.apply(fireEvent, arguments);
  return blur.apply(void 0, arguments);
};

fireEvent.focus = function () {
  fireEvent.focusIn.apply(fireEvent, arguments);
  return focus.apply(void 0, arguments);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpcmUtZXZlbnQuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJmaXJlRXZlbnQiLCJfZG9tIiwicmVxdWlyZSIsImtleXMiLCJmb3JFYWNoIiwia2V5IiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJtb3VzZU92ZXIiLCJtb3VzZU91dCIsInBvaW50ZXJFbnRlciIsInBvaW50ZXJMZWF2ZSIsInBvaW50ZXJPdmVyIiwicG9pbnRlck91dCIsInNlbGVjdCIsIm5vZGUiLCJpbml0IiwiZm9jdXMiLCJrZXlVcCIsImJsdXIiLCJmb2N1c091dCIsImZvY3VzSW4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDQyxFQUFBQSxLQUFLLEVBQUU7QUFEb0MsQ0FBN0M7QUFHQUQsT0FBTyxDQUFDRSxTQUFSLEdBQW9CLEtBQUssQ0FBekI7O0FBRUEsSUFBSUMsSUFBSSxHQUFHQyxPQUFPLENBQUMsc0JBQUQsQ0FBbEI7O0FBTUEsSUFBTUYsU0FBUyxHQUFHLFNBQVpBLFNBQVk7QUFBQSxTQUFhLENBQUMsR0FBR0MsSUFBSSxDQUFDRCxTQUFULDBCQUFiO0FBQUEsQ0FBbEI7O0FBRUFGLE9BQU8sQ0FBQ0UsU0FBUixHQUFvQkEsU0FBcEI7QUFDQUosTUFBTSxDQUFDTyxJQUFQLENBQVlGLElBQUksQ0FBQ0QsU0FBakIsRUFBNEJJLE9BQTVCLENBQW9DLFVBQUFDLEdBQUcsRUFBSTtBQUN6Q0wsRUFBQUEsU0FBUyxDQUFDSyxHQUFELENBQVQsR0FBaUI7QUFBQTs7QUFBQSxXQUFhLGtCQUFBSixJQUFJLENBQUNELFNBQUwsRUFBZUssR0FBZixrQ0FBYjtBQUFBLEdBQWpCO0FBQ0QsQ0FGRDtBQU1BLElBQU1DLFVBQVUsR0FBR04sU0FBUyxDQUFDTSxVQUE3QjtBQUNBLElBQU1DLFVBQVUsR0FBR1AsU0FBUyxDQUFDTyxVQUE3Qjs7QUFFQVAsU0FBUyxDQUFDTSxVQUFWLEdBQXVCLFlBQWE7QUFDbENBLEVBQUFBLFVBQVUsTUFBVjtBQUNBLFNBQU9OLFNBQVMsQ0FBQ1EsU0FBVixPQUFBUixTQUFTLFlBQWhCO0FBQ0QsQ0FIRDs7QUFLQUEsU0FBUyxDQUFDTyxVQUFWLEdBQXVCLFlBQWE7QUFDbENBLEVBQUFBLFVBQVUsTUFBVjtBQUNBLFNBQU9QLFNBQVMsQ0FBQ1MsUUFBVixPQUFBVCxTQUFTLFlBQWhCO0FBQ0QsQ0FIRDs7QUFLQSxJQUFNVSxZQUFZLEdBQUdWLFNBQVMsQ0FBQ1UsWUFBL0I7QUFDQSxJQUFNQyxZQUFZLEdBQUdYLFNBQVMsQ0FBQ1csWUFBL0I7O0FBRUFYLFNBQVMsQ0FBQ1UsWUFBVixHQUF5QixZQUFhO0FBQ3BDQSxFQUFBQSxZQUFZLE1BQVo7QUFDQSxTQUFPVixTQUFTLENBQUNZLFdBQVYsT0FBQVosU0FBUyxZQUFoQjtBQUNELENBSEQ7O0FBS0FBLFNBQVMsQ0FBQ1csWUFBVixHQUF5QixZQUFhO0FBQ3BDQSxFQUFBQSxZQUFZLE1BQVo7QUFDQSxTQUFPWCxTQUFTLENBQUNhLFVBQVYsT0FBQWIsU0FBUyxZQUFoQjtBQUNELENBSEQ7O0FBS0EsSUFBTWMsTUFBTSxHQUFHZCxTQUFTLENBQUNjLE1BQXpCOztBQUVBZCxTQUFTLENBQUNjLE1BQVYsR0FBbUIsVUFBQ0MsSUFBRCxFQUFPQyxJQUFQLEVBQWdCO0FBQ2pDRixFQUFBQSxNQUFNLENBQUNDLElBQUQsRUFBT0MsSUFBUCxDQUFOO0FBRUFELEVBQUFBLElBQUksQ0FBQ0UsS0FBTDtBQVNBakIsRUFBQUEsU0FBUyxDQUFDa0IsS0FBVixDQUFnQkgsSUFBaEIsRUFBc0JDLElBQXRCO0FBQ0QsQ0FiRDs7QUFrQkEsSUFBTUcsSUFBSSxHQUFHbkIsU0FBUyxDQUFDbUIsSUFBdkI7QUFDQSxJQUFNRixLQUFLLEdBQUdqQixTQUFTLENBQUNpQixLQUF4Qjs7QUFFQWpCLFNBQVMsQ0FBQ21CLElBQVYsR0FBaUIsWUFBYTtBQUM1Qm5CLEVBQUFBLFNBQVMsQ0FBQ29CLFFBQVYsT0FBQXBCLFNBQVMsWUFBVDtBQUNBLFNBQU9tQixJQUFJLE1BQUosbUJBQVA7QUFDRCxDQUhEOztBQUtBbkIsU0FBUyxDQUFDaUIsS0FBVixHQUFrQixZQUFhO0FBQzdCakIsRUFBQUEsU0FBUyxDQUFDcUIsT0FBVixPQUFBckIsU0FBUyxZQUFUO0FBQ0EsU0FBT2lCLEtBQUssTUFBTCxtQkFBUDtBQUNELENBSEQiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZmlyZUV2ZW50ID0gdm9pZCAwO1xuXG52YXIgX2RvbSA9IHJlcXVpcmUoXCJAdGVzdGluZy1saWJyYXJ5L2RvbVwiKTtcblxuLy8gcmVhY3QtdGVzdGluZy1saWJyYXJ5J3MgdmVyc2lvbiBvZiBmaXJlRXZlbnQgd2lsbCBjYWxsXG4vLyBkb20tdGVzdGluZy1saWJyYXJ5J3MgdmVyc2lvbiBvZiBmaXJlRXZlbnQuIFRoZSByZWFzb25cbi8vIHdlIG1ha2UgdGhpcyBkaXN0aW5jdGlvbiBob3dldmVyIGlzIGJlY2F1c2Ugd2UgaGF2ZVxuLy8gYSBmZXcgZXh0cmEgZXZlbnRzIHRoYXQgd29yayBhIGJpdCBkaWZmZXJlbnRseVxuY29uc3QgZmlyZUV2ZW50ID0gKC4uLmFyZ3MpID0+ICgwLCBfZG9tLmZpcmVFdmVudCkoLi4uYXJncyk7XG5cbmV4cG9ydHMuZmlyZUV2ZW50ID0gZmlyZUV2ZW50O1xuT2JqZWN0LmtleXMoX2RvbS5maXJlRXZlbnQpLmZvckVhY2goa2V5ID0+IHtcbiAgZmlyZUV2ZW50W2tleV0gPSAoLi4uYXJncykgPT4gX2RvbS5maXJlRXZlbnRba2V5XSguLi5hcmdzKTtcbn0pOyAvLyBSZWFjdCBldmVudCBzeXN0ZW0gdHJhY2tzIG5hdGl2ZSBtb3VzZU92ZXIvbW91c2VPdXQgZXZlbnRzIGZvclxuLy8gcnVubmluZyBvbk1vdXNlRW50ZXIvb25Nb3VzZUxlYXZlIGhhbmRsZXJzXG4vLyBAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi9iODdhYWJkZmUxYjc0NjFlNzMzMWFiYjM2MDFkOWU2YmIyNzU0NGJjL3BhY2thZ2VzL3JlYWN0LWRvbS9zcmMvZXZlbnRzL0VudGVyTGVhdmVFdmVudFBsdWdpbi5qcyNMMjQtTDMxXG5cbmNvbnN0IG1vdXNlRW50ZXIgPSBmaXJlRXZlbnQubW91c2VFbnRlcjtcbmNvbnN0IG1vdXNlTGVhdmUgPSBmaXJlRXZlbnQubW91c2VMZWF2ZTtcblxuZmlyZUV2ZW50Lm1vdXNlRW50ZXIgPSAoLi4uYXJncykgPT4ge1xuICBtb3VzZUVudGVyKC4uLmFyZ3MpO1xuICByZXR1cm4gZmlyZUV2ZW50Lm1vdXNlT3ZlciguLi5hcmdzKTtcbn07XG5cbmZpcmVFdmVudC5tb3VzZUxlYXZlID0gKC4uLmFyZ3MpID0+IHtcbiAgbW91c2VMZWF2ZSguLi5hcmdzKTtcbiAgcmV0dXJuIGZpcmVFdmVudC5tb3VzZU91dCguLi5hcmdzKTtcbn07XG5cbmNvbnN0IHBvaW50ZXJFbnRlciA9IGZpcmVFdmVudC5wb2ludGVyRW50ZXI7XG5jb25zdCBwb2ludGVyTGVhdmUgPSBmaXJlRXZlbnQucG9pbnRlckxlYXZlO1xuXG5maXJlRXZlbnQucG9pbnRlckVudGVyID0gKC4uLmFyZ3MpID0+IHtcbiAgcG9pbnRlckVudGVyKC4uLmFyZ3MpO1xuICByZXR1cm4gZmlyZUV2ZW50LnBvaW50ZXJPdmVyKC4uLmFyZ3MpO1xufTtcblxuZmlyZUV2ZW50LnBvaW50ZXJMZWF2ZSA9ICguLi5hcmdzKSA9PiB7XG4gIHBvaW50ZXJMZWF2ZSguLi5hcmdzKTtcbiAgcmV0dXJuIGZpcmVFdmVudC5wb2ludGVyT3V0KC4uLmFyZ3MpO1xufTtcblxuY29uc3Qgc2VsZWN0ID0gZmlyZUV2ZW50LnNlbGVjdDtcblxuZmlyZUV2ZW50LnNlbGVjdCA9IChub2RlLCBpbml0KSA9PiB7XG4gIHNlbGVjdChub2RlLCBpbml0KTsgLy8gUmVhY3QgdHJhY2tzIHRoaXMgZXZlbnQgb25seSBvbiBmb2N1c2VkIGlucHV0c1xuXG4gIG5vZGUuZm9jdXMoKTsgLy8gUmVhY3QgY3JlYXRlcyB0aGlzIGV2ZW50IHdoZW4gb25lIG9mIHRoZSBmb2xsb3dpbmcgbmF0aXZlIGV2ZW50cyBoYXBwZW5zXG4gIC8vIC0gY29udGV4dE1lbnVcbiAgLy8gLSBtb3VzZVVwXG4gIC8vIC0gZHJhZ0VuZFxuICAvLyAtIGtleVVwXG4gIC8vIC0ga2V5RG93blxuICAvLyBzbyB3ZSBjYW4gdXNlIGFueSBoZXJlXG4gIC8vIEBsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iL2I4N2FhYmRmZTFiNzQ2MWU3MzMxYWJiMzYwMWQ5ZTZiYjI3NTQ0YmMvcGFja2FnZXMvcmVhY3QtZG9tL3NyYy9ldmVudHMvU2VsZWN0RXZlbnRQbHVnaW4uanMjTDIwMy1MMjI0XG5cbiAgZmlyZUV2ZW50LmtleVVwKG5vZGUsIGluaXQpO1xufTsgLy8gUmVhY3QgZXZlbnQgc3lzdGVtIHRyYWNrcyBuYXRpdmUgZm9jdXNvdXQvZm9jdXNpbiBldmVudHMgZm9yXG4vLyBydW5uaW5nIGJsdXIvZm9jdXMgaGFuZGxlcnNcbi8vIEBsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9wdWxsLzE5MTg2XG5cblxuY29uc3QgYmx1ciA9IGZpcmVFdmVudC5ibHVyO1xuY29uc3QgZm9jdXMgPSBmaXJlRXZlbnQuZm9jdXM7XG5cbmZpcmVFdmVudC5ibHVyID0gKC4uLmFyZ3MpID0+IHtcbiAgZmlyZUV2ZW50LmZvY3VzT3V0KC4uLmFyZ3MpO1xuICByZXR1cm4gYmx1ciguLi5hcmdzKTtcbn07XG5cbmZpcmVFdmVudC5mb2N1cyA9ICguLi5hcmdzKSA9PiB7XG4gIGZpcmVFdmVudC5mb2N1c0luKC4uLmFyZ3MpO1xuICByZXR1cm4gZm9jdXMoLi4uYXJncyk7XG59OyJdfQ==
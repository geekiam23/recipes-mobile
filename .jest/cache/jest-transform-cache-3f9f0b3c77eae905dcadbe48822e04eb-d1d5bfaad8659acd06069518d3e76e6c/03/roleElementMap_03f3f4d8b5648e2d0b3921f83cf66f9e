d6f46dea47e4d6aae3fc6ab512dfa12b
"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _set = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/set"));

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/keys"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/toConsumableArray"));

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/map"));

var _rolesMap = _interopRequireDefault(require("./rolesMap"));

var _context;

var roleElementMap = new _map.default([]);
(0, _forEach.default)(_context = (0, _toConsumableArray2.default)((0, _keys.default)(_rolesMap.default).call(_rolesMap.default))).call(_context, function (key) {
  var role = _rolesMap.default.get(key);

  if (role) {
    var _context2, _context3;

    (0, _forEach.default)(_context2 = (0, _concat.default)(_context3 = []).call(_context3, (0, _toConsumableArray2.default)(role.baseConcepts), (0, _toConsumableArray2.default)(role.relatedConcepts))).call(_context2, function (relation) {
      if (relation.module === 'HTML') {
        var concept = relation.concept;

        if (concept) {
          var relationConcepts = roleElementMap.get(key) || new _set.default([]);
          relationConcepts.add(concept);
          roleElementMap.set(key, relationConcepts);
        }
      }
    });
  }
});
var _default = roleElementMap;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJvbGVFbGVtZW50TWFwLmpzIl0sIm5hbWVzIjpbIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX09iamVjdCRkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfc2V0IiwiX2NvbmNhdCIsIl9rZXlzIiwiX3RvQ29uc3VtYWJsZUFycmF5MiIsIl9mb3JFYWNoIiwiX21hcCIsIl9yb2xlc01hcCIsIl9jb250ZXh0Iiwicm9sZUVsZW1lbnRNYXAiLCJjYWxsIiwia2V5Iiwicm9sZSIsImdldCIsIl9jb250ZXh0MiIsIl9jb250ZXh0MyIsImJhc2VDb25jZXB0cyIsInJlbGF0ZWRDb25jZXB0cyIsInJlbGF0aW9uIiwibW9kdWxlIiwiY29uY2VwdCIsInJlbGF0aW9uQ29uY2VwdHMiLCJhZGQiLCJzZXQiLCJfZGVmYXVsdCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsc0JBQXNCLEdBQUdDLE9BQU8sQ0FBQyxzREFBRCxDQUFwQzs7QUFFQSxJQUFJQyxzQkFBc0IsR0FBR0QsT0FBTyxDQUFDLDhEQUFELENBQXBDOztBQUVBQyxzQkFBc0IsQ0FBQ0MsT0FBRCxFQUFVLFlBQVYsRUFBd0I7QUFDNUNDLEVBQUFBLEtBQUssRUFBRTtBQURxQyxDQUF4QixDQUF0Qjs7QUFJQUQsT0FBTyxDQUFDRSxPQUFSLEdBQWtCLEtBQUssQ0FBdkI7O0FBRUEsSUFBSUMsSUFBSSxHQUFHTixzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLDJDQUFELENBQVIsQ0FBakM7O0FBRUEsSUFBSU0sT0FBTyxHQUFHUCxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLHVEQUFELENBQVIsQ0FBcEM7O0FBRUEsSUFBSU8sS0FBSyxHQUFHUixzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLHFEQUFELENBQVIsQ0FBbEM7O0FBRUEsSUFBSVEsbUJBQW1CLEdBQUdULHNCQUFzQixDQUFDQyxPQUFPLENBQUMsa0RBQUQsQ0FBUixDQUFoRDs7QUFFQSxJQUFJUyxRQUFRLEdBQUdWLHNCQUFzQixDQUFDQyxPQUFPLENBQUMseURBQUQsQ0FBUixDQUFyQzs7QUFFQSxJQUFJVSxJQUFJLEdBQUdYLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsMkNBQUQsQ0FBUixDQUFqQzs7QUFFQSxJQUFJVyxTQUFTLEdBQUdaLHNCQUFzQixDQUFDQyxPQUFPLGNBQVIsQ0FBdEM7O0FBRUEsSUFBSVksUUFBSjs7QUFFQSxJQUFJQyxjQUFjLEdBQUcsSUFBSUgsSUFBSSxDQUFDTixPQUFULENBQWlCLEVBQWpCLENBQXJCO0FBQ0EsQ0FBQyxHQUFHSyxRQUFRLENBQUNMLE9BQWIsRUFBc0JRLFFBQVEsR0FBRyxDQUFDLEdBQUdKLG1CQUFtQixDQUFDSixPQUF4QixFQUFpQyxDQUFDLEdBQUdHLEtBQUssQ0FBQ0gsT0FBVixFQUFtQk8sU0FBUyxDQUFDUCxPQUE3QixFQUFzQ1UsSUFBdEMsQ0FBMkNILFNBQVMsQ0FBQ1AsT0FBckQsQ0FBakMsQ0FBakMsRUFBa0lVLElBQWxJLENBQXVJRixRQUF2SSxFQUFpSixVQUFVRyxHQUFWLEVBQWU7QUFDOUosTUFBSUMsSUFBSSxHQUFHTCxTQUFTLENBQUNQLE9BQVYsQ0FBa0JhLEdBQWxCLENBQXNCRixHQUF0QixDQUFYOztBQUVBLE1BQUlDLElBQUosRUFBVTtBQUNSLFFBQUlFLFNBQUosRUFBZUMsU0FBZjs7QUFFQSxLQUFDLEdBQUdWLFFBQVEsQ0FBQ0wsT0FBYixFQUFzQmMsU0FBUyxHQUFHLENBQUMsR0FBR1osT0FBTyxDQUFDRixPQUFaLEVBQXFCZSxTQUFTLEdBQUcsRUFBakMsRUFBcUNMLElBQXJDLENBQTBDSyxTQUExQyxFQUFxRCxDQUFDLEdBQUdYLG1CQUFtQixDQUFDSixPQUF4QixFQUFpQ1ksSUFBSSxDQUFDSSxZQUF0QyxDQUFyRCxFQUEwRyxDQUFDLEdBQUdaLG1CQUFtQixDQUFDSixPQUF4QixFQUFpQ1ksSUFBSSxDQUFDSyxlQUF0QyxDQUExRyxDQUFsQyxFQUFxTVAsSUFBck0sQ0FBME1JLFNBQTFNLEVBQXFOLFVBQVVJLFFBQVYsRUFBb0I7QUFDdk8sVUFBSUEsUUFBUSxDQUFDQyxNQUFULEtBQW9CLE1BQXhCLEVBQWdDO0FBQzlCLFlBQUlDLE9BQU8sR0FBR0YsUUFBUSxDQUFDRSxPQUF2Qjs7QUFFQSxZQUFJQSxPQUFKLEVBQWE7QUFDWCxjQUFJQyxnQkFBZ0IsR0FBR1osY0FBYyxDQUFDSSxHQUFmLENBQW1CRixHQUFuQixLQUEyQixJQUFJVixJQUFJLENBQUNELE9BQVQsQ0FBaUIsRUFBakIsQ0FBbEQ7QUFDQXFCLFVBQUFBLGdCQUFnQixDQUFDQyxHQUFqQixDQUFxQkYsT0FBckI7QUFDQVgsVUFBQUEsY0FBYyxDQUFDYyxHQUFmLENBQW1CWixHQUFuQixFQUF3QlUsZ0JBQXhCO0FBQ0Q7QUFDRjtBQUNGLEtBVkQ7QUFXRDtBQUNGLENBbEJEO0FBbUJBLElBQUlHLFFBQVEsR0FBR2YsY0FBZjtBQUNBWCxPQUFPLENBQUNFLE9BQVIsR0FBa0J3QixRQUFsQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMzL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX09iamVjdCRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMtc3RhYmxlL29iamVjdC9kZWZpbmUtcHJvcGVydHlcIik7XG5cbl9PYmplY3QkZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfc2V0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9jb3JlLWpzLXN0YWJsZS9zZXRcIikpO1xuXG52YXIgX2NvbmNhdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy1zdGFibGUvaW5zdGFuY2UvY29uY2F0XCIpKTtcblxudmFyIF9rZXlzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9jb3JlLWpzLXN0YWJsZS9pbnN0YW5jZS9rZXlzXCIpKTtcblxudmFyIF90b0NvbnN1bWFibGVBcnJheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMzL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXlcIikpO1xuXG52YXIgX2ZvckVhY2ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMtc3RhYmxlL2luc3RhbmNlL2Zvci1lYWNoXCIpKTtcblxudmFyIF9tYXAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMtc3RhYmxlL21hcFwiKSk7XG5cbnZhciBfcm9sZXNNYXAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3JvbGVzTWFwXCIpKTtcblxudmFyIF9jb250ZXh0O1xuXG52YXIgcm9sZUVsZW1lbnRNYXAgPSBuZXcgX21hcC5kZWZhdWx0KFtdKTtcbigwLCBfZm9yRWFjaC5kZWZhdWx0KShfY29udGV4dCA9ICgwLCBfdG9Db25zdW1hYmxlQXJyYXkyLmRlZmF1bHQpKCgwLCBfa2V5cy5kZWZhdWx0KShfcm9sZXNNYXAuZGVmYXVsdCkuY2FsbChfcm9sZXNNYXAuZGVmYXVsdCkpKS5jYWxsKF9jb250ZXh0LCBmdW5jdGlvbiAoa2V5KSB7XG4gIHZhciByb2xlID0gX3JvbGVzTWFwLmRlZmF1bHQuZ2V0KGtleSk7XG5cbiAgaWYgKHJvbGUpIHtcbiAgICB2YXIgX2NvbnRleHQyLCBfY29udGV4dDM7XG5cbiAgICAoMCwgX2ZvckVhY2guZGVmYXVsdCkoX2NvbnRleHQyID0gKDAsIF9jb25jYXQuZGVmYXVsdCkoX2NvbnRleHQzID0gW10pLmNhbGwoX2NvbnRleHQzLCAoMCwgX3RvQ29uc3VtYWJsZUFycmF5Mi5kZWZhdWx0KShyb2xlLmJhc2VDb25jZXB0cyksICgwLCBfdG9Db25zdW1hYmxlQXJyYXkyLmRlZmF1bHQpKHJvbGUucmVsYXRlZENvbmNlcHRzKSkpLmNhbGwoX2NvbnRleHQyLCBmdW5jdGlvbiAocmVsYXRpb24pIHtcbiAgICAgIGlmIChyZWxhdGlvbi5tb2R1bGUgPT09ICdIVE1MJykge1xuICAgICAgICB2YXIgY29uY2VwdCA9IHJlbGF0aW9uLmNvbmNlcHQ7XG5cbiAgICAgICAgaWYgKGNvbmNlcHQpIHtcbiAgICAgICAgICB2YXIgcmVsYXRpb25Db25jZXB0cyA9IHJvbGVFbGVtZW50TWFwLmdldChrZXkpIHx8IG5ldyBfc2V0LmRlZmF1bHQoW10pO1xuICAgICAgICAgIHJlbGF0aW9uQ29uY2VwdHMuYWRkKGNvbmNlcHQpO1xuICAgICAgICAgIHJvbGVFbGVtZW50TWFwLnNldChrZXksIHJlbGF0aW9uQ29uY2VwdHMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xudmFyIF9kZWZhdWx0ID0gcm9sZUVsZW1lbnRNYXA7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiXX0=
0582c4f9534cb1742d834b3d10d1a8c9
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toHaveTextContent = toHaveTextContent;

var _jestMatcherUtils = require("jest-matcher-utils");

var _ramda = require("ramda");

var _utils = require("./utils");

function getText(child) {
  var currentValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var value = currentValue;

  if (!child) {
    return value;
  } else if (Array.isArray(child)) {
    return child.reduce(function (acc, element) {
      return acc + getText((0, _ramda.path)(['props', 'children'], element));
    }, '');
  } else if (typeof child === 'object') {
    return getText((0, _ramda.path)(['props', 'children'], child), value);
  } else {
    return "" + value + child;
  }
}

function toHaveTextContent(element, checkWith) {
  var _this = this;

  (0, _utils.checkReactElement)(element, toHaveTextContent, this);
  var textContent = (0, _ramda.compose)(_utils.normalize, (0, _ramda.join)(''), (0, _ramda.filter)(function (child) {
    return typeof child === 'string' || typeof child === 'number';
  }), (0, _ramda.map)(function (child) {
    return typeof child === 'object' ? getText(child) : child;
  }), function (child) {
    return (0, _ramda.is)(Array, child) ? child : [child];
  }, (0, _ramda.defaultTo)([]), (0, _ramda.path)(['props', 'children']))(element);
  return {
    pass: (0, _utils.matches)(textContent, checkWith),
    message: function message() {
      var to = _this.isNot ? 'not to' : 'to';
      return (0, _utils.getMessage)((0, _jestMatcherUtils.matcherHint)((_this.isNot ? '.not' : '') + ".toHaveTextContent", 'element', ''), "Expected element " + to + " have text content", checkWith, 'Received', textContent);
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRvLWhhdmUtdGV4dC1jb250ZW50LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidG9IYXZlVGV4dENvbnRlbnQiLCJfamVzdE1hdGNoZXJVdGlscyIsInJlcXVpcmUiLCJfcmFtZGEiLCJfdXRpbHMiLCJnZXRUZXh0IiwiY2hpbGQiLCJjdXJyZW50VmFsdWUiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJBcnJheSIsImlzQXJyYXkiLCJyZWR1Y2UiLCJhY2MiLCJlbGVtZW50IiwicGF0aCIsImNoZWNrV2l0aCIsIl90aGlzIiwiY2hlY2tSZWFjdEVsZW1lbnQiLCJ0ZXh0Q29udGVudCIsImNvbXBvc2UiLCJub3JtYWxpemUiLCJqb2luIiwiZmlsdGVyIiwibWFwIiwiaXMiLCJkZWZhdWx0VG8iLCJwYXNzIiwibWF0Y2hlcyIsIm1lc3NhZ2UiLCJ0byIsImlzTm90IiwiZ2V0TWVzc2FnZSIsIm1hdGNoZXJIaW50Il0sIm1hcHBpbmdzIjoiQUFBQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsRUFBQUEsS0FBSyxFQUFFO0FBRG9DLENBQTdDO0FBR0FELE9BQU8sQ0FBQ0UsaUJBQVIsR0FBNEJBLGlCQUE1Qjs7QUFFQSxJQUFJQyxpQkFBaUIsR0FBR0MsT0FBTyxDQUFDLG9CQUFELENBQS9COztBQUVBLElBQUlDLE1BQU0sR0FBR0QsT0FBTyxDQUFDLE9BQUQsQ0FBcEI7O0FBRUEsSUFBSUUsTUFBTSxHQUFHRixPQUFPLFdBQXBCOztBQUVBLFNBQVNHLE9BQVQsQ0FBaUJDLEtBQWpCLEVBQXdCO0FBQ3RCLE1BQUlDLFlBQVksR0FBR0MsU0FBUyxDQUFDQyxNQUFWLEdBQW1CLENBQW5CLElBQXdCRCxTQUFTLENBQUMsQ0FBRCxDQUFULEtBQWlCRSxTQUF6QyxHQUFxREYsU0FBUyxDQUFDLENBQUQsQ0FBOUQsR0FBb0UsRUFBdkY7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SyxFQUEwTCxVQUExTCxFQUFzTUcsV0FBdE0sQ0FBUDtBQUNEO0FBTEksR0FBUDtBQU9EIiwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMudG9IYXZlVGV4dENvbnRlbnQgPSB0b0hhdmVUZXh0Q29udGVudDtcblxudmFyIF9qZXN0TWF0Y2hlclV0aWxzID0gcmVxdWlyZShcImplc3QtbWF0Y2hlci11dGlsc1wiKTtcblxudmFyIF9yYW1kYSA9IHJlcXVpcmUoXCJyYW1kYVwiKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuXG5mdW5jdGlvbiBnZXRUZXh0KGNoaWxkKSB7XG4gIHZhciBjdXJyZW50VmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICcnO1xuICB2YXIgdmFsdWUgPSBjdXJyZW50VmFsdWU7XG5cbiAgaWYgKCFjaGlsZCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGNoaWxkKSkge1xuICAgIHJldHVybiBjaGlsZC5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgZWxlbWVudCkge1xuICAgICAgcmV0dXJuIGFjYyArIGdldFRleHQoKDAsIF9yYW1kYS5wYXRoKShbJ3Byb3BzJywgJ2NoaWxkcmVuJ10sIGVsZW1lbnQpKTtcbiAgICB9LCAnJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGNoaWxkID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBnZXRUZXh0KCgwLCBfcmFtZGEucGF0aCkoWydwcm9wcycsICdjaGlsZHJlbiddLCBjaGlsZCksIHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJcIiArIHZhbHVlICsgY2hpbGQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gdG9IYXZlVGV4dENvbnRlbnQoZWxlbWVudCwgY2hlY2tXaXRoKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgKDAsIF91dGlscy5jaGVja1JlYWN0RWxlbWVudCkoZWxlbWVudCwgdG9IYXZlVGV4dENvbnRlbnQsIHRoaXMpO1xuICB2YXIgdGV4dENvbnRlbnQgPSAoMCwgX3JhbWRhLmNvbXBvc2UpKF91dGlscy5ub3JtYWxpemUsICgwLCBfcmFtZGEuam9pbikoJycpLCAoMCwgX3JhbWRhLmZpbHRlcikoZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBjaGlsZCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGNoaWxkID09PSAnbnVtYmVyJztcbiAgfSksICgwLCBfcmFtZGEubWFwKShmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXR1cm4gdHlwZW9mIGNoaWxkID09PSAnb2JqZWN0JyA/IGdldFRleHQoY2hpbGQpIDogY2hpbGQ7XG4gIH0pLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXR1cm4gKDAsIF9yYW1kYS5pcykoQXJyYXksIGNoaWxkKSA/IGNoaWxkIDogW2NoaWxkXTtcbiAgfSwgKDAsIF9yYW1kYS5kZWZhdWx0VG8pKFtdKSwgKDAsIF9yYW1kYS5wYXRoKShbJ3Byb3BzJywgJ2NoaWxkcmVuJ10pKShlbGVtZW50KTtcbiAgcmV0dXJuIHtcbiAgICBwYXNzOiAoMCwgX3V0aWxzLm1hdGNoZXMpKHRleHRDb250ZW50LCBjaGVja1dpdGgpLFxuICAgIG1lc3NhZ2U6IGZ1bmN0aW9uIG1lc3NhZ2UoKSB7XG4gICAgICB2YXIgdG8gPSBfdGhpcy5pc05vdCA/ICdub3QgdG8nIDogJ3RvJztcbiAgICAgIHJldHVybiAoMCwgX3V0aWxzLmdldE1lc3NhZ2UpKCgwLCBfamVzdE1hdGNoZXJVdGlscy5tYXRjaGVySGludCkoKF90aGlzLmlzTm90ID8gJy5ub3QnIDogJycpICsgXCIudG9IYXZlVGV4dENvbnRlbnRcIiwgJ2VsZW1lbnQnLCAnJyksIFwiRXhwZWN0ZWQgZWxlbWVudCBcIiArIHRvICsgXCIgaGF2ZSB0ZXh0IGNvbnRlbnRcIiwgY2hlY2tXaXRoLCAnUmVjZWl2ZWQnLCB0ZXh0Q29udGVudCk7XG4gICAgfVxuICB9O1xufSJdfQ==
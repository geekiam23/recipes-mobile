{"version":3,"sources":["useDescriptors.tsx"],"names":["emitter","React","onOptionsChange","NavigationBuilderContext","context","navigation","onAction","addListener","addKeyedListener","onRouteFocus","onDispatchAction","navigations","state","getState","setOptions","router","routes","screen","screens","route","routeOptions","screenOptions","options","acc","render"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport SceneView from './SceneView';\nimport NavigationBuilderContext, {\n  AddListener,\n  AddKeyedListener,\n} from './NavigationBuilderContext';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport useNavigationCache from './useNavigationCache';\nimport useRouteCache from './useRouteCache';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport type {\n  Descriptor,\n  NavigationHelpers,\n  RouteConfig,\n  RouteProp,\n  EventMapBase,\n} from './types';\n\ntype Options<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  state: State;\n  screens: Record<\n    string,\n    RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>\n  >;\n  navigation: NavigationHelpers<ParamListBase>;\n  screenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase, string>;\n        navigation: any;\n      }) => ScreenOptions);\n  onAction: (\n    action: NavigationAction,\n    visitedNavigators?: Set<string>\n  ) => boolean;\n  getState: () => State;\n  setState: (state: State) => void;\n  addListener: AddListener;\n  addKeyedListener: AddKeyedListener;\n  onRouteFocus: (key: string) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<any>;\n};\n\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\nexport default function useDescriptors<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  onAction,\n  getState,\n  setState,\n  addListener,\n  addKeyedListener,\n  onRouteFocus,\n  router,\n  emitter,\n}: Options<State, ScreenOptions, EventMap>) {\n  const [options, setOptions] = React.useState<Record<string, object>>({});\n  const { onDispatchAction, onOptionsChange } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  const context = React.useMemo(\n    () => ({\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n    }),\n    [\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n    ]\n  );\n\n  const navigations = useNavigationCache<State, ScreenOptions>({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter,\n  });\n\n  const routes = useRouteCache(state.routes);\n\n  return routes.reduce<\n    Record<string, Descriptor<ParamListBase, string, State, ScreenOptions>>\n  >((acc, route, i) => {\n    const screen = screens[route.name];\n    const navigation = navigations[route.key];\n\n    const routeOptions = {\n      // The default `screenOptions` passed to the navigator\n      ...(typeof screenOptions === 'object' || screenOptions == null\n        ? screenOptions\n        : // @ts-expect-error: this is a function, but typescript doesn't think so\n          screenOptions({\n            route,\n            navigation,\n          })),\n      // The `options` prop passed to `Screen` elements\n      ...(typeof screen.options === 'object' || screen.options == null\n        ? screen.options\n        : // @ts-expect-error: this is a function, but typescript doesn't think so\n          screen.options({\n            route,\n            navigation,\n          })),\n      // The options set via `navigation.setOptions`\n      ...options[route.key],\n    };\n\n    acc[route.key] = {\n      navigation,\n      render() {\n        return (\n          <NavigationBuilderContext.Provider key={route.key} value={context}>\n            <NavigationContext.Provider value={navigation}>\n              <NavigationRouteContext.Provider value={route}>\n                <SceneView\n                  navigation={navigation}\n                  route={route}\n                  screen={screen}\n                  routeState={state.routes[i].state}\n                  getState={getState}\n                  setState={setState}\n                  options={routeOptions}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          </NavigationBuilderContext.Provider>\n        );\n      },\n      options: routeOptions as ScreenOptions,\n    };\n\n    return acc;\n  }, {});\n}\n"]}
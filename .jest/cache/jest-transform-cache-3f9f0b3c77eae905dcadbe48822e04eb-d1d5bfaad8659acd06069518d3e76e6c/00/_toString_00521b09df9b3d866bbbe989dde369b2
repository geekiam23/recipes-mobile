6948ce759ff3b018a35b525190185013
var _includes = require("./_includes");

var _map = require("./_map");

var _quote = require("./_quote");

var _toISOString = require("./_toISOString");

var keys = require("../keys");

var reject = require("../reject");

function _toString(x, seen) {
  var recur = function recur(y) {
    var xs = seen.concat([x]);
    return _includes(y, xs) ? '<Circular>' : _toString(y, xs);
  };

  var mapPairs = function mapPairs(obj, keys) {
    return _map(function (k) {
      return _quote(k) + ': ' + recur(obj[k]);
    }, keys.slice().sort());
  };

  switch (Object.prototype.toString.call(x)) {
    case '[object Arguments]':
      return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';

    case '[object Array]':
      return '[' + _map(recur, x).concat(mapPairs(x, reject(function (k) {
        return /^\d+$/.test(k);
      }, keys(x)))).join(', ') + ']';

    case '[object Boolean]':
      return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();

    case '[object Date]':
      return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString(x))) + ')';

    case '[object Null]':
      return 'null';

    case '[object Number]':
      return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);

    case '[object String]':
      return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);

    case '[object Undefined]':
      return 'undefined';

    default:
      if (typeof x.toString === 'function') {
        var repr = x.toString();

        if (repr !== '[object Object]') {
          return repr;
        }
      }

      return '{' + mapPairs(x, keys(x)).join(', ') + '}';
  }
}

module.exports = _toString;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl90b1N0cmluZy5qcyJdLCJuYW1lcyI6WyJfaW5jbHVkZXMiLCJyZXF1aXJlIiwiX21hcCIsIl9xdW90ZSIsIl90b0lTT1N0cmluZyIsImtleXMiLCJyZWplY3QiLCJfdG9TdHJpbmciLCJ4Iiwic2VlbiIsInJlY3VyIiwieSIsInhzIiwiY29uY2F0IiwibWFwUGFpcnMiLCJvYmoiLCJrIiwic2xpY2UiLCJzb3J0IiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwiam9pbiIsInRlc3QiLCJ2YWx1ZU9mIiwiaXNOYU4iLCJOYU4iLCJJbmZpbml0eSIsInJlcHIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxTQUFTLEdBQWdCQyxPQUFPLGVBQXBDOztBQUVBLElBQUlDLElBQUksR0FBZ0JELE9BQU8sVUFBL0I7O0FBRUEsSUFBSUUsTUFBTSxHQUFnQkYsT0FBTyxZQUFqQzs7QUFFQSxJQUFJRyxZQUFZLEdBQWdCSCxPQUFPLGtCQUF2Qzs7QUFFQSxJQUFJSSxJQUFJLEdBQWdCSixPQUFPLFdBQS9COztBQUVBLElBQUlLLE1BQU0sR0FBZ0JMLE9BQU8sYUFBakM7O0FBRUEsU0FBU00sU0FBVCxDQUFtQkMsQ0FBbkIsRUFBc0JDLElBQXRCLEVBQTRCO0FBQzFCLE1BQUlDLEtBQUssR0FBRyxTQUFTQSxLQUFULENBQWVDLENBQWYsRUFBa0I7QUFDNUIsUUFBSUMsRUFBRSxHQUFHSCxJQUFJLENBQUNJLE1BQUwsQ0FBWSxDQUFDTCxDQUFELENBQVosQ0FBVDtBQUNBLFdBQU9SLFNBQVMsQ0FBQ1csQ0FBRCxFQUFJQyxFQUFKLENBQVQsR0FBbUIsWUFBbkIsR0FBa0NMLFNBQVMsQ0FBQ0ksQ0FBRCxFQUFJQyxFQUFKLENBQWxEO0FBQ0QsR0FIRDs7QUFNQSxNQUFJRSxRQUFRLEdBQUcsU0FBWEEsUUFBVyxDQUFVQyxHQUFWLEVBQWVWLElBQWYsRUFBcUI7QUFDbEMsV0FBT0gsSUFBSSxDQUFDLFVBQVVjLENBQVYsRUFBYTtBQUN2QixhQUFPYixNQUFNLENBQUNhLENBQUQsQ0FBTixHQUFZLElBQVosR0FBbUJOLEtBQUssQ0FBQ0ssR0FBRyxDQUFDQyxDQUFELENBQUosQ0FBL0I7QUFDRCxLQUZVLEVBRVJYLElBQUksQ0FBQ1ksS0FBTCxHQUFhQyxJQUFiLEVBRlEsQ0FBWDtBQUdELEdBSkQ7O0FBTUEsVUFBUUMsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JkLENBQS9CLENBQVI7QUFDRSxTQUFLLG9CQUFMO0FBQ0UsYUFBTyx1Q0FBdUNOLElBQUksQ0FBQ1EsS0FBRCxFQUFRRixDQUFSLENBQUosQ0FBZWUsSUFBZixDQUFvQixJQUFwQixDQUF2QyxHQUFtRSxJQUExRTs7QUFDRixTQUFLLGdCQUFMO0FBQ0UsYUFBTyxNQUFNckIsSUFBSSxDQUFDUSxLQUFELEVBQVFGLENBQVIsQ0FBSixDQUFlSyxNQUFmLENBQXNCQyxRQUFRLENBQUNOLENBQUQsRUFBSUYsTUFBTSxDQUFDLFVBQVVVLENBQVYsRUFBYTtBQUNqRSxlQUFRLFFBQVFRLElBQVIsQ0FBYVIsQ0FBYixDQUFSO0FBRUQsT0FIb0QsRUFHbERYLElBQUksQ0FBQ0csQ0FBRCxDQUg4QyxDQUFWLENBQTlCLEVBR0NlLElBSEQsQ0FHTSxJQUhOLENBQU4sR0FHb0IsR0FIM0I7O0FBSUYsU0FBSyxrQkFBTDtBQUNFLGFBQU8sT0FBT2YsQ0FBUCxLQUFhLFFBQWIsR0FBd0IsaUJBQWlCRSxLQUFLLENBQUNGLENBQUMsQ0FBQ2lCLE9BQUYsRUFBRCxDQUF0QixHQUFzQyxHQUE5RCxHQUFvRWpCLENBQUMsQ0FBQ2EsUUFBRixFQUEzRTs7QUFDRixTQUFLLGVBQUw7QUFDRSxhQUFPLGVBQWVLLEtBQUssQ0FBQ2xCLENBQUMsQ0FBQ2lCLE9BQUYsRUFBRCxDQUFMLEdBQXFCZixLQUFLLENBQUNpQixHQUFELENBQTFCLEdBQWtDeEIsTUFBTSxDQUFDQyxZQUFZLENBQUNJLENBQUQsQ0FBYixDQUF2RCxJQUE0RSxHQUFuRjs7QUFDRixTQUFLLGVBQUw7QUFDRSxhQUFPLE1BQVA7O0FBQ0YsU0FBSyxpQkFBTDtBQUNFLGFBQU8sT0FBT0EsQ0FBUCxLQUFhLFFBQWIsR0FBd0IsZ0JBQWdCRSxLQUFLLENBQUNGLENBQUMsQ0FBQ2lCLE9BQUYsRUFBRCxDQUFyQixHQUFxQyxHQUE3RCxHQUFtRSxJQUFJakIsQ0FBSixLQUFVLENBQUNvQixRQUFYLEdBQXNCLElBQXRCLEdBQTZCcEIsQ0FBQyxDQUFDYSxRQUFGLENBQVcsRUFBWCxDQUF2Rzs7QUFDRixTQUFLLGlCQUFMO0FBQ0UsYUFBTyxPQUFPYixDQUFQLEtBQWEsUUFBYixHQUF3QixnQkFBZ0JFLEtBQUssQ0FBQ0YsQ0FBQyxDQUFDaUIsT0FBRixFQUFELENBQXJCLEdBQXFDLEdBQTdELEdBQW1FdEIsTUFBTSxDQUFDSyxDQUFELENBQWhGOztBQUNGLFNBQUssb0JBQUw7QUFDRSxhQUFPLFdBQVA7O0FBQ0Y7QUFDRSxVQUFJLE9BQU9BLENBQUMsQ0FBQ2EsUUFBVCxLQUFzQixVQUExQixFQUFzQztBQUNwQyxZQUFJUSxJQUFJLEdBQUdyQixDQUFDLENBQUNhLFFBQUYsRUFBWDs7QUFDQSxZQUFJUSxJQUFJLEtBQUssaUJBQWIsRUFBZ0M7QUFDOUIsaUJBQU9BLElBQVA7QUFDRDtBQUNGOztBQUNELGFBQU8sTUFBTWYsUUFBUSxDQUFDTixDQUFELEVBQUlILElBQUksQ0FBQ0csQ0FBRCxDQUFSLENBQVIsQ0FBcUJlLElBQXJCLENBQTBCLElBQTFCLENBQU4sR0FBd0MsR0FBL0M7QUEzQko7QUE2QkQ7O0FBQ0RPLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnhCLFNBQWpCIiwic291cmNlc0NvbnRlbnQiOlsidmFyIF9pbmNsdWRlcyA9IC8qI19fUFVSRV9fKi9yZXF1aXJlKCcuL19pbmNsdWRlcycpO1xuXG52YXIgX21hcCA9IC8qI19fUFVSRV9fKi9yZXF1aXJlKCcuL19tYXAnKTtcblxudmFyIF9xdW90ZSA9IC8qI19fUFVSRV9fKi9yZXF1aXJlKCcuL19xdW90ZScpO1xuXG52YXIgX3RvSVNPU3RyaW5nID0gLyojX19QVVJFX18qL3JlcXVpcmUoJy4vX3RvSVNPU3RyaW5nJyk7XG5cbnZhciBrZXlzID0gLyojX19QVVJFX18qL3JlcXVpcmUoJy4uL2tleXMnKTtcblxudmFyIHJlamVjdCA9IC8qI19fUFVSRV9fKi9yZXF1aXJlKCcuLi9yZWplY3QnKTtcblxuZnVuY3Rpb24gX3RvU3RyaW5nKHgsIHNlZW4pIHtcbiAgdmFyIHJlY3VyID0gZnVuY3Rpb24gcmVjdXIoeSkge1xuICAgIHZhciB4cyA9IHNlZW4uY29uY2F0KFt4XSk7XG4gICAgcmV0dXJuIF9pbmNsdWRlcyh5LCB4cykgPyAnPENpcmN1bGFyPicgOiBfdG9TdHJpbmcoeSwgeHMpO1xuICB9O1xuXG4gIC8vICBtYXBQYWlycyA6OiAoT2JqZWN0LCBbU3RyaW5nXSkgLT4gW1N0cmluZ11cbiAgdmFyIG1hcFBhaXJzID0gZnVuY3Rpb24gKG9iaiwga2V5cykge1xuICAgIHJldHVybiBfbWFwKGZ1bmN0aW9uIChrKSB7XG4gICAgICByZXR1cm4gX3F1b3RlKGspICsgJzogJyArIHJlY3VyKG9ialtrXSk7XG4gICAgfSwga2V5cy5zbGljZSgpLnNvcnQoKSk7XG4gIH07XG5cbiAgc3dpdGNoIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoeCkpIHtcbiAgICBjYXNlICdbb2JqZWN0IEFyZ3VtZW50c10nOlxuICAgICAgcmV0dXJuICcoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oJyArIF9tYXAocmVjdXIsIHgpLmpvaW4oJywgJykgKyAnKSknO1xuICAgIGNhc2UgJ1tvYmplY3QgQXJyYXldJzpcbiAgICAgIHJldHVybiAnWycgKyBfbWFwKHJlY3VyLCB4KS5jb25jYXQobWFwUGFpcnMoeCwgcmVqZWN0KGZ1bmN0aW9uIChrKSB7XG4gICAgICAgIHJldHVybiAoL15cXGQrJC8udGVzdChrKVxuICAgICAgICApO1xuICAgICAgfSwga2V5cyh4KSkpKS5qb2luKCcsICcpICsgJ10nO1xuICAgIGNhc2UgJ1tvYmplY3QgQm9vbGVhbl0nOlxuICAgICAgcmV0dXJuIHR5cGVvZiB4ID09PSAnb2JqZWN0JyA/ICduZXcgQm9vbGVhbignICsgcmVjdXIoeC52YWx1ZU9mKCkpICsgJyknIDogeC50b1N0cmluZygpO1xuICAgIGNhc2UgJ1tvYmplY3QgRGF0ZV0nOlxuICAgICAgcmV0dXJuICduZXcgRGF0ZSgnICsgKGlzTmFOKHgudmFsdWVPZigpKSA/IHJlY3VyKE5hTikgOiBfcXVvdGUoX3RvSVNPU3RyaW5nKHgpKSkgKyAnKSc7XG4gICAgY2FzZSAnW29iamVjdCBOdWxsXSc6XG4gICAgICByZXR1cm4gJ251bGwnO1xuICAgIGNhc2UgJ1tvYmplY3QgTnVtYmVyXSc6XG4gICAgICByZXR1cm4gdHlwZW9mIHggPT09ICdvYmplY3QnID8gJ25ldyBOdW1iZXIoJyArIHJlY3VyKHgudmFsdWVPZigpKSArICcpJyA6IDEgLyB4ID09PSAtSW5maW5pdHkgPyAnLTAnIDogeC50b1N0cmluZygxMCk7XG4gICAgY2FzZSAnW29iamVjdCBTdHJpbmddJzpcbiAgICAgIHJldHVybiB0eXBlb2YgeCA9PT0gJ29iamVjdCcgPyAnbmV3IFN0cmluZygnICsgcmVjdXIoeC52YWx1ZU9mKCkpICsgJyknIDogX3F1b3RlKHgpO1xuICAgIGNhc2UgJ1tvYmplY3QgVW5kZWZpbmVkXSc6XG4gICAgICByZXR1cm4gJ3VuZGVmaW5lZCc7XG4gICAgZGVmYXVsdDpcbiAgICAgIGlmICh0eXBlb2YgeC50b1N0cmluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgcmVwciA9IHgudG9TdHJpbmcoKTtcbiAgICAgICAgaWYgKHJlcHIgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgICAgICAgcmV0dXJuIHJlcHI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAneycgKyBtYXBQYWlycyh4LCBrZXlzKHgpKS5qb2luKCcsICcpICsgJ30nO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IF90b1N0cmluZzsiXX0=
{"version":3,"sources":["createStackNavigator.tsx"],"names":["rest","defaultOptions","gestureEnabled","Platform","animationEnabled","navigation","StackRouter","initialRouteName","children","screenOptions","React","e","isFocused","requestAnimationFrame","state","StackActions","target","key"],"mappings":";;;;;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;;AAYA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,4BAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA,SAAA,cAAA,OAKU;AAAA,MALc,gBAKd,QALc,gBAKd;AAAA,MALc,QAKd,QALc,QAKd;AAAA,MALc,aAKd,QALc,aAKd;AAAA,MADLA,IACK;AACR,MAAMC,cAAc,GAAG;AACrBC,IAAAA,cAAc,EAAEC,YAAAA,CAAAA,QAAAA,CAAAA,EAAAA,KADK,KAAA;AAErBC,IAAAA,gBAAgB,EACdD,YAAAA,CAAAA,QAAAA,CAAAA,EAAAA,KAAAA,KAAAA,IACAA,YAAAA,CAAAA,QAAAA,CAAAA,EAAAA,KADAA,SAAAA,IAEAA,YAAAA,CAAAA,QAAAA,CAAAA,EAAAA,KAAgB;AALG,GAAvB;;AAQA,cAA2C,CAAA,GAAA,OAAA,CAAA,oBAAA,EAMzCG,OAAAA,CANyC,WAAA,EAM5B;AACbC,IAAAA,gBADa,EACbA,gBADa;AAEbC,IAAAA,QAFa,EAEbA,QAFa;AAGbC,IAAAA,aAAa,EACX,OAAA,aAAA,KAAA,UAAA,GACI;AAAA,wCAAc,cAAd,EAEKA,aAAa,MAAbA,mBAFL;AAAA,KADJ,8BAKI,cALJ,EAOSA,aAPT;AAJW,GAN4B,CAA3C;AAAA,MAAM,KAAN,SAAM,KAAN;AAAA,MAAM,WAAN,SAAM,WAAN;AAAA,MAA4BJ,UAA5B,SAA4BA,UAA5B;;AAqBAK,EAAAA,KAAK,CAALA,SAAAA,CACE,YAAA;AAAA,QAAA,qBAAA;;AAAA,WAAA,CAAA,qBAAA,GACEL,UAAU,CADZ,WAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GACEA,qBAAAA,CAAAA,IAAAA,CAAAA,UAAAA,EAAU,UAAVA,EAAsCM,UAAAA,CAAD,EAAO;AAC1C,UAAMC,SAAS,GAAGP,UAAU,CADc,SACxBA,EAAlB;AAIAQ,MAAAA,qBAAqB,CAAC,YAAM;AAC1B,YACEC,KAAK,CAALA,KAAAA,GAAAA,CAAAA,IAAAA,SAAAA,IAEA,CAAEH,CAAD,CAHH,gBAAA,EAIE;AAGAN,UAAAA,UAAU,CAAVA,QAAAA,4BACKU,OAAAA,CAAAA,YAAAA,CADe,QACfA,EADLV;AAEEW,YAAAA,MAAM,EAAEF,KAAK,CAACG;AAFhBZ;AAID;AAZHQ,OAAqB,CAArBA;AANJ,KACER,CADF;AADFK,GAAAA,EAsBE,CAAA,UAAA,EAAaI,KAAK,CAAlB,KAAA,EAA0BA,KAAK,CAtBjCJ,GAsBE,CAtBFA;AAyBA,SACE,KAAA,CAAA,aAAA,CAAC,UAAA,CAAD,OAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,IAAA,KAAK,EAFP,KAAA;AAGE,IAAA,WAAW,EAHb,WAAA;AAIE,IAAA,UAAU,EAAEL;AAJd,GAAA,CAAA,CADF;AAQD;;eAEc,CAAA,GAAA,OAAA,CAAA,sBAAA,EAAA,cAAA,C","sourcesContent":["import * as React from 'react';\nimport { Platform } from 'react-native';\nimport {\n  useNavigationBuilder,\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  EventArg,\n  StackRouter,\n  StackRouterOptions,\n  StackNavigationState,\n  StackActions,\n  ParamListBase,\n  StackActionHelpers,\n} from '@react-navigation/native';\nimport StackView from '../views/Stack/StackView';\nimport type {\n  StackNavigationConfig,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n} from '../types';\n\ntype Props = DefaultNavigatorOptions<StackNavigationOptions> &\n  StackRouterOptions &\n  StackNavigationConfig;\n\nfunction StackNavigator({\n  initialRouteName,\n  children,\n  screenOptions,\n  ...rest\n}: Props) {\n  const defaultOptions = {\n    gestureEnabled: Platform.OS === 'ios',\n    animationEnabled:\n      Platform.OS !== 'web' &&\n      Platform.OS !== 'windows' &&\n      Platform.OS !== 'macos',\n  };\n\n  const { state, descriptors, navigation } = useNavigationBuilder<\n    StackNavigationState<ParamListBase>,\n    StackRouterOptions,\n    StackActionHelpers<ParamListBase>,\n    StackNavigationOptions,\n    StackNavigationEventMap\n  >(StackRouter, {\n    initialRouteName,\n    children,\n    screenOptions:\n      typeof screenOptions === 'function'\n        ? (...args) => ({\n            ...defaultOptions,\n            ...screenOptions(...args),\n          })\n        : {\n            ...defaultOptions,\n            ...screenOptions,\n          },\n  });\n\n  React.useEffect(\n    () =>\n      navigation.addListener?.('tabPress', (e) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <StackView\n      {...rest}\n      state={state}\n      descriptors={descriptors}\n      navigation={navigation}\n    />\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState<ParamListBase>,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n  typeof StackNavigator\n>(StackNavigator);\n"]}
69bd79045bb07876d8dede1649db52b0
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.getStringDiff = exports.printMultilineStringDiffs = exports.createPatchMark = exports.printAnnotation = exports.hasCommonDiff = exports.computeStringDiffs = exports.printCommonLine = exports.printInsertLine = exports.printDeleteLine = exports.MULTILINE_REGEXP = exports.getReceivedString = exports.getExpectedString = exports.getHighlightedString = exports.RECEIVED_COLOR = exports.INVERTED_COLOR = exports.EXPECTED_COLOR = exports.DIM_COLOR = void 0;

var _chalk = _interopRequireDefault(require('chalk'));

var _cleanupSemantic = require("./cleanupSemantic");

var _diffStrings = _interopRequireDefault(require("./diffStrings"));

var _getAlignedDiffs = _interopRequireDefault(require("./getAlignedDiffs"));

var _joinAlignedDiffs = require("./joinAlignedDiffs");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var DIM_COLOR = _chalk.default.dim;
exports.DIM_COLOR = DIM_COLOR;
var EXPECTED_COLOR = _chalk.default.green;
exports.EXPECTED_COLOR = EXPECTED_COLOR;
var INVERTED_COLOR = _chalk.default.inverse;
exports.INVERTED_COLOR = INVERTED_COLOR;
var RECEIVED_COLOR = _chalk.default.red;
exports.RECEIVED_COLOR = RECEIVED_COLOR;
var PATCH_COLOR = _chalk.default.yellow;

var getHighlightedString = function getHighlightedString(op, diffs) {
  return diffs.reduce(function (reduced, diff) {
    return reduced + (diff[0] === _cleanupSemantic.DIFF_EQUAL ? diff[1] : diff[0] === op ? INVERTED_COLOR(diff[1]) : '');
  }, '');
};

exports.getHighlightedString = getHighlightedString;

var getExpectedString = function getExpectedString(diffs) {
  return getHighlightedString(_cleanupSemantic.DIFF_DELETE, diffs);
};

exports.getExpectedString = getExpectedString;

var getReceivedString = function getReceivedString(diffs) {
  return getHighlightedString(_cleanupSemantic.DIFF_INSERT, diffs);
};

exports.getReceivedString = getReceivedString;
var MULTILINE_REGEXP = /\n/;
exports.MULTILINE_REGEXP = MULTILINE_REGEXP;
var NEWLINE_SYMBOL = "\u21B5";
var SPACE_SYMBOL = "\xB7";

var replaceSpacesAtEnd = function replaceSpacesAtEnd(line) {
  return line.replace(/\s+$/, function (spaces) {
    return SPACE_SYMBOL.repeat(spaces.length);
  });
};

var printDeleteLine = function printDeleteLine(line) {
  return EXPECTED_COLOR(line.length !== 0 ? '- ' + replaceSpacesAtEnd(line) : '-');
};

exports.printDeleteLine = printDeleteLine;

var printInsertLine = function printInsertLine(line) {
  return RECEIVED_COLOR(line.length !== 0 ? '+ ' + replaceSpacesAtEnd(line) : '+');
};

exports.printInsertLine = printInsertLine;

var printCommonLine = function printCommonLine(line) {
  var isFirstOrLast = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  return line.length !== 0 ? DIM_COLOR('  ' + replaceSpacesAtEnd(line)) : isFirstOrLast ? DIM_COLOR('  ' + NEWLINE_SYMBOL) : '';
};

exports.printCommonLine = printCommonLine;

var computeStringDiffs = function computeStringDiffs(expected, received) {
  var isMultiline = MULTILINE_REGEXP.test(expected) || MULTILINE_REGEXP.test(received);

  if (isMultiline) {
    expected += '\n';
    received += '\n';
  }

  var diffs = (0, _diffStrings.default)(expected, received);
  (0, _cleanupSemantic.cleanupSemantic)(diffs);
  return {
    diffs: diffs,
    isMultiline: isMultiline
  };
};

exports.computeStringDiffs = computeStringDiffs;

var hasCommonDiff = function hasCommonDiff(diffs, isMultiline) {
  if (isMultiline) {
    var iLast = diffs.length - 1;
    return diffs.some(function (diff, i) {
      return diff[0] === _cleanupSemantic.DIFF_EQUAL && (i !== iLast || diff[1] !== '\n');
    });
  }

  return diffs.some(function (diff) {
    return diff[0] === _cleanupSemantic.DIFF_EQUAL;
  });
};

exports.hasCommonDiff = hasCommonDiff;

var printAnnotation = function printAnnotation(options) {
  return EXPECTED_COLOR('- ' + (options && options.aAnnotation || 'Expected')) + '\n' + RECEIVED_COLOR('+ ' + (options && options.bAnnotation || 'Received')) + '\n\n';
};

exports.printAnnotation = printAnnotation;

var createPatchMark = function createPatchMark(aStart, aEnd, bStart, bEnd) {
  return PATCH_COLOR("@@ -" + (aStart + 1) + "," + (aEnd - aStart) + " +" + (bStart + 1) + "," + (bEnd - bStart) + " @@");
};

exports.createPatchMark = createPatchMark;

var printMultilineStringDiffs = function printMultilineStringDiffs(diffs, expand) {
  var lines = (0, _getAlignedDiffs.default)(diffs);
  return expand ? (0, _joinAlignedDiffs.joinAlignedDiffsExpand)(lines) : (0, _joinAlignedDiffs.joinAlignedDiffsNoExpand)(lines);
};

exports.printMultilineStringDiffs = printMultilineStringDiffs;
var MAX_DIFF_STRING_LENGTH = 20000;

var getStringDiff = function getStringDiff(expected, received, options) {
  if (expected === received || expected.length === 0 || received.length === 0 || expected.length > MAX_DIFF_STRING_LENGTH || received.length > MAX_DIFF_STRING_LENGTH) {
    return null;
  }

  var _computeStringDiffs = computeStringDiffs(expected, received),
      diffs = _computeStringDiffs.diffs,
      isMultiline = _computeStringDiffs.isMultiline;

  if (!hasCommonDiff(diffs, isMultiline)) {
    return null;
  }

  return isMultiline ? {
    annotatedDiff: printAnnotation(options) + printMultilineStringDiffs(diffs, options === undefined || options.expand !== false),
    isMultiline: isMultiline
  } : {
    a: getExpectedString(diffs),
    b: getReceivedString(diffs),
    isMultiline: isMultiline
  };
};

exports.getStringDiff = getStringDiff;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
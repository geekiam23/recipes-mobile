{"version":3,"sources":["index.js"],"names":["back","require","emitter","activate","isActive","isDone","isOn","pendingMocks","activeMocks","removeInterceptor","disableNetConnect","enableNetConnect","removeAll","abortPendingRequests","recorder","Scope","load","loadDefs","define","module","exports","basePath","options","cleanAll","rec","record","clear","play","outputs","restore","setMode","process","env","NOCK_BACK_MODE"],"mappings":"AAAA;;;;;;AAEA,IAAMA,IAAI,GAAGC,OAAO,cAApB;;AACA,IAAMC,OAAO,GAAGD,OAAO,wBAAvB;;AACA,eAYIA,OAAO,mBAZX;AAAA,IACEE,QADF,YACEA,QADF;AAAA,IAEEC,QAFF,YAEEA,QAFF;AAAA,IAGEC,MAHF,YAGEA,MAHF;AAAA,IAIEC,IAJF,YAIEA,IAJF;AAAA,IAKEC,YALF,YAKEA,YALF;AAAA,IAMEC,WANF,YAMEA,WANF;AAAA,IAOEC,iBAPF,YAOEA,iBAPF;AAAA,IAQEC,iBARF,YAQEA,iBARF;AAAA,IASEC,gBATF,YASEA,gBATF;AAAA,IAUEC,SAVF,YAUEA,SAVF;AAAA,IAWEC,oBAXF,YAWEA,oBAXF;;AAaA,IAAMC,QAAQ,GAAGb,OAAO,kBAAxB;;AACA,gBAA0CA,OAAO,eAAjD;AAAA,IAAQc,KAAR,aAAQA,KAAR;AAAA,IAAeC,IAAf,aAAeA,IAAf;AAAA,IAAqBC,QAArB,aAAqBA,QAArB;AAAA,IAA+BC,MAA/B,aAA+BA,MAA/B;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAACC,QAAD,EAAWC,OAAX;AAAA,SAAuB,IAAIP,KAAJ,CAAUM,QAAV,EAAoBC,OAApB,CAAvB;AAAA,CAAjB;;AAEA,uBAAcH,MAAM,CAACC,OAArB,EAA8B;AAC5BjB,EAAAA,QAAQ,EAARA,QAD4B;AAE5BC,EAAAA,QAAQ,EAARA,QAF4B;AAG5BC,EAAAA,MAAM,EAANA,MAH4B;AAI5BE,EAAAA,YAAY,EAAZA,YAJ4B;AAK5BC,EAAAA,WAAW,EAAXA,WAL4B;AAM5BC,EAAAA,iBAAiB,EAAjBA,iBAN4B;AAO5BC,EAAAA,iBAAiB,EAAjBA,iBAP4B;AAQ5BC,EAAAA,gBAAgB,EAAhBA,gBAR4B;AAS5BY,EAAAA,QAAQ,EAAEX,SATkB;AAU5BC,EAAAA,oBAAoB,EAApBA,oBAV4B;AAW5BG,EAAAA,IAAI,EAAJA,IAX4B;AAY5BC,EAAAA,QAAQ,EAARA,QAZ4B;AAa5BC,EAAAA,MAAM,EAANA,MAb4B;AAc5BhB,EAAAA,OAAO,EAAPA,OAd4B;AAe5BY,EAAAA,QAAQ,EAAE;AACRU,IAAAA,GAAG,EAAEV,QAAQ,CAACW,MADN;AAERC,IAAAA,KAAK,EAAEZ,QAAQ,CAACY,KAFR;AAGRC,IAAAA,IAAI,EAAEb,QAAQ,CAACc;AAHP,GAfkB;AAoB5BC,EAAAA,OAAO,EAAEf,QAAQ,CAACe,OApBU;AAqB5B7B,EAAAA,IAAI,EAAJA;AArB4B,CAA9B;;AA4BA,IAAIM,IAAI,EAAR,EAAY;AACVN,EAAAA,IAAI,CAAC8B,OAAL,CAAaC,OAAO,CAACC,GAAR,CAAYC,cAAZ,IAA8B,QAA3C;AACD","sourcesContent":["'use strict'\n\nconst back = require('./lib/back')\nconst emitter = require('./lib/global_emitter')\nconst {\n  activate,\n  isActive,\n  isDone,\n  isOn,\n  pendingMocks,\n  activeMocks,\n  removeInterceptor,\n  disableNetConnect,\n  enableNetConnect,\n  removeAll,\n  abortPendingRequests,\n} = require('./lib/intercept')\nconst recorder = require('./lib/recorder')\nconst { Scope, load, loadDefs, define } = require('./lib/scope')\n\nmodule.exports = (basePath, options) => new Scope(basePath, options)\n\nObject.assign(module.exports, {\n  activate,\n  isActive,\n  isDone,\n  pendingMocks,\n  activeMocks,\n  removeInterceptor,\n  disableNetConnect,\n  enableNetConnect,\n  cleanAll: removeAll,\n  abortPendingRequests,\n  load,\n  loadDefs,\n  define,\n  emitter,\n  recorder: {\n    rec: recorder.record,\n    clear: recorder.clear,\n    play: recorder.outputs,\n  },\n  restore: recorder.restore,\n  back,\n})\n\n// We always activate Nock on import, overriding the globals.\n// Setting the Back mode \"activates\" Nock by overriding the global entries in the `http/s` modules.\n// If Nock Back is configured, we need to honor that setting for backward compatibility,\n// otherwise we rely on Nock Back's default initializing side effect.\nif (isOn()) {\n  back.setMode(process.env.NOCK_BACK_MODE || 'dryrun')\n}\n"]}
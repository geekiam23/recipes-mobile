cb9c45fdc11870ea3530af7699c6dc41
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var back = require("./lib/back");

var emitter = require("./lib/global_emitter");

var _require = require("./lib/intercept"),
    activate = _require.activate,
    isActive = _require.isActive,
    isDone = _require.isDone,
    isOn = _require.isOn,
    pendingMocks = _require.pendingMocks,
    activeMocks = _require.activeMocks,
    removeInterceptor = _require.removeInterceptor,
    disableNetConnect = _require.disableNetConnect,
    enableNetConnect = _require.enableNetConnect,
    removeAll = _require.removeAll,
    abortPendingRequests = _require.abortPendingRequests;

var recorder = require("./lib/recorder");

var _require2 = require("./lib/scope"),
    Scope = _require2.Scope,
    load = _require2.load,
    loadDefs = _require2.loadDefs,
    define = _require2.define;

module.exports = function (basePath, options) {
  return new Scope(basePath, options);
};

(0, _extends2.default)(module.exports, {
  activate: activate,
  isActive: isActive,
  isDone: isDone,
  pendingMocks: pendingMocks,
  activeMocks: activeMocks,
  removeInterceptor: removeInterceptor,
  disableNetConnect: disableNetConnect,
  enableNetConnect: enableNetConnect,
  cleanAll: removeAll,
  abortPendingRequests: abortPendingRequests,
  load: load,
  loadDefs: loadDefs,
  define: define,
  emitter: emitter,
  recorder: {
    rec: recorder.record,
    clear: recorder.clear,
    play: recorder.outputs
  },
  restore: recorder.restore,
  back: back
});

if (isOn()) {
  back.setMode(process.env.NOCK_BACK_MODE || 'dryrun');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImJhY2siLCJyZXF1aXJlIiwiZW1pdHRlciIsImFjdGl2YXRlIiwiaXNBY3RpdmUiLCJpc0RvbmUiLCJpc09uIiwicGVuZGluZ01vY2tzIiwiYWN0aXZlTW9ja3MiLCJyZW1vdmVJbnRlcmNlcHRvciIsImRpc2FibGVOZXRDb25uZWN0IiwiZW5hYmxlTmV0Q29ubmVjdCIsInJlbW92ZUFsbCIsImFib3J0UGVuZGluZ1JlcXVlc3RzIiwicmVjb3JkZXIiLCJTY29wZSIsImxvYWQiLCJsb2FkRGVmcyIsImRlZmluZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJiYXNlUGF0aCIsIm9wdGlvbnMiLCJjbGVhbkFsbCIsInJlYyIsInJlY29yZCIsImNsZWFyIiwicGxheSIsIm91dHB1dHMiLCJyZXN0b3JlIiwic2V0TW9kZSIsInByb2Nlc3MiLCJlbnYiLCJOT0NLX0JBQ0tfTU9ERSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUVBLElBQU1BLElBQUksR0FBR0MsT0FBTyxjQUFwQjs7QUFDQSxJQUFNQyxPQUFPLEdBQUdELE9BQU8sd0JBQXZCOztBQUNBLGVBWUlBLE9BQU8sbUJBWlg7QUFBQSxJQUNFRSxRQURGLFlBQ0VBLFFBREY7QUFBQSxJQUVFQyxRQUZGLFlBRUVBLFFBRkY7QUFBQSxJQUdFQyxNQUhGLFlBR0VBLE1BSEY7QUFBQSxJQUlFQyxJQUpGLFlBSUVBLElBSkY7QUFBQSxJQUtFQyxZQUxGLFlBS0VBLFlBTEY7QUFBQSxJQU1FQyxXQU5GLFlBTUVBLFdBTkY7QUFBQSxJQU9FQyxpQkFQRixZQU9FQSxpQkFQRjtBQUFBLElBUUVDLGlCQVJGLFlBUUVBLGlCQVJGO0FBQUEsSUFTRUMsZ0JBVEYsWUFTRUEsZ0JBVEY7QUFBQSxJQVVFQyxTQVZGLFlBVUVBLFNBVkY7QUFBQSxJQVdFQyxvQkFYRixZQVdFQSxvQkFYRjs7QUFhQSxJQUFNQyxRQUFRLEdBQUdiLE9BQU8sa0JBQXhCOztBQUNBLGdCQUEwQ0EsT0FBTyxlQUFqRDtBQUFBLElBQVFjLEtBQVIsYUFBUUEsS0FBUjtBQUFBLElBQWVDLElBQWYsYUFBZUEsSUFBZjtBQUFBLElBQXFCQyxRQUFyQixhQUFxQkEsUUFBckI7QUFBQSxJQUErQkMsTUFBL0IsYUFBK0JBLE1BQS9COztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsVUFBQ0MsUUFBRCxFQUFXQyxPQUFYO0FBQUEsU0FBdUIsSUFBSVAsS0FBSixDQUFVTSxRQUFWLEVBQW9CQyxPQUFwQixDQUF2QjtBQUFBLENBQWpCOztBQUVBLHVCQUFjSCxNQUFNLENBQUNDLE9BQXJCLEVBQThCO0FBQzVCakIsRUFBQUEsUUFBUSxFQUFSQSxRQUQ0QjtBQUU1QkMsRUFBQUEsUUFBUSxFQUFSQSxRQUY0QjtBQUc1QkMsRUFBQUEsTUFBTSxFQUFOQSxNQUg0QjtBQUk1QkUsRUFBQUEsWUFBWSxFQUFaQSxZQUo0QjtBQUs1QkMsRUFBQUEsV0FBVyxFQUFYQSxXQUw0QjtBQU01QkMsRUFBQUEsaUJBQWlCLEVBQWpCQSxpQkFONEI7QUFPNUJDLEVBQUFBLGlCQUFpQixFQUFqQkEsaUJBUDRCO0FBUTVCQyxFQUFBQSxnQkFBZ0IsRUFBaEJBLGdCQVI0QjtBQVM1QlksRUFBQUEsUUFBUSxFQUFFWCxTQVRrQjtBQVU1QkMsRUFBQUEsb0JBQW9CLEVBQXBCQSxvQkFWNEI7QUFXNUJHLEVBQUFBLElBQUksRUFBSkEsSUFYNEI7QUFZNUJDLEVBQUFBLFFBQVEsRUFBUkEsUUFaNEI7QUFhNUJDLEVBQUFBLE1BQU0sRUFBTkEsTUFiNEI7QUFjNUJoQixFQUFBQSxPQUFPLEVBQVBBLE9BZDRCO0FBZTVCWSxFQUFBQSxRQUFRLEVBQUU7QUFDUlUsSUFBQUEsR0FBRyxFQUFFVixRQUFRLENBQUNXLE1BRE47QUFFUkMsSUFBQUEsS0FBSyxFQUFFWixRQUFRLENBQUNZLEtBRlI7QUFHUkMsSUFBQUEsSUFBSSxFQUFFYixRQUFRLENBQUNjO0FBSFAsR0Fma0I7QUFvQjVCQyxFQUFBQSxPQUFPLEVBQUVmLFFBQVEsQ0FBQ2UsT0FwQlU7QUFxQjVCN0IsRUFBQUEsSUFBSSxFQUFKQTtBQXJCNEIsQ0FBOUI7O0FBNEJBLElBQUlNLElBQUksRUFBUixFQUFZO0FBQ1ZOLEVBQUFBLElBQUksQ0FBQzhCLE9BQUwsQ0FBYUMsT0FBTyxDQUFDQyxHQUFSLENBQVlDLGNBQVosSUFBOEIsUUFBM0M7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBiYWNrID0gcmVxdWlyZSgnLi9saWIvYmFjaycpXG5jb25zdCBlbWl0dGVyID0gcmVxdWlyZSgnLi9saWIvZ2xvYmFsX2VtaXR0ZXInKVxuY29uc3Qge1xuICBhY3RpdmF0ZSxcbiAgaXNBY3RpdmUsXG4gIGlzRG9uZSxcbiAgaXNPbixcbiAgcGVuZGluZ01vY2tzLFxuICBhY3RpdmVNb2NrcyxcbiAgcmVtb3ZlSW50ZXJjZXB0b3IsXG4gIGRpc2FibGVOZXRDb25uZWN0LFxuICBlbmFibGVOZXRDb25uZWN0LFxuICByZW1vdmVBbGwsXG4gIGFib3J0UGVuZGluZ1JlcXVlc3RzLFxufSA9IHJlcXVpcmUoJy4vbGliL2ludGVyY2VwdCcpXG5jb25zdCByZWNvcmRlciA9IHJlcXVpcmUoJy4vbGliL3JlY29yZGVyJylcbmNvbnN0IHsgU2NvcGUsIGxvYWQsIGxvYWREZWZzLCBkZWZpbmUgfSA9IHJlcXVpcmUoJy4vbGliL3Njb3BlJylcblxubW9kdWxlLmV4cG9ydHMgPSAoYmFzZVBhdGgsIG9wdGlvbnMpID0+IG5ldyBTY29wZShiYXNlUGF0aCwgb3B0aW9ucylcblxuT2JqZWN0LmFzc2lnbihtb2R1bGUuZXhwb3J0cywge1xuICBhY3RpdmF0ZSxcbiAgaXNBY3RpdmUsXG4gIGlzRG9uZSxcbiAgcGVuZGluZ01vY2tzLFxuICBhY3RpdmVNb2NrcyxcbiAgcmVtb3ZlSW50ZXJjZXB0b3IsXG4gIGRpc2FibGVOZXRDb25uZWN0LFxuICBlbmFibGVOZXRDb25uZWN0LFxuICBjbGVhbkFsbDogcmVtb3ZlQWxsLFxuICBhYm9ydFBlbmRpbmdSZXF1ZXN0cyxcbiAgbG9hZCxcbiAgbG9hZERlZnMsXG4gIGRlZmluZSxcbiAgZW1pdHRlcixcbiAgcmVjb3JkZXI6IHtcbiAgICByZWM6IHJlY29yZGVyLnJlY29yZCxcbiAgICBjbGVhcjogcmVjb3JkZXIuY2xlYXIsXG4gICAgcGxheTogcmVjb3JkZXIub3V0cHV0cyxcbiAgfSxcbiAgcmVzdG9yZTogcmVjb3JkZXIucmVzdG9yZSxcbiAgYmFjayxcbn0pXG5cbi8vIFdlIGFsd2F5cyBhY3RpdmF0ZSBOb2NrIG9uIGltcG9ydCwgb3ZlcnJpZGluZyB0aGUgZ2xvYmFscy5cbi8vIFNldHRpbmcgdGhlIEJhY2sgbW9kZSBcImFjdGl2YXRlc1wiIE5vY2sgYnkgb3ZlcnJpZGluZyB0aGUgZ2xvYmFsIGVudHJpZXMgaW4gdGhlIGBodHRwL3NgIG1vZHVsZXMuXG4vLyBJZiBOb2NrIEJhY2sgaXMgY29uZmlndXJlZCwgd2UgbmVlZCB0byBob25vciB0aGF0IHNldHRpbmcgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksXG4vLyBvdGhlcndpc2Ugd2UgcmVseSBvbiBOb2NrIEJhY2sncyBkZWZhdWx0IGluaXRpYWxpemluZyBzaWRlIGVmZmVjdC5cbmlmIChpc09uKCkpIHtcbiAgYmFjay5zZXRNb2RlKHByb2Nlc3MuZW52Lk5PQ0tfQkFDS19NT0RFIHx8ICdkcnlydW4nKVxufVxuIl19
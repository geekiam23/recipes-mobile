8d9310d01063dc9e7d4a35d16ebb5b1d
'use strict';

var DESCRIPTORS = require("../internals/descriptors");

var fails = require("../internals/fails");

var objectKeys = require("../internals/object-keys");

var getOwnPropertySymbolsModule = require("../internals/object-get-own-property-symbols");

var propertyIsEnumerableModule = require("../internals/object-property-is-enumerable");

var toObject = require("../internals/to-object");

var IndexedObject = require("../internals/indexed-object");

var $assign = Object.assign;
var defineProperty = Object.defineProperty;
module.exports = !$assign || fails(function () {
  if (DESCRIPTORS && $assign({
    b: 1
  }, $assign(defineProperty({}, 'a', {
    enumerable: true,
    get: function get() {
      defineProperty(this, 'b', {
        value: 3,
        enumerable: false
      });
    }
  }), {
    b: 2
  })).b !== 1) return true;
  var A = {};
  var B = {};
  var symbol = Symbol();
  var alphabet = 'abcdefghijklmnopqrst';
  A[symbol] = 7;
  alphabet.split('').forEach(function (chr) {
    B[chr] = chr;
  });
  return $assign({}, A)[symbol] != 7 || objectKeys($assign({}, B)).join('') != alphabet;
}) ? function assign(target, source) {
  var T = toObject(target);
  var argumentsLength = arguments.length;
  var index = 1;
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  var propertyIsEnumerable = propertyIsEnumerableModule.f;

  while (argumentsLength > index) {
    var S = IndexedObject(arguments[index++]);
    var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
    var length = keys.length;
    var j = 0;
    var key;

    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || propertyIsEnumerable.call(S, key)) T[key] = S[key];
    }
  }

  return T;
} : $assign;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9iamVjdC1hc3NpZ24uanMiXSwibmFtZXMiOlsiREVTQ1JJUFRPUlMiLCJyZXF1aXJlIiwiZmFpbHMiLCJvYmplY3RLZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlIiwicHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUiLCJ0b09iamVjdCIsIkluZGV4ZWRPYmplY3QiLCIkYXNzaWduIiwiT2JqZWN0IiwiYXNzaWduIiwiZGVmaW5lUHJvcGVydHkiLCJtb2R1bGUiLCJleHBvcnRzIiwiYiIsImVudW1lcmFibGUiLCJnZXQiLCJ2YWx1ZSIsIkEiLCJCIiwic3ltYm9sIiwiU3ltYm9sIiwiYWxwaGFiZXQiLCJzcGxpdCIsImZvckVhY2giLCJjaHIiLCJqb2luIiwidGFyZ2V0Iiwic291cmNlIiwiVCIsImFyZ3VtZW50c0xlbmd0aCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImluZGV4IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZiIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiUyIsImtleXMiLCJjb25jYXQiLCJqIiwia2V5IiwiY2FsbCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsSUFBSUEsV0FBVyxHQUFHQyxPQUFPLDRCQUF6Qjs7QUFDQSxJQUFJQyxLQUFLLEdBQUdELE9BQU8sc0JBQW5COztBQUNBLElBQUlFLFVBQVUsR0FBR0YsT0FBTyw0QkFBeEI7O0FBQ0EsSUFBSUcsMkJBQTJCLEdBQUdILE9BQU8sZ0RBQXpDOztBQUNBLElBQUlJLDBCQUEwQixHQUFHSixPQUFPLDhDQUF4Qzs7QUFDQSxJQUFJSyxRQUFRLEdBQUdMLE9BQU8sMEJBQXRCOztBQUNBLElBQUlNLGFBQWEsR0FBR04sT0FBTywrQkFBM0I7O0FBR0EsSUFBSU8sT0FBTyxHQUFHQyxNQUFNLENBQUNDLE1BQXJCO0FBRUEsSUFBSUMsY0FBYyxHQUFHRixNQUFNLENBQUNFLGNBQTVCO0FBSUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixDQUFDTCxPQUFELElBQVlOLEtBQUssQ0FBQyxZQUFZO0FBRTdDLE1BQUlGLFdBQVcsSUFBSVEsT0FBTyxDQUFDO0FBQUVNLElBQUFBLENBQUMsRUFBRTtBQUFMLEdBQUQsRUFBV04sT0FBTyxDQUFDRyxjQUFjLENBQUMsRUFBRCxFQUFLLEdBQUwsRUFBVTtBQUNuRUksSUFBQUEsVUFBVSxFQUFFLElBRHVEO0FBRW5FQyxJQUFBQSxHQUFHLEVBQUUsZUFBWTtBQUNmTCxNQUFBQSxjQUFjLENBQUMsSUFBRCxFQUFPLEdBQVAsRUFBWTtBQUN4Qk0sUUFBQUEsS0FBSyxFQUFFLENBRGlCO0FBRXhCRixRQUFBQSxVQUFVLEVBQUU7QUFGWSxPQUFaLENBQWQ7QUFJRDtBQVBrRSxHQUFWLENBQWYsRUFReEM7QUFBRUQsSUFBQUEsQ0FBQyxFQUFFO0FBQUwsR0FSd0MsQ0FBbEIsQ0FBUCxDQVFKQSxDQVJJLEtBUUUsQ0FSckIsRUFRd0IsT0FBTyxJQUFQO0FBRXhCLE1BQUlJLENBQUMsR0FBRyxFQUFSO0FBQ0EsTUFBSUMsQ0FBQyxHQUFHLEVBQVI7QUFFQSxNQUFJQyxNQUFNLEdBQUdDLE1BQU0sRUFBbkI7QUFDQSxNQUFJQyxRQUFRLEdBQUcsc0JBQWY7QUFDQUosRUFBQUEsQ0FBQyxDQUFDRSxNQUFELENBQUQsR0FBWSxDQUFaO0FBQ0FFLEVBQUFBLFFBQVEsQ0FBQ0MsS0FBVCxDQUFlLEVBQWYsRUFBbUJDLE9BQW5CLENBQTJCLFVBQVVDLEdBQVYsRUFBZTtBQUFFTixJQUFBQSxDQUFDLENBQUNNLEdBQUQsQ0FBRCxHQUFTQSxHQUFUO0FBQWUsR0FBM0Q7QUFDQSxTQUFPakIsT0FBTyxDQUFDLEVBQUQsRUFBS1UsQ0FBTCxDQUFQLENBQWVFLE1BQWYsS0FBMEIsQ0FBMUIsSUFBK0JqQixVQUFVLENBQUNLLE9BQU8sQ0FBQyxFQUFELEVBQUtXLENBQUwsQ0FBUixDQUFWLENBQTJCTyxJQUEzQixDQUFnQyxFQUFoQyxLQUF1Q0osUUFBN0U7QUFDRCxDQXBCaUMsQ0FBakIsR0FvQlosU0FBU1osTUFBVCxDQUFnQmlCLE1BQWhCLEVBQXdCQyxNQUF4QixFQUFnQztBQUNuQyxNQUFJQyxDQUFDLEdBQUd2QixRQUFRLENBQUNxQixNQUFELENBQWhCO0FBQ0EsTUFBSUcsZUFBZSxHQUFHQyxTQUFTLENBQUNDLE1BQWhDO0FBQ0EsTUFBSUMsS0FBSyxHQUFHLENBQVo7QUFDQSxNQUFJQyxxQkFBcUIsR0FBRzlCLDJCQUEyQixDQUFDK0IsQ0FBeEQ7QUFDQSxNQUFJQyxvQkFBb0IsR0FBRy9CLDBCQUEwQixDQUFDOEIsQ0FBdEQ7O0FBQ0EsU0FBT0wsZUFBZSxHQUFHRyxLQUF6QixFQUFnQztBQUM5QixRQUFJSSxDQUFDLEdBQUc5QixhQUFhLENBQUN3QixTQUFTLENBQUNFLEtBQUssRUFBTixDQUFWLENBQXJCO0FBQ0EsUUFBSUssSUFBSSxHQUFHSixxQkFBcUIsR0FBRy9CLFVBQVUsQ0FBQ2tDLENBQUQsQ0FBVixDQUFjRSxNQUFkLENBQXFCTCxxQkFBcUIsQ0FBQ0csQ0FBRCxDQUExQyxDQUFILEdBQW9EbEMsVUFBVSxDQUFDa0MsQ0FBRCxDQUE5RjtBQUNBLFFBQUlMLE1BQU0sR0FBR00sSUFBSSxDQUFDTixNQUFsQjtBQUNBLFFBQUlRLENBQUMsR0FBRyxDQUFSO0FBQ0EsUUFBSUMsR0FBSjs7QUFDQSxXQUFPVCxNQUFNLEdBQUdRLENBQWhCLEVBQW1CO0FBQ2pCQyxNQUFBQSxHQUFHLEdBQUdILElBQUksQ0FBQ0UsQ0FBQyxFQUFGLENBQVY7QUFDQSxVQUFJLENBQUN4QyxXQUFELElBQWdCb0Msb0JBQW9CLENBQUNNLElBQXJCLENBQTBCTCxDQUExQixFQUE2QkksR0FBN0IsQ0FBcEIsRUFBdURaLENBQUMsQ0FBQ1ksR0FBRCxDQUFELEdBQVNKLENBQUMsQ0FBQ0ksR0FBRCxDQUFWO0FBQ3hEO0FBQ0Y7O0FBQUMsU0FBT1osQ0FBUDtBQUNILENBckNnQixHQXFDYnJCLE9BckNKIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1hc3NpZ24gLS0gc2FmZVxudmFyICRhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG4vLyBgT2JqZWN0LmFzc2lnbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5hc3NpZ25cbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBzaG91bGQgaGF2ZSBjb3JyZWN0IG9yZGVyIG9mIG9wZXJhdGlvbnMgKEVkZ2UgYnVnKVxuICBpZiAoREVTQ1JJUFRPUlMgJiYgJGFzc2lnbih7IGI6IDEgfSwgJGFzc2lnbihkZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5KHRoaXMsICdiJywge1xuICAgICAgICB2YWx1ZTogMyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2VcbiAgICAgIH0pO1xuICAgIH1cbiAgfSksIHsgYjogMiB9KSkuYiAhPT0gMSkgcmV0dXJuIHRydWU7XG4gIC8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tc3ltYm9sIC0tIHNhZmVcbiAgdmFyIHN5bWJvbCA9IFN5bWJvbCgpO1xuICB2YXIgYWxwaGFiZXQgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW3N5bWJvbF0gPSA3O1xuICBhbHBoYWJldC5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoY2hyKSB7IEJbY2hyXSA9IGNocjsgfSk7XG4gIHJldHVybiAkYXNzaWduKHt9LCBBKVtzeW1ib2xdICE9IDcgfHwgb2JqZWN0S2V5cygkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gYWxwaGFiZXQ7XG59KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgdmFyIFQgPSB0b09iamVjdCh0YXJnZXQpO1xuICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMTtcbiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICB2YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mO1xuICB3aGlsZSAoYXJndW1lbnRzTGVuZ3RoID4gaW5kZXgpIHtcbiAgICB2YXIgUyA9IEluZGV4ZWRPYmplY3QoYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5U3ltYm9scyA/IG9iamVjdEtleXMoUykuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhTKSkgOiBvYmplY3RLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikge1xuICAgICAga2V5ID0ga2V5c1tqKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKFMsIGtleSkpIFRba2V5XSA9IFNba2V5XTtcbiAgICB9XG4gIH0gcmV0dXJuIFQ7XG59IDogJGFzc2lnbjtcbiJdfQ==
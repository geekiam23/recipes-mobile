94106f14c39d697d60f79aee6b918d95
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = void 0;

var _chalk = _interopRequireDefault(require('chalk'));

var _diffSequences = _interopRequireDefault(require('diff-sequences'));

var _constants = require("./constants");

var _printDiffs = require("./printDiffs");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var DIFF_CONTEXT_DEFAULT = 5;
var fgDelete = _chalk.default.green;
var fgInsert = _chalk.default.red;
var fgCommon = _chalk.default.dim;
var fgIndent = _chalk.default.cyan;
var bgCommon = _chalk.default.bgYellow;
var bgInverse = _chalk.default.inverse;

var highlightTrailingSpaces = function highlightTrailingSpaces(line, bgColor) {
  return line.replace(/\s+$/, bgColor('$&'));
};

var highlightLeadingTrailingSpaces = function highlightLeadingTrailingSpaces(line, bgColor) {
  return highlightTrailingSpaces(line, bgColor).replace(/^(\s\s)*(\s)(?=[^\s])/, '$1' + bgColor('$2'));
};

var getHighlightSpaces = function getHighlightSpaces(bothEdges) {
  return bothEdges ? highlightLeadingTrailingSpaces : highlightTrailingSpaces;
};

var formatDelete = function formatDelete(aStart, aEnd, aLinesUn, aLinesIn, put) {
  var highlightSpaces = getHighlightSpaces(aLinesUn !== aLinesIn);

  for (var aIndex = aStart; aIndex !== aEnd; aIndex += 1) {
    var aLineUn = aLinesUn[aIndex];
    var aLineIn = aLinesIn[aIndex];
    var indentation = aLineIn.slice(0, aLineIn.length - aLineUn.length);
    put(fgDelete('- ' + indentation + highlightSpaces(aLineUn, bgInverse)));
  }
};

var formatInsert = function formatInsert(bStart, bEnd, bLinesUn, bLinesIn, put) {
  var highlightSpaces = getHighlightSpaces(bLinesUn !== bLinesIn);

  for (var bIndex = bStart; bIndex !== bEnd; bIndex += 1) {
    var bLineUn = bLinesUn[bIndex];
    var bLineIn = bLinesIn[bIndex];
    var indentation = bLineIn.slice(0, bLineIn.length - bLineUn.length);
    put(fgInsert('+ ' + indentation + highlightSpaces(bLineUn, bgInverse)));
  }
};

var formatCommon = function formatCommon(nCommon, aCommon, bCommon, aLinesIn, bLinesUn, bLinesIn, put) {
  var highlightSpaces = getHighlightSpaces(bLinesUn !== bLinesIn);

  for (; nCommon !== 0; nCommon -= 1, aCommon += 1, bCommon += 1) {
    var bLineUn = bLinesUn[bCommon];
    var bLineIn = bLinesIn[bCommon];
    var bLineInLength = bLineIn.length;
    var indentation = bLineIn.slice(0, bLineInLength - bLineUn.length);
    var hasSameIndentation = aLinesIn[aCommon].length === bLineInLength;
    var fg = hasSameIndentation ? fgCommon : fgIndent;
    var bg = hasSameIndentation ? bgCommon : bgInverse;
    put(fg('  ' + indentation + highlightSpaces(bLineUn, bg)));
  }
};

var diffExpand = function diffExpand(aLinesUn, bLinesUn, aLinesIn, bLinesIn) {
  var isCommon = function isCommon(aIndex, bIndex) {
    return aLinesUn[aIndex] === bLinesUn[bIndex];
  };

  var array = [];

  var put = function put(line) {
    array.push(line);
  };

  var aStart = 0;
  var bStart = 0;

  var foundSubsequence = function foundSubsequence(nCommon, aCommon, bCommon) {
    formatDelete(aStart, aCommon, aLinesUn, aLinesIn, put);
    formatInsert(bStart, bCommon, bLinesUn, bLinesIn, put);
    formatCommon(nCommon, aCommon, bCommon, aLinesIn, bLinesUn, bLinesIn, put);
    aStart = aCommon + nCommon;
    bStart = bCommon + nCommon;
  };

  var aLength = aLinesUn.length;
  var bLength = bLinesUn.length;
  (0, _diffSequences.default)(aLength, bLength, isCommon, foundSubsequence);
  formatDelete(aStart, aLength, aLinesUn, aLinesIn, put);
  formatInsert(bStart, bLength, bLinesUn, bLinesIn, put);
  return array.join('\n');
};

var getContextLines = function getContextLines(options) {
  return options && typeof options.contextLines === 'number' && options.contextLines >= 0 ? options.contextLines : DIFF_CONTEXT_DEFAULT;
};

var diffNoExpand = function diffNoExpand(aLinesUn, bLinesUn, aLinesIn, bLinesIn, nContextLines) {
  var isCommon = function isCommon(aIndex, bIndex) {
    return aLinesUn[aIndex] === bLinesUn[bIndex];
  };

  var iPatchMark = 0;
  var array = [''];

  var put = function put(line) {
    array.push(line);
  };

  var isAtEnd = false;
  var aLength = aLinesUn.length;
  var bLength = bLinesUn.length;
  var nContextLines2 = nContextLines + nContextLines;
  var aStart = 0;
  var aEnd = 0;
  var bStart = 0;
  var bEnd = 0;

  var foundSubsequence = function foundSubsequence(nCommon, aStartCommon, bStartCommon) {
    var aEndCommon = aStartCommon + nCommon;
    var bEndCommon = bStartCommon + nCommon;
    isAtEnd = aEndCommon === aLength && bEndCommon === bLength;

    if (aStartCommon === 0 && bStartCommon === 0) {
      var nLines = nContextLines < nCommon ? nContextLines : nCommon;
      aStart = aEndCommon - nLines;
      bStart = bEndCommon - nLines;
      formatCommon(nLines, aStart, bStart, aLinesIn, bLinesUn, bLinesIn, put);
      aEnd = aEndCommon;
      bEnd = bEndCommon;
      return;
    }

    formatDelete(aEnd, aStartCommon, aLinesUn, aLinesIn, put);
    formatInsert(bEnd, bStartCommon, bLinesUn, bLinesIn, put);
    aEnd = aStartCommon;
    bEnd = bStartCommon;
    var maxContextLines = isAtEnd ? nContextLines : nContextLines2;

    if (nCommon <= maxContextLines) {
      formatCommon(nCommon, aEnd, bEnd, aLinesIn, bLinesUn, bLinesIn, put);
      aEnd += nCommon;
      bEnd += nCommon;
      return;
    }

    formatCommon(nContextLines, aEnd, bEnd, aLinesIn, bLinesUn, bLinesIn, put);
    aEnd += nContextLines;
    bEnd += nContextLines;
    array[iPatchMark] = (0, _printDiffs.createPatchMark)(aStart, aEnd, bStart, bEnd);

    if (!isAtEnd) {
      iPatchMark = array.length;
      array[iPatchMark] = '';

      var _nLines = nContextLines < nCommon ? nContextLines : nCommon;

      aStart = aEndCommon - _nLines;
      bStart = bEndCommon - _nLines;
      formatCommon(_nLines, aStart, bStart, aLinesIn, bLinesUn, bLinesIn, put);
      aEnd = aEndCommon;
      bEnd = bEndCommon;
    }
  };

  (0, _diffSequences.default)(aLength, bLength, isCommon, foundSubsequence);

  if (!isAtEnd) {
    formatDelete(aEnd, aLength, aLinesUn, aLinesIn, put);
    formatInsert(bEnd, bLength, bLinesUn, bLinesIn, put);
    aEnd = aLength;
    bEnd = bLength;
  }

  if (aStart === 0 && aEnd === aLength && bStart === 0 && bEnd === bLength) {
    array.splice(0, 1);
  } else {
    array[iPatchMark] = (0, _printDiffs.createPatchMark)(aStart, aEnd, bStart, bEnd);
  }

  return array.join('\n');
};

var _default = function _default(a, b, options, original) {
  if (a === b) {
    return _constants.NO_DIFF_MESSAGE;
  }

  var aLinesUn = a.split('\n');
  var bLinesUn = b.split('\n');
  var aLinesIn = aLinesUn;
  var bLinesIn = bLinesUn;

  if (original) {
    aLinesIn = original.a.split('\n');
    bLinesIn = original.b.split('\n');

    if (aLinesUn.length !== aLinesIn.length || bLinesUn.length !== bLinesIn.length) {
      aLinesUn = aLinesIn;
      bLinesUn = bLinesIn;
    }
  }

  return (0, _printDiffs.printAnnotation)(options) + (options && options.expand === false ? diffNoExpand(aLinesUn, bLinesUn, aLinesIn, bLinesIn, getContextLines(options)) : diffExpand(aLinesUn, bLinesUn, aLinesIn, bLinesIn));
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
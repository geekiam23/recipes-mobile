5e3abff93e14362dd58066f077247637
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getUserCodeFrame = getUserCodeFrame;
var chalk = null;
var readFileSync = null;
var codeFrameColumns = null;

try {
  var nodeRequire = module && module.require;
  readFileSync = nodeRequire.call(module, 'fs').readFileSync;
  codeFrameColumns = nodeRequire.call(module, '@babel/code-frame').codeFrameColumns;
  chalk = nodeRequire.call(module, 'chalk');
} catch (_unused) {}

function getCodeFrame(frame) {
  var locationStart = frame.indexOf('(') + 1;
  var locationEnd = frame.indexOf(')');
  var frameLocation = frame.slice(locationStart, locationEnd);
  var frameLocationElements = frameLocation.split(':');
  var _ref = [frameLocationElements[0], parseInt(frameLocationElements[1], 10), parseInt(frameLocationElements[2], 10)],
      filename = _ref[0],
      line = _ref[1],
      column = _ref[2];
  var rawFileContents = '';

  try {
    rawFileContents = readFileSync(filename, 'utf-8');
  } catch (_unused2) {
    return '';
  }

  var codeFrame = codeFrameColumns(rawFileContents, {
    start: {
      line: line,
      column: column
    }
  }, {
    highlightCode: true,
    linesBelow: 0
  });
  return chalk.dim(frameLocation) + "\n" + codeFrame + "\n";
}

function getUserCodeFrame() {
  if (!readFileSync || !codeFrameColumns) {
    return '';
  }

  var err = new Error();
  var firstClientCodeFrame = err.stack.split('\n').slice(1).find(function (frame) {
    return !frame.includes('node_modules/');
  });
  return getCodeFrame(firstClientCodeFrame);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdldC11c2VyLWNvZGUtZnJhbWUuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZXRVc2VyQ29kZUZyYW1lIiwiY2hhbGsiLCJyZWFkRmlsZVN5bmMiLCJjb2RlRnJhbWVDb2x1bW5zIiwibm9kZVJlcXVpcmUiLCJtb2R1bGUiLCJyZXF1aXJlIiwiY2FsbCIsImdldENvZGVGcmFtZSIsImZyYW1lIiwibG9jYXRpb25TdGFydCIsImluZGV4T2YiLCJsb2NhdGlvbkVuZCIsImZyYW1lTG9jYXRpb24iLCJzbGljZSIsImZyYW1lTG9jYXRpb25FbGVtZW50cyIsInNwbGl0IiwicGFyc2VJbnQiLCJmaWxlbmFtZSIsImxpbmUiLCJjb2x1bW4iLCJyYXdGaWxlQ29udGVudHMiLCJjb2RlRnJhbWUiLCJzdGFydCIsImhpZ2hsaWdodENvZGUiLCJsaW5lc0JlbG93IiwiZGltIiwiZXJyIiwiRXJyb3IiLCJmaXJzdENsaWVudENvZGVGcmFtZSIsInN0YWNrIiwiZmluZCIsImluY2x1ZGVzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsRUFBQUEsS0FBSyxFQUFFO0FBRG9DLENBQTdDO0FBR0FELE9BQU8sQ0FBQ0UsZ0JBQVIsR0FBMkJBLGdCQUEzQjtBQUVBLElBQUlDLEtBQUssR0FBRyxJQUFaO0FBQ0EsSUFBSUMsWUFBWSxHQUFHLElBQW5CO0FBQ0EsSUFBSUMsZ0JBQWdCLEdBQUcsSUFBdkI7O0FBRUEsSUFBSTtBQUNGLE1BQU1DLFdBQVcsR0FBR0MsTUFBTSxJQUFJQSxNQUFNLENBQUNDLE9BQXJDO0FBQ0FKLEVBQUFBLFlBQVksR0FBR0UsV0FBVyxDQUFDRyxJQUFaLENBQWlCRixNQUFqQixFQUF5QixJQUF6QixFQUErQkgsWUFBOUM7QUFDQUMsRUFBQUEsZ0JBQWdCLEdBQUdDLFdBQVcsQ0FBQ0csSUFBWixDQUFpQkYsTUFBakIsRUFBeUIsbUJBQXpCLEVBQThDRixnQkFBakU7QUFDQUYsRUFBQUEsS0FBSyxHQUFHRyxXQUFXLENBQUNHLElBQVosQ0FBaUJGLE1BQWpCLEVBQXlCLE9BQXpCLENBQVI7QUFDRCxDQUxELENBS0UsZ0JBQU0sQ0FDUDs7QUFHRCxTQUFTRyxZQUFULENBQXNCQyxLQUF0QixFQUE2QjtBQUMzQixNQUFNQyxhQUFhLEdBQUdELEtBQUssQ0FBQ0UsT0FBTixDQUFjLEdBQWQsSUFBcUIsQ0FBM0M7QUFDQSxNQUFNQyxXQUFXLEdBQUdILEtBQUssQ0FBQ0UsT0FBTixDQUFjLEdBQWQsQ0FBcEI7QUFDQSxNQUFNRSxhQUFhLEdBQUdKLEtBQUssQ0FBQ0ssS0FBTixDQUFZSixhQUFaLEVBQTJCRSxXQUEzQixDQUF0QjtBQUNBLE1BQU1HLHFCQUFxQixHQUFHRixhQUFhLENBQUNHLEtBQWQsQ0FBb0IsR0FBcEIsQ0FBOUI7QUFDQSxhQUFpQyxDQUFDRCxxQkFBcUIsQ0FBQyxDQUFELENBQXRCLEVBQTJCRSxRQUFRLENBQUNGLHFCQUFxQixDQUFDLENBQUQsQ0FBdEIsRUFBMkIsRUFBM0IsQ0FBbkMsRUFBbUVFLFFBQVEsQ0FBQ0YscUJBQXFCLENBQUMsQ0FBRCxDQUF0QixFQUEyQixFQUEzQixDQUEzRSxDQUFqQztBQUFBLE1BQU9HLFFBQVA7QUFBQSxNQUFpQkMsSUFBakI7QUFBQSxNQUF1QkMsTUFBdkI7QUFDQSxNQUFJQyxlQUFlLEdBQUcsRUFBdEI7O0FBRUEsTUFBSTtBQUNGQSxJQUFBQSxlQUFlLEdBQUduQixZQUFZLENBQUNnQixRQUFELEVBQVcsT0FBWCxDQUE5QjtBQUNELEdBRkQsQ0FFRSxpQkFBTTtBQUNOLFdBQU8sRUFBUDtBQUNEOztBQUVELE1BQU1JLFNBQVMsR0FBR25CLGdCQUFnQixDQUFDa0IsZUFBRCxFQUFrQjtBQUNsREUsSUFBQUEsS0FBSyxFQUFFO0FBQ0xKLE1BQUFBLElBQUksRUFBSkEsSUFESztBQUVMQyxNQUFBQSxNQUFNLEVBQU5BO0FBRks7QUFEMkMsR0FBbEIsRUFLL0I7QUFDREksSUFBQUEsYUFBYSxFQUFFLElBRGQ7QUFFREMsSUFBQUEsVUFBVSxFQUFFO0FBRlgsR0FMK0IsQ0FBbEM7QUFTQSxTQUFVeEIsS0FBSyxDQUFDeUIsR0FBTixDQUFVYixhQUFWLENBQVYsVUFBdUNTLFNBQXZDO0FBQ0Q7O0FBRUQsU0FBU3RCLGdCQUFULEdBQTRCO0FBSTFCLE1BQUksQ0FBQ0UsWUFBRCxJQUFpQixDQUFDQyxnQkFBdEIsRUFBd0M7QUFDdEMsV0FBTyxFQUFQO0FBQ0Q7O0FBRUQsTUFBTXdCLEdBQUcsR0FBRyxJQUFJQyxLQUFKLEVBQVo7QUFDQSxNQUFNQyxvQkFBb0IsR0FBR0YsR0FBRyxDQUFDRyxLQUFKLENBQVVkLEtBQVYsQ0FBZ0IsSUFBaEIsRUFBc0JGLEtBQXRCLENBQTRCLENBQTVCLEVBQzVCaUIsSUFENEIsQ0FDdkIsVUFBQXRCLEtBQUs7QUFBQSxXQUFJLENBQUNBLEtBQUssQ0FBQ3VCLFFBQU4sQ0FBZSxlQUFmLENBQUw7QUFBQSxHQURrQixDQUE3QjtBQUdBLFNBQU94QixZQUFZLENBQUNxQixvQkFBRCxDQUFuQjtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmdldFVzZXJDb2RlRnJhbWUgPSBnZXRVc2VyQ29kZUZyYW1lO1xuLy8gV2UgdHJ5IHRvIGxvYWQgbm9kZSBkZXBlbmRlbmNpZXNcbmxldCBjaGFsayA9IG51bGw7XG5sZXQgcmVhZEZpbGVTeW5jID0gbnVsbDtcbmxldCBjb2RlRnJhbWVDb2x1bW5zID0gbnVsbDtcblxudHJ5IHtcbiAgY29uc3Qgbm9kZVJlcXVpcmUgPSBtb2R1bGUgJiYgbW9kdWxlLnJlcXVpcmU7XG4gIHJlYWRGaWxlU3luYyA9IG5vZGVSZXF1aXJlLmNhbGwobW9kdWxlLCAnZnMnKS5yZWFkRmlsZVN5bmM7XG4gIGNvZGVGcmFtZUNvbHVtbnMgPSBub2RlUmVxdWlyZS5jYWxsKG1vZHVsZSwgJ0BiYWJlbC9jb2RlLWZyYW1lJykuY29kZUZyYW1lQ29sdW1ucztcbiAgY2hhbGsgPSBub2RlUmVxdWlyZS5jYWxsKG1vZHVsZSwgJ2NoYWxrJyk7XG59IGNhdGNoIHsvLyBXZSdyZSBpbiBhIGJyb3dzZXIgZW52aXJvbm1lbnRcbn0gLy8gZnJhbWUgaGFzIHRoZSBmb3JtIFwiYXQgbXlNZXRob2QgKGxvY2F0aW9uL3RvL215L2ZpbGUuanM6MTA6MilcIlxuXG5cbmZ1bmN0aW9uIGdldENvZGVGcmFtZShmcmFtZSkge1xuICBjb25zdCBsb2NhdGlvblN0YXJ0ID0gZnJhbWUuaW5kZXhPZignKCcpICsgMTtcbiAgY29uc3QgbG9jYXRpb25FbmQgPSBmcmFtZS5pbmRleE9mKCcpJyk7XG4gIGNvbnN0IGZyYW1lTG9jYXRpb24gPSBmcmFtZS5zbGljZShsb2NhdGlvblN0YXJ0LCBsb2NhdGlvbkVuZCk7XG4gIGNvbnN0IGZyYW1lTG9jYXRpb25FbGVtZW50cyA9IGZyYW1lTG9jYXRpb24uc3BsaXQoJzonKTtcbiAgY29uc3QgW2ZpbGVuYW1lLCBsaW5lLCBjb2x1bW5dID0gW2ZyYW1lTG9jYXRpb25FbGVtZW50c1swXSwgcGFyc2VJbnQoZnJhbWVMb2NhdGlvbkVsZW1lbnRzWzFdLCAxMCksIHBhcnNlSW50KGZyYW1lTG9jYXRpb25FbGVtZW50c1syXSwgMTApXTtcbiAgbGV0IHJhd0ZpbGVDb250ZW50cyA9ICcnO1xuXG4gIHRyeSB7XG4gICAgcmF3RmlsZUNvbnRlbnRzID0gcmVhZEZpbGVTeW5jKGZpbGVuYW1lLCAndXRmLTgnKTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgY29uc3QgY29kZUZyYW1lID0gY29kZUZyYW1lQ29sdW1ucyhyYXdGaWxlQ29udGVudHMsIHtcbiAgICBzdGFydDoge1xuICAgICAgbGluZSxcbiAgICAgIGNvbHVtblxuICAgIH1cbiAgfSwge1xuICAgIGhpZ2hsaWdodENvZGU6IHRydWUsXG4gICAgbGluZXNCZWxvdzogMFxuICB9KTtcbiAgcmV0dXJuIGAke2NoYWxrLmRpbShmcmFtZUxvY2F0aW9uKX1cXG4ke2NvZGVGcmFtZX1cXG5gO1xufVxuXG5mdW5jdGlvbiBnZXRVc2VyQ29kZUZyYW1lKCkge1xuICAvLyBJZiB3ZSBjb3VsZG4ndCBsb2FkIGRlcGVuZGVuY2llcywgd2UgY2FuJ3QgZ2VuZXJhdGUgdGhlIHVzZXIgdHJhY2VcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBpZiAoIXJlYWRGaWxlU3luYyB8fCAhY29kZUZyYW1lQ29sdW1ucykge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIGNvbnN0IGVyciA9IG5ldyBFcnJvcigpO1xuICBjb25zdCBmaXJzdENsaWVudENvZGVGcmFtZSA9IGVyci5zdGFjay5zcGxpdCgnXFxuJykuc2xpY2UoMSkgLy8gUmVtb3ZlIGZpcnN0IGxpbmUgd2hpY2ggaGFzIHRoZSBmb3JtIFwiRXJyb3I6IFR5cGVFcnJvclwiXG4gIC5maW5kKGZyYW1lID0+ICFmcmFtZS5pbmNsdWRlcygnbm9kZV9tb2R1bGVzLycpKTsgLy8gSWdub3JlIGZyYW1lcyBmcm9tIDNyZCBwYXJ0eSBsaWJyYXJpZXNcblxuICByZXR1cm4gZ2V0Q29kZUZyYW1lKGZpcnN0Q2xpZW50Q29kZUZyYW1lKTtcbn0iXX0=
71a839eb85630badc8685cdbdc7e7221
'use strict';

var bind = require("../internals/function-bind-context");

var toObject = require("../internals/to-object");

var callWithSafeIterationClosing = require("../internals/call-with-safe-iteration-closing");

var isArrayIteratorMethod = require("../internals/is-array-iterator-method");

var toLength = require("../internals/to-length");

var createProperty = require("../internals/create-property");

var getIteratorMethod = require("../internals/get-iterator-method");

module.exports = function from(arrayLike) {
  var O = toObject(arrayLike);
  var C = typeof this == 'function' ? this : Array;
  var argumentsLength = arguments.length;
  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
  var mapping = mapfn !== undefined;
  var iteratorMethod = getIteratorMethod(O);
  var index = 0;
  var length, result, step, iterator, next, value;
  if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);

  if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
    iterator = iteratorMethod.call(O);
    next = iterator.next;
    result = new C();

    for (; !(step = next.call(iterator)).done; index++) {
      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
      createProperty(result, index, value);
    }
  } else {
    length = toLength(O.length);
    result = new C(length);

    for (; length > index; index++) {
      value = mapping ? mapfn(O[index], index) : O[index];
      createProperty(result, index, value);
    }
  }

  result.length = index;
  return result;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFycmF5LWZyb20uanMiXSwibmFtZXMiOlsiYmluZCIsInJlcXVpcmUiLCJ0b09iamVjdCIsImNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmciLCJpc0FycmF5SXRlcmF0b3JNZXRob2QiLCJ0b0xlbmd0aCIsImNyZWF0ZVByb3BlcnR5IiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJtb2R1bGUiLCJleHBvcnRzIiwiZnJvbSIsImFycmF5TGlrZSIsIk8iLCJDIiwiQXJyYXkiLCJhcmd1bWVudHNMZW5ndGgiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJtYXBmbiIsInVuZGVmaW5lZCIsIm1hcHBpbmciLCJpdGVyYXRvck1ldGhvZCIsImluZGV4IiwicmVzdWx0Iiwic3RlcCIsIml0ZXJhdG9yIiwibmV4dCIsInZhbHVlIiwiY2FsbCIsImRvbmUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLElBQUlBLElBQUksR0FBR0MsT0FBTyxzQ0FBbEI7O0FBQ0EsSUFBSUMsUUFBUSxHQUFHRCxPQUFPLDBCQUF0Qjs7QUFDQSxJQUFJRSw0QkFBNEIsR0FBR0YsT0FBTyxpREFBMUM7O0FBQ0EsSUFBSUcscUJBQXFCLEdBQUdILE9BQU8seUNBQW5DOztBQUNBLElBQUlJLFFBQVEsR0FBR0osT0FBTywwQkFBdEI7O0FBQ0EsSUFBSUssY0FBYyxHQUFHTCxPQUFPLGdDQUE1Qjs7QUFDQSxJQUFJTSxpQkFBaUIsR0FBR04sT0FBTyxvQ0FBL0I7O0FBSUFPLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixTQUFTQyxJQUFULENBQWNDLFNBQWQsRUFBd0U7QUFDdkYsTUFBSUMsQ0FBQyxHQUFHVixRQUFRLENBQUNTLFNBQUQsQ0FBaEI7QUFDQSxNQUFJRSxDQUFDLEdBQUcsT0FBTyxJQUFQLElBQWUsVUFBZixHQUE0QixJQUE1QixHQUFtQ0MsS0FBM0M7QUFDQSxNQUFJQyxlQUFlLEdBQUdDLFNBQVMsQ0FBQ0MsTUFBaEM7QUFDQSxNQUFJQyxLQUFLLEdBQUdILGVBQWUsR0FBRyxDQUFsQixHQUFzQkMsU0FBUyxDQUFDLENBQUQsQ0FBL0IsR0FBcUNHLFNBQWpEO0FBQ0EsTUFBSUMsT0FBTyxHQUFHRixLQUFLLEtBQUtDLFNBQXhCO0FBQ0EsTUFBSUUsY0FBYyxHQUFHZCxpQkFBaUIsQ0FBQ0ssQ0FBRCxDQUF0QztBQUNBLE1BQUlVLEtBQUssR0FBRyxDQUFaO0FBQ0EsTUFBSUwsTUFBSixFQUFZTSxNQUFaLEVBQW9CQyxJQUFwQixFQUEwQkMsUUFBMUIsRUFBb0NDLElBQXBDLEVBQTBDQyxLQUExQztBQUNBLE1BQUlQLE9BQUosRUFBYUYsS0FBSyxHQUFHbEIsSUFBSSxDQUFDa0IsS0FBRCxFQUFRSCxlQUFlLEdBQUcsQ0FBbEIsR0FBc0JDLFNBQVMsQ0FBQyxDQUFELENBQS9CLEdBQXFDRyxTQUE3QyxFQUF3RCxDQUF4RCxDQUFaOztBQUViLE1BQUlFLGNBQWMsSUFBSUYsU0FBbEIsSUFBK0IsRUFBRU4sQ0FBQyxJQUFJQyxLQUFMLElBQWNWLHFCQUFxQixDQUFDaUIsY0FBRCxDQUFyQyxDQUFuQyxFQUEyRjtBQUN6RkksSUFBQUEsUUFBUSxHQUFHSixjQUFjLENBQUNPLElBQWYsQ0FBb0JoQixDQUFwQixDQUFYO0FBQ0FjLElBQUFBLElBQUksR0FBR0QsUUFBUSxDQUFDQyxJQUFoQjtBQUNBSCxJQUFBQSxNQUFNLEdBQUcsSUFBSVYsQ0FBSixFQUFUOztBQUNBLFdBQU0sQ0FBQyxDQUFDVyxJQUFJLEdBQUdFLElBQUksQ0FBQ0UsSUFBTCxDQUFVSCxRQUFWLENBQVIsRUFBNkJJLElBQXBDLEVBQTBDUCxLQUFLLEVBQS9DLEVBQW1EO0FBQ2pESyxNQUFBQSxLQUFLLEdBQUdQLE9BQU8sR0FBR2pCLDRCQUE0QixDQUFDc0IsUUFBRCxFQUFXUCxLQUFYLEVBQWtCLENBQUNNLElBQUksQ0FBQ0csS0FBTixFQUFhTCxLQUFiLENBQWxCLEVBQXVDLElBQXZDLENBQS9CLEdBQThFRSxJQUFJLENBQUNHLEtBQWxHO0FBQ0FyQixNQUFBQSxjQUFjLENBQUNpQixNQUFELEVBQVNELEtBQVQsRUFBZ0JLLEtBQWhCLENBQWQ7QUFDRDtBQUNGLEdBUkQsTUFRTztBQUNMVixJQUFBQSxNQUFNLEdBQUdaLFFBQVEsQ0FBQ08sQ0FBQyxDQUFDSyxNQUFILENBQWpCO0FBQ0FNLElBQUFBLE1BQU0sR0FBRyxJQUFJVixDQUFKLENBQU1JLE1BQU4sQ0FBVDs7QUFDQSxXQUFNQSxNQUFNLEdBQUdLLEtBQWYsRUFBc0JBLEtBQUssRUFBM0IsRUFBK0I7QUFDN0JLLE1BQUFBLEtBQUssR0FBR1AsT0FBTyxHQUFHRixLQUFLLENBQUNOLENBQUMsQ0FBQ1UsS0FBRCxDQUFGLEVBQVdBLEtBQVgsQ0FBUixHQUE0QlYsQ0FBQyxDQUFDVSxLQUFELENBQTVDO0FBQ0FoQixNQUFBQSxjQUFjLENBQUNpQixNQUFELEVBQVNELEtBQVQsRUFBZ0JLLEtBQWhCLENBQWQ7QUFDRDtBQUNGOztBQUNESixFQUFBQSxNQUFNLENBQUNOLE1BQVAsR0FBZ0JLLEtBQWhCO0FBQ0EsU0FBT0MsTUFBUDtBQUNELENBN0JEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jYWxsLXdpdGgtc2FmZS1pdGVyYXRpb24tY2xvc2luZycpO1xudmFyIGlzQXJyYXlJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbi8vIGBBcnJheS5mcm9tYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkuZnJvbVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5O1xuICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIG1hcGZuID0gYXJndW1lbnRzTGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICB2YXIgaXRlcmF0b3JNZXRob2QgPSBnZXRJdGVyYXRvck1ldGhvZChPKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvciwgbmV4dCwgdmFsdWU7XG4gIGlmIChtYXBwaW5nKSBtYXBmbiA9IGJpbmQobWFwZm4sIGFyZ3VtZW50c0xlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQsIDIpO1xuICAvLyBpZiB0aGUgdGFyZ2V0IGlzIG5vdCBpdGVyYWJsZSBvciBpdCdzIGFuIGFycmF5IHdpdGggdGhlIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2UgYSBzaW1wbGUgY2FzZVxuICBpZiAoaXRlcmF0b3JNZXRob2QgIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcmF0b3JNZXRob2QoaXRlcmF0b3JNZXRob2QpKSkge1xuICAgIGl0ZXJhdG9yID0gaXRlcmF0b3JNZXRob2QuY2FsbChPKTtcbiAgICBuZXh0ID0gaXRlcmF0b3IubmV4dDtcbiAgICByZXN1bHQgPSBuZXcgQygpO1xuICAgIGZvciAoOyEoc3RlcCA9IG5leHQuY2FsbChpdGVyYXRvcikpLmRvbmU7IGluZGV4KyspIHtcbiAgICAgIHZhbHVlID0gbWFwcGluZyA/IGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWU7XG4gICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICByZXN1bHQgPSBuZXcgQyhsZW5ndGgpO1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICB2YWx1ZSA9IG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF07XG4gICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCB2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iXX0=
f8ac4566a46a08b523a16b66b8d0f4fe
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useIsFocused;

var React = _interopRequireWildcard(require("react"));

var _useNavigation = _interopRequireDefault(require("./useNavigation"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function useIsFocused() {
  var navigation = (0, _useNavigation.default)();

  var _ref = (0, React.useState)(navigation.isFocused),
      _ref2 = (0, _slicedToArray2.default)(_ref, 2),
      isFocused = _ref2[0],
      setIsFocused = _ref2[1];

  var valueToReturn = navigation.isFocused();

  if (isFocused !== valueToReturn) {
    setIsFocused(valueToReturn);
  }

  React.useEffect(function () {
    var unsubscribeFocus = navigation.addListener('focus', function () {
      return setIsFocused(true);
    });
    var unsubscribeBlur = navigation.addListener('blur', function () {
      return setIsFocused(false);
    });
    return function () {
      unsubscribeFocus();
      unsubscribeBlur();
    };
  }, [navigation]);
  React.useDebugValue(valueToReturn);
  return valueToReturn;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZUlzRm9jdXNlZC50c3giXSwibmFtZXMiOlsibmF2aWdhdGlvbiIsInZhbHVlVG9SZXR1cm4iLCJpc0ZvY3VzZWQiLCJzZXRJc0ZvY3VzZWQiLCJSZWFjdCIsInVuc3Vic2NyaWJlRm9jdXMiLCJ1bnN1YnNjcmliZUJsdXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsSUFBQSxLQUFBLEdBQUEsdUJBQUEsQ0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBLENBQUE7O0FBRUEsSUFBQSxjQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLG1CQUFBLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQU1lLFNBQUEsWUFBQSxHQUFpQztBQUM5QyxNQUFNQSxVQUFVLEdBQUcsQ0FBQSxHQUFBLGNBQUEsQ0FBbkIsT0FBbUIsR0FBbkI7O0FBQ0EsYUFBa0MsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxRQUFBLEVBQVNBLFVBQVUsQ0FBckQsU0FBa0MsQ0FBbEM7QUFBQTtBQUFBLE1BQU0sU0FBTjtBQUFBLE1BQU0sWUFBTjs7QUFFQSxNQUFNQyxhQUFhLEdBQUdELFVBQVUsQ0FBaEMsU0FBc0JBLEVBQXRCOztBQUVBLE1BQUlFLFNBQVMsS0FBYixhQUFBLEVBQWlDO0FBTS9CQyxJQUFBQSxZQUFZLENBQVpBLGFBQVksQ0FBWkE7QUFDRDs7QUFFREMsRUFBQUEsS0FBSyxDQUFMQSxTQUFBQSxDQUFnQixZQUFNO0FBQ3BCLFFBQU1DLGdCQUFnQixHQUFHTCxVQUFVLENBQVZBLFdBQUFBLENBQUFBLE9BQUFBLEVBQWdDO0FBQUEsYUFDdkRHLFlBQVksQ0FEZCxJQUNjLENBRDJDO0FBQUEsS0FBaENILENBQXpCO0FBSUEsUUFBTU0sZUFBZSxHQUFHTixVQUFVLENBQVZBLFdBQUFBLENBQUFBLE1BQUFBLEVBQStCO0FBQUEsYUFDckRHLFlBQVksQ0FEZCxLQUNjLENBRHlDO0FBQUEsS0FBL0JILENBQXhCO0FBSUEsV0FBTyxZQUFNO0FBQ1hLLE1BQUFBLGdCQUFnQjtBQUNoQkMsTUFBQUEsZUFBZTtBQUZqQixLQUFBO0FBVEZGLEdBQUFBLEVBYUcsQ0FiSEEsVUFhRyxDQWJIQTtBQWVBQSxFQUFBQSxLQUFLLENBQUxBLGFBQUFBLENBQUFBLGFBQUFBO0FBRUEsU0FBQSxhQUFBO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB1c2VOYXZpZ2F0aW9uIGZyb20gJy4vdXNlTmF2aWdhdGlvbic7XG5cbi8qKlxuICogSG9vayB0byBnZXQgdGhlIGN1cnJlbnQgZm9jdXMgc3RhdGUgb2YgdGhlIHNjcmVlbi4gUmV0dXJucyBhIGB0cnVlYCBpZiBzY3JlZW4gaXMgZm9jdXNlZCwgb3RoZXJ3aXNlIGBmYWxzZWAuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIGlmIGEgY29tcG9uZW50IG5lZWRzIHRvIHJlbmRlciBzb21ldGhpbmcgYmFzZWQgb24gdGhlIGZvY3VzIHN0YXRlLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VJc0ZvY3VzZWQoKTogYm9vbGVhbiB7XG4gIGNvbnN0IG5hdmlnYXRpb24gPSB1c2VOYXZpZ2F0aW9uKCk7XG4gIGNvbnN0IFtpc0ZvY3VzZWQsIHNldElzRm9jdXNlZF0gPSB1c2VTdGF0ZShuYXZpZ2F0aW9uLmlzRm9jdXNlZCk7XG5cbiAgY29uc3QgdmFsdWVUb1JldHVybiA9IG5hdmlnYXRpb24uaXNGb2N1c2VkKCk7XG5cbiAgaWYgKGlzRm9jdXNlZCAhPT0gdmFsdWVUb1JldHVybikge1xuICAgIC8vIElmIHRoZSB2YWx1ZSBoYXMgY2hhbmdlZCBzaW5jZSB0aGUgbGFzdCByZW5kZXIsIHdlIG5lZWQgdG8gdXBkYXRlIGl0LlxuICAgIC8vIFRoaXMgY291bGQgaGFwcGVuIGlmIHdlIG1pc3NlZCBhbiB1cGRhdGUgZnJvbSB0aGUgZXZlbnQgbGlzdGVuZXJzIGR1cmluZyByZS1yZW5kZXIuXG4gICAgLy8gUmVhY3Qgd2lsbCBwcm9jZXNzIHRoaXMgdXBkYXRlIGltbWVkaWF0ZWx5LCBzbyB0aGUgb2xkIHN1YnNjcmlwdGlvbiB2YWx1ZSB3b24ndCBiZSBjb21taXR0ZWQuXG4gICAgLy8gSXQgaXMgc3RpbGwgbmljZSB0byBhdm9pZCByZXR1cm5pbmcgYSBtaXNtYXRjaGVkIHZhbHVlIHRob3VnaCwgc28gbGV0J3Mgb3ZlcnJpZGUgdGhlIHJldHVybiB2YWx1ZS5cbiAgICAvLyBUaGlzIGlzIHRoZSBzYW1lIGxvZ2ljIGFzIGluIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC90cmVlL21hc3Rlci9wYWNrYWdlcy91c2Utc3Vic2NyaXB0aW9uXG4gICAgc2V0SXNGb2N1c2VkKHZhbHVlVG9SZXR1cm4pO1xuICB9XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCB1bnN1YnNjcmliZUZvY3VzID0gbmF2aWdhdGlvbi5hZGRMaXN0ZW5lcignZm9jdXMnLCAoKSA9PlxuICAgICAgc2V0SXNGb2N1c2VkKHRydWUpXG4gICAgKTtcblxuICAgIGNvbnN0IHVuc3Vic2NyaWJlQmx1ciA9IG5hdmlnYXRpb24uYWRkTGlzdGVuZXIoJ2JsdXInLCAoKSA9PlxuICAgICAgc2V0SXNGb2N1c2VkKGZhbHNlKVxuICAgICk7XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgdW5zdWJzY3JpYmVGb2N1cygpO1xuICAgICAgdW5zdWJzY3JpYmVCbHVyKCk7XG4gICAgfTtcbiAgfSwgW25hdmlnYXRpb25dKTtcblxuICBSZWFjdC51c2VEZWJ1Z1ZhbHVlKHZhbHVlVG9SZXR1cm4pO1xuXG4gIHJldHVybiB2YWx1ZVRvUmV0dXJuO1xufVxuIl19
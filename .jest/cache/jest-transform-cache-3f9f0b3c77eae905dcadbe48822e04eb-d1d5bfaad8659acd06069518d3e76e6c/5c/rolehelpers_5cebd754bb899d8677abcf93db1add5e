55899d0fbb51f85751857dbb507af0e4
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _extends4 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getRoles = getRoles;
exports.getImplicitAriaRoles = getImplicitAriaRoles;
exports.isSubtreeInaccessible = isSubtreeInaccessible;
exports.prettyRoles = prettyRoles;
exports.isInaccessible = isInaccessible;
exports.computeAriaSelected = computeAriaSelected;
exports.computeAriaChecked = computeAriaChecked;
exports.computeAriaPressed = computeAriaPressed;
exports.computeAriaExpanded = computeAriaExpanded;
exports.computeHeadingLevel = computeHeadingLevel;
exports.logRoles = void 0;

var _ariaQuery = require("aria-query");

var _domAccessibilityApi = require("dom-accessibility-api");

var _prettyDom = require("./pretty-dom");

var _config = require("./config");

var elementRoleList = buildElementRoleList(_ariaQuery.elementRoles);

function isSubtreeInaccessible(element) {
  if (element.hidden === true) {
    return true;
  }

  if (element.getAttribute('aria-hidden') === 'true') {
    return true;
  }

  var window = element.ownerDocument.defaultView;

  if (window.getComputedStyle(element).display === 'none') {
    return true;
  }

  return false;
}

function isInaccessible(element) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$isSubtreeIna = options.isSubtreeInaccessible,
      isSubtreeInaccessibleImpl = _options$isSubtreeIna === void 0 ? isSubtreeInaccessible : _options$isSubtreeIna;
  var window = element.ownerDocument.defaultView;

  if (window.getComputedStyle(element).visibility === 'hidden') {
    return true;
  }

  var currentElement = element;

  while (currentElement) {
    if (isSubtreeInaccessibleImpl(currentElement)) {
      return true;
    }

    currentElement = currentElement.parentElement;
  }

  return false;
}

function getImplicitAriaRoles(currentNode) {
  for (var _iterator = _createForOfIteratorHelperLoose(elementRoleList), _step; !(_step = _iterator()).done;) {
    var _ref = _step.value;
    var match = _ref.match;
    var roles = _ref.roles;

    if (match(currentNode)) {
      return (0, _toConsumableArray2.default)(roles);
    }
  }

  return [];
}

function buildElementRoleList(elementRolesMap) {
  function makeElementSelector(_ref2) {
    var name = _ref2.name,
        attributes = _ref2.attributes;
    return "" + name + attributes.map(function (_ref3) {
      var attributeName = _ref3.name,
          value = _ref3.value,
          _ref3$constraints = _ref3.constraints,
          constraints = _ref3$constraints === void 0 ? [] : _ref3$constraints;
      var shouldNotExist = constraints.indexOf('undefined') !== -1;

      if (shouldNotExist) {
        return ":not([" + attributeName + "])";
      } else if (value) {
        return "[" + attributeName + "=\"" + value + "\"]";
      } else {
        return "[" + attributeName + "]";
      }
    }).join('');
  }

  function getSelectorSpecificity(_ref4) {
    var _ref4$attributes = _ref4.attributes,
        attributes = _ref4$attributes === void 0 ? [] : _ref4$attributes;
    return attributes.length;
  }

  function bySelectorSpecificity(_ref5, _ref6) {
    var leftSpecificity = _ref5.specificity;
    var rightSpecificity = _ref6.specificity;
    return rightSpecificity - leftSpecificity;
  }

  function match(element) {
    return function (node) {
      var _element$attributes = element.attributes,
          attributes = _element$attributes === void 0 ? [] : _element$attributes;
      var typeTextIndex = attributes.findIndex(function (attribute) {
        return attribute.value && attribute.name === 'type' && attribute.value === 'text';
      });

      if (typeTextIndex >= 0) {
        attributes = [].concat((0, _toConsumableArray2.default)(attributes.slice(0, typeTextIndex)), (0, _toConsumableArray2.default)(attributes.slice(typeTextIndex + 1)));

        if (node.type !== 'text') {
          return false;
        }
      }

      return node.matches(makeElementSelector((0, _extends4.default)({}, element, {
        attributes: attributes
      })));
    };
  }

  var result = [];

  for (var _iterator2 = _createForOfIteratorHelperLoose(elementRolesMap.entries()), _step2; !(_step2 = _iterator2()).done;) {
    var _ref7 = _step2.value;

    var _ref8 = (0, _slicedToArray2.default)(_ref7, 2);

    var element = _ref8[0];
    var roles = _ref8[1];
    result = [].concat((0, _toConsumableArray2.default)(result), [{
      match: match(element),
      roles: Array.from(roles),
      specificity: getSelectorSpecificity(element)
    }]);
  }

  return result.sort(bySelectorSpecificity);
}

function getRoles(container) {
  var _ref9 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref9$hidden = _ref9.hidden,
      hidden = _ref9$hidden === void 0 ? false : _ref9$hidden;

  function flattenDOM(node) {
    return [node].concat((0, _toConsumableArray2.default)(Array.from(node.children).reduce(function (acc, child) {
      return [].concat((0, _toConsumableArray2.default)(acc), (0, _toConsumableArray2.default)(flattenDOM(child)));
    }, [])));
  }

  return flattenDOM(container).filter(function (element) {
    return hidden === false ? isInaccessible(element) === false : true;
  }).reduce(function (acc, node) {
    var roles = [];

    if (node.hasAttribute('role')) {
      roles = node.getAttribute('role').split(' ').slice(0, 1);
    } else {
      roles = getImplicitAriaRoles(node);
    }

    return roles.reduce(function (rolesAcc, role) {
      return Array.isArray(rolesAcc[role]) ? (0, _extends4.default)({}, rolesAcc, (0, _defineProperty2.default)({}, role, [].concat((0, _toConsumableArray2.default)(rolesAcc[role]), [node]))) : (0, _extends4.default)({}, rolesAcc, (0, _defineProperty2.default)({}, role, [node]));
    }, acc);
  }, {});
}

function prettyRoles(dom, _ref10) {
  var hidden = _ref10.hidden;
  var roles = getRoles(dom, {
    hidden: hidden
  });
  return Object.entries(roles).filter(function (_ref11) {
    var _ref12 = (0, _slicedToArray2.default)(_ref11, 1),
        role = _ref12[0];

    return role !== 'generic';
  }).map(function (_ref13) {
    var _ref14 = (0, _slicedToArray2.default)(_ref13, 2),
        role = _ref14[0],
        elements = _ref14[1];

    var delimiterBar = '-'.repeat(50);
    var elementsString = elements.map(function (el) {
      var nameString = "Name \"" + (0, _domAccessibilityApi.computeAccessibleName)(el, {
        computedStyleSupportsPseudoElements: (0, _config.getConfig)().computedStyleSupportsPseudoElements
      }) + "\":\n";
      var domString = (0, _prettyDom.prettyDOM)(el.cloneNode(false));
      return "" + nameString + domString;
    }).join('\n\n');
    return role + ":\n\n" + elementsString + "\n\n" + delimiterBar;
  }).join('\n');
}

var logRoles = function logRoles(dom) {
  var _ref15 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref15$hidden = _ref15.hidden,
      hidden = _ref15$hidden === void 0 ? false : _ref15$hidden;

  return console.log(prettyRoles(dom, {
    hidden: hidden
  }));
};

exports.logRoles = logRoles;

function computeAriaSelected(element) {
  if (element.tagName === 'OPTION') {
    return element.selected;
  }

  return checkBooleanAttribute(element, 'aria-selected');
}

function computeAriaChecked(element) {
  if ('indeterminate' in element && element.indeterminate) {
    return undefined;
  }

  if ('checked' in element) {
    return element.checked;
  }

  return checkBooleanAttribute(element, 'aria-checked');
}

function computeAriaPressed(element) {
  return checkBooleanAttribute(element, 'aria-pressed');
}

function computeAriaExpanded(element) {
  return checkBooleanAttribute(element, 'aria-expanded');
}

function checkBooleanAttribute(element, attribute) {
  var attributeValue = element.getAttribute(attribute);

  if (attributeValue === 'true') {
    return true;
  }

  if (attributeValue === 'false') {
    return false;
  }

  return undefined;
}

function computeHeadingLevel(element) {
  var implicitHeadingLevels = {
    H1: 1,
    H2: 2,
    H3: 3,
    H4: 4,
    H5: 5,
    H6: 6
  };
  var ariaLevelAttribute = element.getAttribute('aria-level') && Number(element.getAttribute('aria-level'));
  return ariaLevelAttribute || implicitHeadingLevels[element.tagName];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJvbGUtaGVscGVycy5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldFJvbGVzIiwiZ2V0SW1wbGljaXRBcmlhUm9sZXMiLCJpc1N1YnRyZWVJbmFjY2Vzc2libGUiLCJwcmV0dHlSb2xlcyIsImlzSW5hY2Nlc3NpYmxlIiwiY29tcHV0ZUFyaWFTZWxlY3RlZCIsImNvbXB1dGVBcmlhQ2hlY2tlZCIsImNvbXB1dGVBcmlhUHJlc3NlZCIsImNvbXB1dGVBcmlhRXhwYW5kZWQiLCJjb21wdXRlSGVhZGluZ0xldmVsIiwibG9nUm9sZXMiLCJfYXJpYVF1ZXJ5IiwicmVxdWlyZSIsIl9kb21BY2Nlc3NpYmlsaXR5QXBpIiwiX3ByZXR0eURvbSIsIl9jb25maWciLCJlbGVtZW50Um9sZUxpc3QiLCJidWlsZEVsZW1lbnRSb2xlTGlzdCIsImVsZW1lbnRSb2xlcyIsImVsZW1lbnQiLCJoaWRkZW4iLCJnZXRBdHRyaWJ1dGUiLCJ3aW5kb3ciLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJnZXRDb21wdXRlZFN0eWxlIiwiZGlzcGxheSIsIm9wdGlvbnMiLCJpc1N1YnRyZWVJbmFjY2Vzc2libGVJbXBsIiwidmlzaWJpbGl0eSIsImN1cnJlbnRFbGVtZW50IiwicGFyZW50RWxlbWVudCIsImN1cnJlbnROb2RlIiwibWF0Y2giLCJyb2xlcyIsImVsZW1lbnRSb2xlc01hcCIsIm1ha2VFbGVtZW50U2VsZWN0b3IiLCJuYW1lIiwiYXR0cmlidXRlcyIsIm1hcCIsImF0dHJpYnV0ZU5hbWUiLCJjb25zdHJhaW50cyIsInNob3VsZE5vdEV4aXN0IiwiaW5kZXhPZiIsImpvaW4iLCJnZXRTZWxlY3RvclNwZWNpZmljaXR5IiwibGVuZ3RoIiwiYnlTZWxlY3RvclNwZWNpZmljaXR5IiwibGVmdFNwZWNpZmljaXR5Iiwic3BlY2lmaWNpdHkiLCJyaWdodFNwZWNpZmljaXR5Iiwibm9kZSIsInR5cGVUZXh0SW5kZXgiLCJmaW5kSW5kZXgiLCJhdHRyaWJ1dGUiLCJzbGljZSIsInR5cGUiLCJtYXRjaGVzIiwicmVzdWx0IiwiZW50cmllcyIsIkFycmF5IiwiZnJvbSIsInNvcnQiLCJjb250YWluZXIiLCJmbGF0dGVuRE9NIiwiY2hpbGRyZW4iLCJyZWR1Y2UiLCJhY2MiLCJjaGlsZCIsImZpbHRlciIsImhhc0F0dHJpYnV0ZSIsInNwbGl0Iiwicm9sZXNBY2MiLCJyb2xlIiwiaXNBcnJheSIsImRvbSIsImVsZW1lbnRzIiwiZGVsaW1pdGVyQmFyIiwicmVwZWF0IiwiZWxlbWVudHNTdHJpbmciLCJlbCIsIm5hbWVTdHJpbmciLCJjb21wdXRlQWNjZXNzaWJsZU5hbWUiLCJjb21wdXRlZFN0eWxlU3VwcG9ydHNQc2V1ZG9FbGVtZW50cyIsImdldENvbmZpZyIsImRvbVN0cmluZyIsInByZXR0eURPTSIsImNsb25lTm9kZSIsImNvbnNvbGUiLCJsb2ciLCJ0YWdOYW1lIiwic2VsZWN0ZWQiLCJjaGVja0Jvb2xlYW5BdHRyaWJ1dGUiLCJpbmRldGVybWluYXRlIiwidW5kZWZpbmVkIiwiY2hlY2tlZCIsImF0dHJpYnV0ZVZhbHVlIiwiaW1wbGljaXRIZWFkaW5nTGV2ZWxzIiwiSDEiLCJIMiIsIkgzIiwiSDQiLCJINSIsIkg2IiwiYXJpYUxldmVsQXR0cmlidXRlIiwiTnVtYmVyIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLEVBQUFBLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLFFBQVIsR0FBbUJBLFFBQW5CO0FBQ0FGLE9BQU8sQ0FBQ0csb0JBQVIsR0FBK0JBLG9CQUEvQjtBQUNBSCxPQUFPLENBQUNJLHFCQUFSLEdBQWdDQSxxQkFBaEM7QUFDQUosT0FBTyxDQUFDSyxXQUFSLEdBQXNCQSxXQUF0QjtBQUNBTCxPQUFPLENBQUNNLGNBQVIsR0FBeUJBLGNB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U0FBU3JGLG1CQUFULENBQTZCVSxPQUE3QixFQUFzQztBQUdwQyxNQUFNOEUscUJBQXFCLEdBQUc7QUFDNUJDLElBQUFBLEVBQUUsRUFBRSxDQUR3QjtBQUU1QkMsSUFBQUEsRUFBRSxFQUFFLENBRndCO0FBRzVCQyxJQUFBQSxFQUFFLEVBQUUsQ0FId0I7QUFJNUJDLElBQUFBLEVBQUUsRUFBRSxDQUp3QjtBQUs1QkMsSUFBQUEsRUFBRSxFQUFFLENBTHdCO0FBTTVCQyxJQUFBQSxFQUFFLEVBQUU7QUFOd0IsR0FBOUI7QUFVQSxNQUFNQyxrQkFBa0IsR0FBR3JGLE9BQU8sQ0FBQ0UsWUFBUixDQUFxQixZQUFyQixLQUFzQ29GLE1BQU0sQ0FBQ3RGLE9BQU8sQ0FBQ0UsWUFBUixDQUFxQixZQUFyQixDQUFELENBQXZFO0FBQ0EsU0FBT21GLGtCQUFrQixJQUFJUCxxQkFBcUIsQ0FBQzlFLE9BQU8sQ0FBQ3VFLE9BQVQsQ0FBbEQ7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5nZXRSb2xlcyA9IGdldFJvbGVzO1xuZXhwb3J0cy5nZXRJbXBsaWNpdEFyaWFSb2xlcyA9IGdldEltcGxpY2l0QXJpYVJvbGVzO1xuZXhwb3J0cy5pc1N1YnRyZWVJbmFjY2Vzc2libGUgPSBpc1N1YnRyZWVJbmFjY2Vzc2libGU7XG5leHBvcnRzLnByZXR0eVJvbGVzID0gcHJldHR5Um9sZXM7XG5leHBvcnRzLmlzSW5hY2Nlc3NpYmxlID0gaXNJbmFjY2Vzc2libGU7XG5leHBvcnRzLmNvbXB1dGVBcmlhU2VsZWN0ZWQgPSBjb21wdXRlQXJpYVNlbGVjdGVkO1xuZXhwb3J0cy5jb21wdXRlQXJpYUNoZWNrZWQgPSBjb21wdXRlQXJpYUNoZWNrZWQ7XG5leHBvcnRzLmNvbXB1dGVBcmlhUHJlc3NlZCA9IGNvbXB1dGVBcmlhUHJlc3NlZDtcbmV4cG9ydHMuY29tcHV0ZUFyaWFFeHBhbmRlZCA9IGNvbXB1dGVBcmlhRXhwYW5kZWQ7XG5leHBvcnRzLmNvbXB1dGVIZWFkaW5nTGV2ZWwgPSBjb21wdXRlSGVhZGluZ0xldmVsO1xuZXhwb3J0cy5sb2dSb2xlcyA9IHZvaWQgMDtcblxudmFyIF9hcmlhUXVlcnkgPSByZXF1aXJlKFwiYXJpYS1xdWVyeVwiKTtcblxudmFyIF9kb21BY2Nlc3NpYmlsaXR5QXBpID0gcmVxdWlyZShcImRvbS1hY2Nlc3NpYmlsaXR5LWFwaVwiKTtcblxudmFyIF9wcmV0dHlEb20gPSByZXF1aXJlKFwiLi9wcmV0dHktZG9tXCIpO1xuXG52YXIgX2NvbmZpZyA9IHJlcXVpcmUoXCIuL2NvbmZpZ1wiKTtcblxuY29uc3QgZWxlbWVudFJvbGVMaXN0ID0gYnVpbGRFbGVtZW50Um9sZUxpc3QoX2FyaWFRdWVyeS5lbGVtZW50Um9sZXMpO1xuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgLVxuICogQHJldHVybnMge2Jvb2xlYW59IC0gYHRydWVgIGlmIGBlbGVtZW50YCBhbmQgaXRzIHN1YnRyZWUgYXJlIGluYWNjZXNzaWJsZVxuICovXG5cbmZ1bmN0aW9uIGlzU3VidHJlZUluYWNjZXNzaWJsZShlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50LmhpZGRlbiA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicpID09PSAndHJ1ZScpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGNvbnN0IHdpbmRvdyA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuICBpZiAod2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkuZGlzcGxheSA9PT0gJ25vbmUnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIFBhcnRpYWwgaW1wbGVtZW50YXRpb24gaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMi8jdHJlZV9leGNsdXNpb25cbiAqIHdoaWNoIHNob3VsZCBvbmx5IGJlIHVzZWQgZm9yIGVsZW1lbnRzIHdpdGggYSBub24tcHJlc2VudGF0aW9uYWwgcm9sZSBpLmUuXG4gKiBgcm9sZT1cIm5vbmVcImAgYW5kIGByb2xlPVwicHJlc2VudGF0aW9uXCJgIHdpbGwgbm90IGJlIGV4Y2x1ZGVkLlxuICpcbiAqIEltcGxlbWVudHMgYXJpYS1oaWRkZW4gc2VtYW50aWNzIChpLmUuIHBhcmVudCBvdmVycmlkZXMgY2hpbGQpXG4gKiBJZ25vcmVzIFwiQ2hpbGQgUHJlc2VudGF0aW9uYWw6IFRydWVcIiBjaGFyYWN0ZXJpc3RpY3NcbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgLVxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSAtXG4gKiBAcGFyYW0ge2Z1bmN0aW9uIChlbGVtZW50OiBFbGVtZW50KTogYm9vbGVhbn0gb3B0aW9ucy5pc1N1YnRyZWVJbmFjY2Vzc2libGUgLVxuICogY2FuIGJlIHVzZWQgdG8gcmV0dXJuIGNhY2hlZCByZXN1bHRzIGZyb20gcHJldmlvdXMgaXNTdWJ0cmVlSW5hY2Nlc3NpYmxlIGNhbGxzXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiBleGNsdWRlZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cblxuXG5mdW5jdGlvbiBpc0luYWNjZXNzaWJsZShlbGVtZW50LCBvcHRpb25zID0ge30pIHtcbiAgY29uc3Qge1xuICAgIGlzU3VidHJlZUluYWNjZXNzaWJsZTogaXNTdWJ0cmVlSW5hY2Nlc3NpYmxlSW1wbCA9IGlzU3VidHJlZUluYWNjZXNzaWJsZVxuICB9ID0gb3B0aW9ucztcbiAgY29uc3Qgd2luZG93ID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3OyAvLyBzaW5jZSB2aXNpYmlsaXR5IGlzIGluaGVyaXRlZCB3ZSBjYW4gZXhpdCBlYXJseVxuXG4gIGlmICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS52aXNpYmlsaXR5ID09PSAnaGlkZGVuJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgbGV0IGN1cnJlbnRFbGVtZW50ID0gZWxlbWVudDtcblxuICB3aGlsZSAoY3VycmVudEVsZW1lbnQpIHtcbiAgICBpZiAoaXNTdWJ0cmVlSW5hY2Nlc3NpYmxlSW1wbChjdXJyZW50RWxlbWVudCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGN1cnJlbnRFbGVtZW50ID0gY3VycmVudEVsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ2V0SW1wbGljaXRBcmlhUm9sZXMoY3VycmVudE5vZGUpIHtcbiAgLy8gZXNsaW50IGJ1ZyBoZXJlOlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgZm9yIChjb25zdCB7XG4gICAgbWF0Y2gsXG4gICAgcm9sZXNcbiAgfSBvZiBlbGVtZW50Um9sZUxpc3QpIHtcbiAgICBpZiAobWF0Y2goY3VycmVudE5vZGUpKSB7XG4gICAgICByZXR1cm4gWy4uLnJvbGVzXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gW107XG59XG5cbmZ1bmN0aW9uIGJ1aWxkRWxlbWVudFJvbGVMaXN0KGVsZW1lbnRSb2xlc01hcCkge1xuICBmdW5jdGlvbiBtYWtlRWxlbWVudFNlbGVjdG9yKHtcbiAgICBuYW1lLFxuICAgIGF0dHJpYnV0ZXNcbiAgfSkge1xuICAgIHJldHVybiBgJHtuYW1lfSR7YXR0cmlidXRlcy5tYXAoKHtcbiAgICAgIG5hbWU6IGF0dHJpYnV0ZU5hbWUsXG4gICAgICB2YWx1ZSxcbiAgICAgIGNvbnN0cmFpbnRzID0gW11cbiAgICB9KSA9PiB7XG4gICAgICBjb25zdCBzaG91bGROb3RFeGlzdCA9IGNvbnN0cmFpbnRzLmluZGV4T2YoJ3VuZGVmaW5lZCcpICE9PSAtMTtcblxuICAgICAgaWYgKHNob3VsZE5vdEV4aXN0KSB7XG4gICAgICAgIHJldHVybiBgOm5vdChbJHthdHRyaWJ1dGVOYW1lfV0pYDtcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGBbJHthdHRyaWJ1dGVOYW1lfT1cIiR7dmFsdWV9XCJdYDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBgWyR7YXR0cmlidXRlTmFtZX1dYDtcbiAgICAgIH1cbiAgICB9KS5qb2luKCcnKX1gO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0U2VsZWN0b3JTcGVjaWZpY2l0eSh7XG4gICAgYXR0cmlidXRlcyA9IFtdXG4gIH0pIHtcbiAgICByZXR1cm4gYXR0cmlidXRlcy5sZW5ndGg7XG4gIH1cblxuICBmdW5jdGlvbiBieVNlbGVjdG9yU3BlY2lmaWNpdHkoe1xuICAgIHNwZWNpZmljaXR5OiBsZWZ0U3BlY2lmaWNpdHlcbiAgfSwge1xuICAgIHNwZWNpZmljaXR5OiByaWdodFNwZWNpZmljaXR5XG4gIH0pIHtcbiAgICByZXR1cm4gcmlnaHRTcGVjaWZpY2l0eSAtIGxlZnRTcGVjaWZpY2l0eTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1hdGNoKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gbm9kZSA9PiB7XG4gICAgICBsZXQge1xuICAgICAgICBhdHRyaWJ1dGVzID0gW11cbiAgICAgIH0gPSBlbGVtZW50OyAvLyBodHRwczovL2dpdGh1Yi5jb20vdGVzdGluZy1saWJyYXJ5L2RvbS10ZXN0aW5nLWxpYnJhcnkvaXNzdWVzLzgxNFxuXG4gICAgICBjb25zdCB0eXBlVGV4dEluZGV4ID0gYXR0cmlidXRlcy5maW5kSW5kZXgoYXR0cmlidXRlID0+IGF0dHJpYnV0ZS52YWx1ZSAmJiBhdHRyaWJ1dGUubmFtZSA9PT0gJ3R5cGUnICYmIGF0dHJpYnV0ZS52YWx1ZSA9PT0gJ3RleHQnKTtcblxuICAgICAgaWYgKHR5cGVUZXh0SW5kZXggPj0gMCkge1xuICAgICAgICAvLyBub3QgdXNpbmcgc3BsaWNlIHRvIG5vdCBtdXRhdGUgdGhlIGF0dHJpYnV0ZXMgYXJyYXlcbiAgICAgICAgYXR0cmlidXRlcyA9IFsuLi5hdHRyaWJ1dGVzLnNsaWNlKDAsIHR5cGVUZXh0SW5kZXgpLCAuLi5hdHRyaWJ1dGVzLnNsaWNlKHR5cGVUZXh0SW5kZXggKyAxKV07XG5cbiAgICAgICAgaWYgKG5vZGUudHlwZSAhPT0gJ3RleHQnKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBub2RlLm1hdGNoZXMobWFrZUVsZW1lbnRTZWxlY3Rvcih7IC4uLmVsZW1lbnQsXG4gICAgICAgIGF0dHJpYnV0ZXNcbiAgICAgIH0pKTtcbiAgICB9O1xuICB9XG5cbiAgbGV0IHJlc3VsdCA9IFtdOyAvLyBlc2xpbnQgYnVnIGhlcmU6XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuXG4gIGZvciAoY29uc3QgW2VsZW1lbnQsIHJvbGVzXSBvZiBlbGVtZW50Um9sZXNNYXAuZW50cmllcygpKSB7XG4gICAgcmVzdWx0ID0gWy4uLnJlc3VsdCwge1xuICAgICAgbWF0Y2g6IG1hdGNoKGVsZW1lbnQpLFxuICAgICAgcm9sZXM6IEFycmF5LmZyb20ocm9sZXMpLFxuICAgICAgc3BlY2lmaWNpdHk6IGdldFNlbGVjdG9yU3BlY2lmaWNpdHkoZWxlbWVudClcbiAgICB9XTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQuc29ydChieVNlbGVjdG9yU3BlY2lmaWNpdHkpO1xufVxuXG5mdW5jdGlvbiBnZXRSb2xlcyhjb250YWluZXIsIHtcbiAgaGlkZGVuID0gZmFsc2Vcbn0gPSB7fSkge1xuICBmdW5jdGlvbiBmbGF0dGVuRE9NKG5vZGUpIHtcbiAgICByZXR1cm4gW25vZGUsIC4uLkFycmF5LmZyb20obm9kZS5jaGlsZHJlbikucmVkdWNlKChhY2MsIGNoaWxkKSA9PiBbLi4uYWNjLCAuLi5mbGF0dGVuRE9NKGNoaWxkKV0sIFtdKV07XG4gIH1cblxuICByZXR1cm4gZmxhdHRlbkRPTShjb250YWluZXIpLmZpbHRlcihlbGVtZW50ID0+IHtcbiAgICByZXR1cm4gaGlkZGVuID09PSBmYWxzZSA/IGlzSW5hY2Nlc3NpYmxlKGVsZW1lbnQpID09PSBmYWxzZSA6IHRydWU7XG4gIH0pLnJlZHVjZSgoYWNjLCBub2RlKSA9PiB7XG4gICAgbGV0IHJvbGVzID0gW107IC8vIFRPRE86IFRoaXMgdmlvbGF0ZXMgaHRtbC1hcmlhIHdoaWNoIGRvZXMgbm90IGFsbG93IGFueSByb2xlIG9uIGV2ZXJ5IGVsZW1lbnRcblxuICAgIGlmIChub2RlLmhhc0F0dHJpYnV0ZSgncm9sZScpKSB7XG4gICAgICByb2xlcyA9IG5vZGUuZ2V0QXR0cmlidXRlKCdyb2xlJykuc3BsaXQoJyAnKS5zbGljZSgwLCAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm9sZXMgPSBnZXRJbXBsaWNpdEFyaWFSb2xlcyhub2RlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcm9sZXMucmVkdWNlKChyb2xlc0FjYywgcm9sZSkgPT4gQXJyYXkuaXNBcnJheShyb2xlc0FjY1tyb2xlXSkgPyB7IC4uLnJvbGVzQWNjLFxuICAgICAgW3JvbGVdOiBbLi4ucm9sZXNBY2Nbcm9sZV0sIG5vZGVdXG4gICAgfSA6IHsgLi4ucm9sZXNBY2MsXG4gICAgICBbcm9sZV06IFtub2RlXVxuICAgIH0sIGFjYyk7XG4gIH0sIHt9KTtcbn1cblxuZnVuY3Rpb24gcHJldHR5Um9sZXMoZG9tLCB7XG4gIGhpZGRlblxufSkge1xuICBjb25zdCByb2xlcyA9IGdldFJvbGVzKGRvbSwge1xuICAgIGhpZGRlblxuICB9KTsgLy8gV2UgcHJlZmVyIHRvIHNraXAgZ2VuZXJpYyByb2xlLCB3ZSBkb24ndCByZWNvbW1lbmQgaXRcblxuICByZXR1cm4gT2JqZWN0LmVudHJpZXMocm9sZXMpLmZpbHRlcigoW3JvbGVdKSA9PiByb2xlICE9PSAnZ2VuZXJpYycpLm1hcCgoW3JvbGUsIGVsZW1lbnRzXSkgPT4ge1xuICAgIGNvbnN0IGRlbGltaXRlckJhciA9ICctJy5yZXBlYXQoNTApO1xuICAgIGNvbnN0IGVsZW1lbnRzU3RyaW5nID0gZWxlbWVudHMubWFwKGVsID0+IHtcbiAgICAgIGNvbnN0IG5hbWVTdHJpbmcgPSBgTmFtZSBcIiR7KDAsIF9kb21BY2Nlc3NpYmlsaXR5QXBpLmNvbXB1dGVBY2Nlc3NpYmxlTmFtZSkoZWwsIHtcbiAgICAgICAgY29tcHV0ZWRTdHlsZVN1cHBvcnRzUHNldWRvRWxlbWVudHM6ICgwLCBfY29uZmlnLmdldENvbmZpZykoKS5jb21wdXRlZFN0eWxlU3VwcG9ydHNQc2V1ZG9FbGVtZW50c1xuICAgICAgfSl9XCI6XFxuYDtcbiAgICAgIGNvbnN0IGRvbVN0cmluZyA9ICgwLCBfcHJldHR5RG9tLnByZXR0eURPTSkoZWwuY2xvbmVOb2RlKGZhbHNlKSk7XG4gICAgICByZXR1cm4gYCR7bmFtZVN0cmluZ30ke2RvbVN0cmluZ31gO1xuICAgIH0pLmpvaW4oJ1xcblxcbicpO1xuICAgIHJldHVybiBgJHtyb2xlfTpcXG5cXG4ke2VsZW1lbnRzU3RyaW5nfVxcblxcbiR7ZGVsaW1pdGVyQmFyfWA7XG4gIH0pLmpvaW4oJ1xcbicpO1xufVxuXG5jb25zdCBsb2dSb2xlcyA9IChkb20sIHtcbiAgaGlkZGVuID0gZmFsc2Vcbn0gPSB7fSkgPT4gY29uc29sZS5sb2cocHJldHR5Um9sZXMoZG9tLCB7XG4gIGhpZGRlblxufSkpO1xuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgLVxuICogQHJldHVybnMge2Jvb2xlYW4gfCB1bmRlZmluZWR9IC0gZmFsc2UvdHJ1ZSBpZiAobm90KXNlbGVjdGVkLCB1bmRlZmluZWQgaWYgbm90IHNlbGVjdGFibGVcbiAqL1xuXG5cbmV4cG9ydHMubG9nUm9sZXMgPSBsb2dSb2xlcztcblxuZnVuY3Rpb24gY29tcHV0ZUFyaWFTZWxlY3RlZChlbGVtZW50KSB7XG4gIC8vIGltcGxpY2l0IHZhbHVlIGZyb20gaHRtbC1hYW0gbWFwcGluZ3M6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sLWFhbS0xLjAvI2h0bWwtYXR0cmlidXRlLXN0YXRlLWFuZC1wcm9wZXJ0eS1tYXBwaW5nc1xuICAvLyBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbC1hYW0tMS4wLyNkZXRhaWxzLWlkLTk3XG4gIGlmIChlbGVtZW50LnRhZ05hbWUgPT09ICdPUFRJT04nKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuc2VsZWN0ZWQ7XG4gIH0gLy8gZXhwbGljaXQgdmFsdWVcblxuXG4gIHJldHVybiBjaGVja0Jvb2xlYW5BdHRyaWJ1dGUoZWxlbWVudCwgJ2FyaWEtc2VsZWN0ZWQnKTtcbn1cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IC1cbiAqIEByZXR1cm5zIHtib29sZWFuIHwgdW5kZWZpbmVkfSAtIGZhbHNlL3RydWUgaWYgKG5vdCljaGVja2VkLCB1bmRlZmluZWQgaWYgbm90IGNoZWNrZWQtYWJsZVxuICovXG5cblxuZnVuY3Rpb24gY29tcHV0ZUFyaWFDaGVja2VkKGVsZW1lbnQpIHtcbiAgLy8gaW1wbGljaXQgdmFsdWUgZnJvbSBodG1sLWFhbSBtYXBwaW5nczogaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWwtYWFtLTEuMC8jaHRtbC1hdHRyaWJ1dGUtc3RhdGUtYW5kLXByb3BlcnR5LW1hcHBpbmdzXG4gIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sLWFhbS0xLjAvI2RldGFpbHMtaWQtNTZcbiAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWwtYWFtLTEuMC8jZGV0YWlscy1pZC02N1xuICBpZiAoJ2luZGV0ZXJtaW5hdGUnIGluIGVsZW1lbnQgJiYgZWxlbWVudC5pbmRldGVybWluYXRlKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICgnY2hlY2tlZCcgaW4gZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50LmNoZWNrZWQ7XG4gIH0gLy8gZXhwbGljaXQgdmFsdWVcblxuXG4gIHJldHVybiBjaGVja0Jvb2xlYW5BdHRyaWJ1dGUoZWxlbWVudCwgJ2FyaWEtY2hlY2tlZCcpO1xufVxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgLVxuICogQHJldHVybnMge2Jvb2xlYW4gfCB1bmRlZmluZWR9IC0gZmFsc2UvdHJ1ZSBpZiAobm90KXByZXNzZWQsIHVuZGVmaW5lZCBpZiBub3QgcHJlc3MtYWJsZVxuICovXG5cblxuZnVuY3Rpb24gY29tcHV0ZUFyaWFQcmVzc2VkKGVsZW1lbnQpIHtcbiAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jYXJpYS1wcmVzc2VkXG4gIHJldHVybiBjaGVja0Jvb2xlYW5BdHRyaWJ1dGUoZWxlbWVudCwgJ2FyaWEtcHJlc3NlZCcpO1xufVxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgLVxuICogQHJldHVybnMge2Jvb2xlYW4gfCB1bmRlZmluZWR9IC0gZmFsc2UvdHJ1ZSBpZiAobm90KWV4cGFuZGVkLCB1bmRlZmluZWQgaWYgbm90IGV4cGFuZC1hYmxlXG4gKi9cblxuXG5mdW5jdGlvbiBjb21wdXRlQXJpYUV4cGFuZGVkKGVsZW1lbnQpIHtcbiAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jYXJpYS1leHBhbmRlZFxuICByZXR1cm4gY2hlY2tCb29sZWFuQXR0cmlidXRlKGVsZW1lbnQsICdhcmlhLWV4cGFuZGVkJyk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrQm9vbGVhbkF0dHJpYnV0ZShlbGVtZW50LCBhdHRyaWJ1dGUpIHtcbiAgY29uc3QgYXR0cmlidXRlVmFsdWUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xuXG4gIGlmIChhdHRyaWJ1dGVWYWx1ZSA9PT0gJ3RydWUnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoYXR0cmlidXRlVmFsdWUgPT09ICdmYWxzZScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgLVxuICogQHJldHVybnMge251bWJlciB8IHVuZGVmaW5lZH0gLSBudW1iZXIgaWYgaW1wbGljaXQgaGVhZGluZyBvciBhcmlhLWxldmVsIHByZXNlbnQsIG90aGVyd2lzZSB1bmRlZmluZWRcbiAqL1xuXG5cbmZ1bmN0aW9uIGNvbXB1dGVIZWFkaW5nTGV2ZWwoZWxlbWVudCkge1xuICAvLyBodHRwczovL3czYy5naXRodWIuaW8vaHRtbC1hYW0vI2VsLWgxLWg2XG4gIC8vIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby9odG1sLWFhbS8jZWwtaDEtaDZcbiAgY29uc3QgaW1wbGljaXRIZWFkaW5nTGV2ZWxzID0ge1xuICAgIEgxOiAxLFxuICAgIEgyOiAyLFxuICAgIEgzOiAzLFxuICAgIEg0OiA0LFxuICAgIEg1OiA1LFxuICAgIEg2OiA2XG4gIH07IC8vIGV4cGxpY2l0IGFyaWEtbGV2ZWwgdmFsdWVcbiAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMi8jYXJpYS1sZXZlbFxuXG4gIGNvbnN0IGFyaWFMZXZlbEF0dHJpYnV0ZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdhcmlhLWxldmVsJykgJiYgTnVtYmVyKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdhcmlhLWxldmVsJykpO1xuICByZXR1cm4gYXJpYUxldmVsQXR0cmlidXRlIHx8IGltcGxpY2l0SGVhZGluZ0xldmVsc1tlbGVtZW50LnRhZ05hbWVdO1xufSJdfQ==
e4f0ad0bb12e0c99ceeaac197cec537a
var hiddenKeys = require("../internals/hidden-keys");

var isObject = require("../internals/is-object");

var has = require("../internals/has");

var defineProperty = require("../internals/object-define-property").f;

var uid = require("../internals/uid");

var FREEZING = require("../internals/freezing");

var METADATA = uid('meta');
var id = 0;

var isExtensible = Object.isExtensible || function () {
  return true;
};

var setMetadata = function setMetadata(it) {
  defineProperty(it, METADATA, {
    value: {
      objectID: 'O' + id++,
      weakData: {}
    }
  });
};

var fastKey = function fastKey(it, create) {
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;

  if (!has(it, METADATA)) {
    if (!isExtensible(it)) return 'F';
    if (!create) return 'E';
    setMetadata(it);
  }

  return it[METADATA].objectID;
};

var getWeakData = function getWeakData(it, create) {
  if (!has(it, METADATA)) {
    if (!isExtensible(it)) return true;
    if (!create) return false;
    setMetadata(it);
  }

  return it[METADATA].weakData;
};

var onFreeze = function onFreeze(it) {
  if (FREEZING && meta.REQUIRED && isExtensible(it) && !has(it, METADATA)) setMetadata(it);
  return it;
};

var meta = module.exports = {
  REQUIRED: false,
  fastKey: fastKey,
  getWeakData: getWeakData,
  onFreeze: onFreeze
};
hiddenKeys[METADATA] = true;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImludGVybmFsLW1ldGFkYXRhLmpzIl0sIm5hbWVzIjpbImhpZGRlbktleXMiLCJyZXF1aXJlIiwiaXNPYmplY3QiLCJoYXMiLCJkZWZpbmVQcm9wZXJ0eSIsImYiLCJ1aWQiLCJGUkVFWklORyIsIk1FVEFEQVRBIiwiaWQiLCJpc0V4dGVuc2libGUiLCJPYmplY3QiLCJzZXRNZXRhZGF0YSIsIml0IiwidmFsdWUiLCJvYmplY3RJRCIsIndlYWtEYXRhIiwiZmFzdEtleSIsImNyZWF0ZSIsImdldFdlYWtEYXRhIiwib25GcmVlemUiLCJtZXRhIiwiUkVRVUlSRUQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxVQUFVLEdBQUdDLE9BQU8sNEJBQXhCOztBQUNBLElBQUlDLFFBQVEsR0FBR0QsT0FBTywwQkFBdEI7O0FBQ0EsSUFBSUUsR0FBRyxHQUFHRixPQUFPLG9CQUFqQjs7QUFDQSxJQUFJRyxjQUFjLEdBQUdILE9BQU8sdUNBQVAsQ0FBK0NJLENBQXBFOztBQUNBLElBQUlDLEdBQUcsR0FBR0wsT0FBTyxvQkFBakI7O0FBQ0EsSUFBSU0sUUFBUSxHQUFHTixPQUFPLHlCQUF0Qjs7QUFFQSxJQUFJTyxRQUFRLEdBQUdGLEdBQUcsQ0FBQyxNQUFELENBQWxCO0FBQ0EsSUFBSUcsRUFBRSxHQUFHLENBQVQ7O0FBR0EsSUFBSUMsWUFBWSxHQUFHQyxNQUFNLENBQUNELFlBQVAsSUFBdUIsWUFBWTtBQUNwRCxTQUFPLElBQVA7QUFDRCxDQUZEOztBQUlBLElBQUlFLFdBQVcsR0FBRyxTQUFkQSxXQUFjLENBQVVDLEVBQVYsRUFBYztBQUM5QlQsRUFBQUEsY0FBYyxDQUFDUyxFQUFELEVBQUtMLFFBQUwsRUFBZTtBQUFFTSxJQUFBQSxLQUFLLEVBQUU7QUFDcENDLE1BQUFBLFFBQVEsRUFBRSxNQUFNTixFQUFFLEVBRGtCO0FBRXBDTyxNQUFBQSxRQUFRLEVBQUU7QUFGMEI7QUFBVCxHQUFmLENBQWQ7QUFJRCxDQUxEOztBQU9BLElBQUlDLE9BQU8sR0FBRyxTQUFWQSxPQUFVLENBQVVKLEVBQVYsRUFBY0ssTUFBZCxFQUFzQjtBQUVsQyxNQUFJLENBQUNoQixRQUFRLENBQUNXLEVBQUQsQ0FBYixFQUFtQixPQUFPLE9BQU9BLEVBQVAsSUFBYSxRQUFiLEdBQXdCQSxFQUF4QixHQUE2QixDQUFDLE9BQU9BLEVBQVAsSUFBYSxRQUFiLEdBQXdCLEdBQXhCLEdBQThCLEdBQS9CLElBQXNDQSxFQUExRTs7QUFDbkIsTUFBSSxDQUFDVixHQUFHLENBQUNVLEVBQUQsRUFBS0wsUUFBTCxDQUFSLEVBQXdCO0FBRXRCLFFBQUksQ0FBQ0UsWUFBWSxDQUFDRyxFQUFELENBQWpCLEVBQXVCLE9BQU8sR0FBUDtBQUV2QixRQUFJLENBQUNLLE1BQUwsRUFBYSxPQUFPLEdBQVA7QUFFYk4sSUFBQUEsV0FBVyxDQUFDQyxFQUFELENBQVg7QUFFRDs7QUFBQyxTQUFPQSxFQUFFLENBQUNMLFFBQUQsQ0FBRixDQUFhTyxRQUFwQjtBQUNILENBWkQ7O0FBY0EsSUFBSUksV0FBVyxHQUFHLFNBQWRBLFdBQWMsQ0FBVU4sRUFBVixFQUFjSyxNQUFkLEVBQXNCO0FBQ3RDLE1BQUksQ0FBQ2YsR0FBRyxDQUFDVSxFQUFELEVBQUtMLFFBQUwsQ0FBUixFQUF3QjtBQUV0QixRQUFJLENBQUNFLFlBQVksQ0FBQ0csRUFBRCxDQUFqQixFQUF1QixPQUFPLElBQVA7QUFFdkIsUUFBSSxDQUFDSyxNQUFMLEVBQWEsT0FBTyxLQUFQO0FBRWJOLElBQUFBLFdBQVcsQ0FBQ0MsRUFBRCxDQUFYO0FBRUQ7O0FBQUMsU0FBT0EsRUFBRSxDQUFDTCxRQUFELENBQUYsQ0FBYVEsUUFBcEI7QUFDSCxDQVZEOztBQWFBLElBQUlJLFFBQVEsR0FBRyxTQUFYQSxRQUFXLENBQVVQLEVBQVYsRUFBYztBQUMzQixNQUFJTixRQUFRLElBQUljLElBQUksQ0FBQ0MsUUFBakIsSUFBNkJaLFlBQVksQ0FBQ0csRUFBRCxDQUF6QyxJQUFpRCxDQUFDVixHQUFHLENBQUNVLEVBQUQsRUFBS0wsUUFBTCxDQUF6RCxFQUF5RUksV0FBVyxDQUFDQyxFQUFELENBQVg7QUFDekUsU0FBT0EsRUFBUDtBQUNELENBSEQ7O0FBS0EsSUFBSVEsSUFBSSxHQUFHRSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDMUJGLEVBQUFBLFFBQVEsRUFBRSxLQURnQjtBQUUxQkwsRUFBQUEsT0FBTyxFQUFFQSxPQUZpQjtBQUcxQkUsRUFBQUEsV0FBVyxFQUFFQSxXQUhhO0FBSTFCQyxFQUFBQSxRQUFRLEVBQUVBO0FBSmdCLENBQTVCO0FBT0FwQixVQUFVLENBQUNRLFFBQUQsQ0FBVixHQUF1QixJQUF2QiIsInNvdXJjZXNDb250ZW50IjpbInZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciBGUkVFWklORyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mcmVlemluZycpO1xuXG52YXIgTUVUQURBVEEgPSB1aWQoJ21ldGEnKTtcbnZhciBpZCA9IDA7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtaXNleHRlbnNpYmxlIC0tIHNhZmVcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRydWU7XG59O1xuXG52YXIgc2V0TWV0YWRhdGEgPSBmdW5jdGlvbiAoaXQpIHtcbiAgZGVmaW5lUHJvcGVydHkoaXQsIE1FVEFEQVRBLCB7IHZhbHVlOiB7XG4gICAgb2JqZWN0SUQ6ICdPJyArIGlkKyssIC8vIG9iamVjdCBJRFxuICAgIHdlYWtEYXRhOiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IH0pO1xufTtcblxudmFyIGZhc3RLZXkgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICAvLyByZXR1cm4gYSBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBREFUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuICdGJztcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gJ0UnO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YWRhdGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFEQVRBXS5vYmplY3RJRDtcbn07XG5cbnZhciBnZXRXZWFrRGF0YSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIGlmICghaGFzKGl0LCBNRVRBREFUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YWRhdGEoaXQpO1xuICAvLyByZXR1cm4gdGhlIHN0b3JlIG9mIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFEQVRBXS53ZWFrRGF0YTtcbn07XG5cbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWklORyAmJiBtZXRhLlJFUVVJUkVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQURBVEEpKSBzZXRNZXRhZGF0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG5cbnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIFJFUVVJUkVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2Vha0RhdGE6IGdldFdlYWtEYXRhLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG5cbmhpZGRlbktleXNbTUVUQURBVEFdID0gdHJ1ZTtcbiJdfQ==
a6ea0bed3abeb0dcd3ceb042956f4149
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var _require = require("./intercept"),
    addInterceptor = _require.addInterceptor,
    isOn = _require.isOn;

var common = require("./common");

var assert = require('assert');

var url = require('url');

var debug = require('debug')('nock.scope');

var _require2 = require('events'),
    EventEmitter = _require2.EventEmitter;

var Interceptor = require("./interceptor");

var fs;

try {
  fs = require('fs');
} catch (err) {}

var Scope = function (_EventEmitter) {
  (0, _inherits2.default)(Scope, _EventEmitter);

  var _super = _createSuper(Scope);

  function Scope(basePath, options) {
    var _this;

    (0, _classCallCheck2.default)(this, Scope);
    _this = _super.call(this);
    _this.keyedInterceptors = {};
    _this.interceptors = [];
    _this.transformPathFunction = null;
    _this.transformRequestBodyFunction = null;
    _this.matchHeaders = [];
    _this.scopeOptions = options || {};
    _this.urlParts = {};
    _this._persist = false;
    _this.contentLen = false;
    _this.date = null;
    _this.basePath = basePath;
    _this.basePathname = '';
    _this.port = null;
    _this._defaultReplyHeaders = [];
    var logNamespace = String(basePath);

    if (!(basePath instanceof RegExp)) {
      _this.urlParts = url.parse(basePath);
      _this.port = _this.urlParts.port || (_this.urlParts.protocol === 'http:' ? 80 : 443);
      _this.basePathname = _this.urlParts.pathname.replace(/\/$/, '');
      _this.basePath = _this.urlParts.protocol + "//" + _this.urlParts.hostname + ":" + _this.port;
      logNamespace = _this.urlParts.host;
    }

    _this.logger = debug.extend(logNamespace);
    return _this;
  }

  (0, _createClass2.default)(Scope, [{
    key: "add",
    value: function add(key, interceptor) {
      if (!(key in this.keyedInterceptors)) {
        this.keyedInterceptors[key] = [];
      }

      this.keyedInterceptors[key].push(interceptor);
      addInterceptor(this.basePath, interceptor, this, this.scopeOptions, this.urlParts.hostname);
    }
  }, {
    key: "remove",
    value: function remove(key, interceptor) {
      if (this._persist) {
        return;
      }

      var arr = this.keyedInterceptors[key];

      if (arr) {
        arr.splice(arr.indexOf(interceptor), 1);

        if (arr.length === 0) {
          delete this.keyedInterceptors[key];
        }
      }
    }
  }, {
    key: "intercept",
    value: function intercept(uri, method, requestBody, interceptorOptions) {
      var ic = new Interceptor(this, uri, method, requestBody, interceptorOptions);
      this.interceptors.push(ic);
      return ic;
    }
  }, {
    key: "get",
    value: function get(uri, requestBody, options) {
      return this.intercept(uri, 'GET', requestBody, options);
    }
  }, {
    key: "post",
    value: function post(uri, requestBody, options) {
      return this.intercept(uri, 'POST', requestBody, options);
    }
  }, {
    key: "put",
    value: function put(uri, requestBody, options) {
      return this.intercept(uri, 'PUT', requestBody, options);
    }
  }, {
    key: "head",
    value: function head(uri, requestBody, options) {
      return this.intercept(uri, 'HEAD', requestBody, options);
    }
  }, {
    key: "patch",
    value: function patch(uri, requestBody, options) {
      return this.intercept(uri, 'PATCH', requestBody, options);
    }
  }, {
    key: "merge",
    value: function merge(uri, requestBody, options) {
      return this.intercept(uri, 'MERGE', requestBody, options);
    }
  }, {
    key: "delete",
    value: function _delete(uri, requestBody, options) {
      return this.intercept(uri, 'DELETE', requestBody, options);
    }
  }, {
    key: "options",
    value: function options(uri, requestBody, _options) {
      return this.intercept(uri, 'OPTIONS', requestBody, _options);
    }
  }, {
    key: "pendingMocks",
    value: function pendingMocks() {
      var _this2 = this;

      return this.activeMocks().filter(function (key) {
        return _this2.keyedInterceptors[key].some(function (_ref) {
          var interceptionCounter = _ref.interceptionCounter,
              optional = _ref.optional;
          var persistedAndUsed = _this2._persist && interceptionCounter > 0;
          return !persistedAndUsed && !optional;
        });
      });
    }
  }, {
    key: "activeMocks",
    value: function activeMocks() {
      return Object.keys(this.keyedInterceptors);
    }
  }, {
    key: "isDone",
    value: function isDone() {
      if (!isOn()) {
        return true;
      }

      return this.pendingMocks().length === 0;
    }
  }, {
    key: "done",
    value: function done() {
      assert.ok(this.isDone(), "Mocks not yet satisfied:\n" + this.pendingMocks().join('\n'));
    }
  }, {
    key: "buildFilter",
    value: function buildFilter() {
      var filteringArguments = arguments;

      if (arguments[0] instanceof RegExp) {
        return function (candidate) {
          if (typeof candidate !== 'string') {
            throw Error("Nock internal assertion failed: typeof candidate is " + typeof candidate + ". If you encounter this error, please report it as a bug.");
          }

          return candidate.replace(filteringArguments[0], filteringArguments[1]);
        };
      } else if (typeof arguments[0] === 'function') {
        return arguments[0];
      }
    }
  }, {
    key: "filteringPath",
    value: function filteringPath() {
      this.transformPathFunction = this.buildFilter.apply(this, arguments);

      if (!this.transformPathFunction) {
        throw new Error('Invalid arguments: filtering path should be a function or a regular expression');
      }

      return this;
    }
  }, {
    key: "filteringRequestBody",
    value: function filteringRequestBody() {
      this.transformRequestBodyFunction = this.buildFilter.apply(this, arguments);

      if (!this.transformRequestBodyFunction) {
        throw new Error('Invalid arguments: filtering request body should be a function or a regular expression');
      }

      return this;
    }
  }, {
    key: "matchHeader",
    value: function matchHeader(name, value) {
      this.matchHeaders.push({
        name: name.toLowerCase(),
        value: value
      });
      return this;
    }
  }, {
    key: "defaultReplyHeaders",
    value: function defaultReplyHeaders(headers) {
      this._defaultReplyHeaders = common.headersInputToRawArray(headers);
      return this;
    }
  }, {
    key: "persist",
    value: function persist() {
      var flag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      if (typeof flag !== 'boolean') {
        throw new Error('Invalid arguments: argument should be a boolean');
      }

      this._persist = flag;
      return this;
    }
  }, {
    key: "shouldPersist",
    value: function shouldPersist() {
      return this._persist;
    }
  }, {
    key: "replyContentLength",
    value: function replyContentLength() {
      this.contentLen = true;
      return this;
    }
  }, {
    key: "replyDate",
    value: function replyDate(d) {
      this.date = d || new Date();
      return this;
    }
  }]);
  return Scope;
}(EventEmitter);

function loadDefs(path) {
  if (!fs) {
    throw new Error('No fs');
  }

  var contents = fs.readFileSync(path);
  return JSON.parse(contents);
}

function load(path) {
  return define(loadDefs(path));
}

function getStatusFromDefinition(nockDef) {
  if (nockDef.reply !== undefined) {
    var parsedReply = parseInt(nockDef.reply, 10);

    if (isNaN(parsedReply)) {
      throw Error('`reply`, when present, must be a numeric string');
    }

    return parsedReply;
  }

  var DEFAULT_STATUS_OK = 200;
  return nockDef.status || DEFAULT_STATUS_OK;
}

function getScopeFromDefinition(nockDef) {
  if (nockDef.port !== undefined) {
    var options = url.parse(nockDef.scope);

    if (options.port === null) {
      return nockDef.scope + ":" + nockDef.port;
    } else {
      if (parseInt(options.port) !== parseInt(nockDef.port)) {
        throw new Error('Mismatched port numbers in scope and port properties of nock definition.');
      }
    }
  }

  return nockDef.scope;
}

function tryJsonParse(string) {
  try {
    return JSON.parse(string);
  } catch (err) {
    return string;
  }
}

function define(nockDefs) {
  var scopes = [];
  nockDefs.forEach(function (nockDef) {
    var nscope = getScopeFromDefinition(nockDef);
    var npath = nockDef.path;

    if (!nockDef.method) {
      throw Error('Method is required');
    }

    var method = nockDef.method.toLowerCase();
    var status = getStatusFromDefinition(nockDef);
    var rawHeaders = nockDef.rawHeaders || [];
    var reqheaders = nockDef.reqheaders || {};
    var badheaders = nockDef.badheaders || [];
    var options = (0, _extends2.default)({}, nockDef.options);
    options.reqheaders = reqheaders;
    options.badheaders = badheaders;
    var response;

    if (!nockDef.response) {
      response = '';
    } else if (nockDef.responseIsBinary) {
      response = Buffer.from(nockDef.response, 'hex');
    } else {
      response = typeof nockDef.response === 'string' ? tryJsonParse(nockDef.response) : nockDef.response;
    }

    var scope = new Scope(nscope, options);
    Object.entries(reqheaders).forEach(function (_ref2) {
      var _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
          fieldName = _ref3[0],
          value = _ref3[1];

      scope.matchHeader(fieldName, value);
    });
    var acceptableFilters = ['filteringRequestBody', 'filteringPath'];
    acceptableFilters.forEach(function (filter) {
      if (nockDef[filter]) {
        scope[filter](nockDef[filter]);
      }
    });
    scope.intercept(npath, method, nockDef.body).reply(status, response, rawHeaders);
    scopes.push(scope);
  });
  return scopes;
}

module.exports = {
  Scope: Scope,
  load: load,
  loadDefs: loadDefs,
  define: define
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
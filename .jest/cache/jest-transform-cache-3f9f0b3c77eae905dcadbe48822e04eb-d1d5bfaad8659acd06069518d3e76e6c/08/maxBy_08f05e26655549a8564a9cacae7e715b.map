{"version":3,"sources":["maxBy.js"],"names":["_curry3","require","maxBy","f","a","b","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAAgBC,OAAO,sBAAlC;;AA4BA,IAAIC,KAAK,GAAgBF,OAAO,CAAC,SAASE,KAAT,CAAeC,CAAf,EAAkBC,CAAlB,EAAqBC,CAArB,EAAwB;AACvD,SAAOF,CAAC,CAACE,CAAD,CAAD,GAAOF,CAAC,CAACC,CAAD,CAAR,GAAcC,CAAd,GAAkBD,CAAzB;AACD,CAF+B,CAAhC;;AAGAE,MAAM,CAACC,OAAP,GAAiBL,KAAjB","sourcesContent":["var _curry3 = /*#__PURE__*/require('./internal/_curry3');\n\n/**\n * Takes a function and two values, and returns whichever value produces the\n * larger result when passed to the provided function.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Relation\n * @sig Ord b => (a -> b) -> a -> a -> a\n * @param {Function} f\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.max, R.minBy\n * @example\n *\n *      //  square :: Number -> Number\n *      const square = n => n * n;\n *\n *      R.maxBy(square, -3, 2); //=> -3\n *\n *      R.reduce(R.maxBy(square), 0, [3, -5, 4, 1, -2]); //=> -5\n *      R.reduce(R.maxBy(square), 0, []); //=> 0\n */\n\n\nvar maxBy = /*#__PURE__*/_curry3(function maxBy(f, a, b) {\n  return f(b) > f(a) ? b : a;\n});\nmodule.exports = maxBy;"]}
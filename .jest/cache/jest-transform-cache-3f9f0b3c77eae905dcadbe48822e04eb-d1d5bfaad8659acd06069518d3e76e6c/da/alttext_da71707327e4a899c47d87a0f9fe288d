84ee217a87bc741b82e1d6cb40ee1968
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findByAltText = exports.findAllByAltText = exports.getAllByAltText = exports.getByAltText = exports.queryAllByAltText = exports.queryByAltText = void 0;

var _queryHelpers = require("../query-helpers");

var _helpers = require("../helpers");

var _allUtils = require("./all-utils");

var queryAllByAltText = function queryAllByAltText(container, alt) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref$exact = _ref.exact,
      exact = _ref$exact === void 0 ? true : _ref$exact,
      collapseWhitespace = _ref.collapseWhitespace,
      trim = _ref.trim,
      normalizer = _ref.normalizer;

  (0, _helpers.checkContainerType)(container);
  var matcher = exact ? _allUtils.matches : _allUtils.fuzzyMatches;
  var matchNormalizer = (0, _allUtils.makeNormalizer)({
    collapseWhitespace: collapseWhitespace,
    trim: trim,
    normalizer: normalizer
  });
  return Array.from(container.querySelectorAll('img,input,area')).filter(function (node) {
    return matcher(node.getAttribute('alt'), node, alt, matchNormalizer);
  });
};

var getMultipleError = function getMultipleError(c, alt) {
  return "Found multiple elements with the alt text: " + alt;
};

var getMissingError = function getMissingError(c, alt) {
  return "Unable to find an element with the alt text: " + alt;
};

var queryAllByAltTextWithSuggestions = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByAltText, queryAllByAltText.name, 'queryAll');
exports.queryAllByAltText = queryAllByAltTextWithSuggestions;

var _ref2 = (0, _allUtils.buildQueries)(queryAllByAltText, getMultipleError, getMissingError),
    _ref3 = (0, _slicedToArray2.default)(_ref2, 5),
    queryByAltText = _ref3[0],
    getAllByAltText = _ref3[1],
    getByAltText = _ref3[2],
    findAllByAltText = _ref3[3],
    findByAltText = _ref3[4];

exports.findByAltText = findByAltText;
exports.findAllByAltText = findAllByAltText;
exports.getByAltText = getByAltText;
exports.getAllByAltText = getAllByAltText;
exports.queryByAltText = queryByAltText;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFsdC10ZXh0LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZmluZEJ5QWx0VGV4dCIsImZpbmRBbGxCeUFsdFRleHQiLCJnZXRBbGxCeUFsdFRleHQiLCJnZXRCeUFsdFRleHQiLCJxdWVyeUFsbEJ5QWx0VGV4dCIsInF1ZXJ5QnlBbHRUZXh0IiwiX3F1ZXJ5SGVscGVycyIsInJlcXVpcmUiLCJfaGVscGVycyIsIl9hbGxVdGlscyIsImNvbnRhaW5lciIsImFsdCIsImV4YWN0IiwiY29sbGFwc2VXaGl0ZXNwYWNlIiwidHJpbSIsIm5vcm1hbGl6ZXIiLCJjaGVja0NvbnRhaW5lclR5cGUiLCJtYXRjaGVyIiwibWF0Y2hlcyIsImZ1enp5TWF0Y2hlcyIsIm1hdGNoTm9ybWFsaXplciIsIm1ha2VOb3JtYWxpemVyIiwiQXJyYXkiLCJmcm9tIiwicXVlcnlTZWxlY3RvckFsbCIsImZpbHRlciIsIm5vZGUiLCJnZXRBdHRyaWJ1dGUiLCJnZXRNdWx0aXBsZUVycm9yIiwiYyIsImdldE1pc3NpbmdFcnJvciIsInF1ZXJ5QWxsQnlBbHRUZXh0V2l0aFN1Z2dlc3Rpb25zIiwid3JhcEFsbEJ5UXVlcnlXaXRoU3VnZ2VzdGlvbiIsIm5hbWUiLCJidWlsZFF1ZXJpZXMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFFQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsRUFBQUEsS0FBSyxFQUFFO0FBRG9DLENBQTdDO0FBR0FELE9BQU8sQ0FBQ0UsYUFBUixHQUF3QkYsT0FBTyxDQUFDRyxnQkFBUixHQUEyQkgsT0FBTyxDQUFDSSxlQUFSLEdBQTBCSixPQUFPLENBQUNLLFlBQVIsR0FBdUJMLE9BQU8sQ0FBQ00saUJBQVIsR0FBNEJOLE9BQU8sQ0FBQ08sY0FBUixHQUF5QixLQUFLLENBQTlKOztBQUVBLElBQUlDLGFBQWEsR0FBR0MsT0FBTyxvQkFBM0I7O0FBRUEsSUFBSUMsUUFBUSxHQUFHRCxPQUFPLGNBQXRCOztBQUVBLElBQUlFLFNBQVMsR0FBR0YsT0FBTyxlQUF2Qjs7QUFFQSxJQUFNSCxpQkFBaUIsR0FBRyxTQUFwQkEsaUJBQW9CLENBQUNNLFNBQUQsRUFBWUMsR0FBWixFQUtmO0FBQUEsaUZBQVAsRUFBTztBQUFBLHdCQUpUQyxLQUlTO0FBQUEsTUFKVEEsS0FJUywyQkFKRCxJQUlDO0FBQUEsTUFIVEMsa0JBR1MsUUFIVEEsa0JBR1M7QUFBQSxNQUZUQyxJQUVTLFFBRlRBLElBRVM7QUFBQSxNQURUQyxVQUNTLFFBRFRBLFVBQ1M7O0FBQ1QsR0FBQyxHQUFHUCxRQUFRLENBQUNRLGtCQUFiLEVBQWlDTixTQUFqQztBQUNBLE1BQU1PLE9BQU8sR0FBR0wsS0FBSyxHQUFHSCxTQUFTLENBQUNTLE9BQWIsR0FBdUJULFNBQVMsQ0FBQ1UsWUFBdEQ7QUFDQSxNQUFNQyxlQUFlLEdBQUcsQ0FBQyxHQUFHWCxTQUFTLENBQUNZLGNBQWQsRUFBOEI7QUFDcERSLElBQUFBLGtCQUFrQixFQUFsQkEsa0JBRG9EO0FBRXBEQyxJQUFBQSxJQUFJLEVBQUpBLElBRm9EO0FBR3BEQyxJQUFBQSxVQUFVLEVBQVZBO0FBSG9ELEdBQTlCLENBQXhCO0FBS0EsU0FBT08sS0FBSyxDQUFDQyxJQUFOLENBQVdiLFNBQVMsQ0FBQ2MsZ0JBQVYsQ0FBMkIsZ0JBQTNCLENBQVgsRUFBeURDLE1BQXpELENBQWdFLFVBQUFDLElBQUk7QUFBQSxXQUFJVCxPQUFPLENBQUNTLElBQUksQ0FBQ0MsWUFBTCxDQUFrQixLQUFsQixDQUFELEVBQTJCRCxJQUEzQixFQUFpQ2YsR0FBakMsRUFBc0NTLGVBQXRDLENBQVg7QUFBQSxHQUFwRSxDQUFQO0FBQ0QsQ0FkRDs7QUFnQkEsSUFBTVEsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFtQixDQUFDQyxDQUFELEVBQUlsQixHQUFKO0FBQUEseURBQTBEQSxHQUExRDtBQUFBLENBQXpCOztBQUVBLElBQU1tQixlQUFlLEdBQUcsU0FBbEJBLGVBQWtCLENBQUNELENBQUQsRUFBSWxCLEdBQUo7QUFBQSwyREFBNERBLEdBQTVEO0FBQUEsQ0FBeEI7O0FBRUEsSUFBTW9CLGdDQUFnQyxHQUFHLENBQUMsR0FBR3pCLGFBQWEsQ0FBQzBCLDRCQUFsQixFQUFnRDVCLGlCQUFoRCxFQUFtRUEsaUJBQWlCLENBQUM2QixJQUFyRixFQUEyRixVQUEzRixDQUF6QztBQUNBbkMsT0FBTyxDQUFDTSxpQkFBUixHQUE0QjJCLGdDQUE1Qjs7QUFDQSxZQUF5RixDQUFDLEdBQUd0QixTQUFTLENBQUN5QixZQUFkLEVBQTRCOUIsaUJBQTVCLEVBQStDd0IsZ0JBQS9DLEVBQWlFRSxlQUFqRSxDQUF6RjtBQUFBO0FBQUEsSUFBT3pCLGNBQVA7QUFBQSxJQUF1QkgsZUFBdkI7QUFBQSxJQUF3Q0MsWUFBeEM7QUFBQSxJQUFzREYsZ0JBQXREO0FBQUEsSUFBd0VELGFBQXhFOztBQUNBRixPQUFPLENBQUNFLGFBQVIsR0FBd0JBLGFBQXhCO0FBQ0FGLE9BQU8sQ0FBQ0csZ0JBQVIsR0FBMkJBLGdCQUEzQjtBQUNBSCxPQUFPLENBQUNLLFlBQVIsR0FBdUJBLFlBQXZCO0FBQ0FMLE9BQU8sQ0FBQ0ksZUFBUixHQUEwQkEsZUFBMUI7QUFDQUosT0FBTyxDQUFDTyxjQUFSLEdBQXlCQSxjQUF6QiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5maW5kQnlBbHRUZXh0ID0gZXhwb3J0cy5maW5kQWxsQnlBbHRUZXh0ID0gZXhwb3J0cy5nZXRBbGxCeUFsdFRleHQgPSBleHBvcnRzLmdldEJ5QWx0VGV4dCA9IGV4cG9ydHMucXVlcnlBbGxCeUFsdFRleHQgPSBleHBvcnRzLnF1ZXJ5QnlBbHRUZXh0ID0gdm9pZCAwO1xuXG52YXIgX3F1ZXJ5SGVscGVycyA9IHJlcXVpcmUoXCIuLi9xdWVyeS1oZWxwZXJzXCIpO1xuXG52YXIgX2hlbHBlcnMgPSByZXF1aXJlKFwiLi4vaGVscGVyc1wiKTtcblxudmFyIF9hbGxVdGlscyA9IHJlcXVpcmUoXCIuL2FsbC11dGlsc1wiKTtcblxuY29uc3QgcXVlcnlBbGxCeUFsdFRleHQgPSAoY29udGFpbmVyLCBhbHQsIHtcbiAgZXhhY3QgPSB0cnVlLFxuICBjb2xsYXBzZVdoaXRlc3BhY2UsXG4gIHRyaW0sXG4gIG5vcm1hbGl6ZXJcbn0gPSB7fSkgPT4ge1xuICAoMCwgX2hlbHBlcnMuY2hlY2tDb250YWluZXJUeXBlKShjb250YWluZXIpO1xuICBjb25zdCBtYXRjaGVyID0gZXhhY3QgPyBfYWxsVXRpbHMubWF0Y2hlcyA6IF9hbGxVdGlscy5mdXp6eU1hdGNoZXM7XG4gIGNvbnN0IG1hdGNoTm9ybWFsaXplciA9ICgwLCBfYWxsVXRpbHMubWFrZU5vcm1hbGl6ZXIpKHtcbiAgICBjb2xsYXBzZVdoaXRlc3BhY2UsXG4gICAgdHJpbSxcbiAgICBub3JtYWxpemVyXG4gIH0pO1xuICByZXR1cm4gQXJyYXkuZnJvbShjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnaW1nLGlucHV0LGFyZWEnKSkuZmlsdGVyKG5vZGUgPT4gbWF0Y2hlcihub2RlLmdldEF0dHJpYnV0ZSgnYWx0JyksIG5vZGUsIGFsdCwgbWF0Y2hOb3JtYWxpemVyKSk7XG59O1xuXG5jb25zdCBnZXRNdWx0aXBsZUVycm9yID0gKGMsIGFsdCkgPT4gYEZvdW5kIG11bHRpcGxlIGVsZW1lbnRzIHdpdGggdGhlIGFsdCB0ZXh0OiAke2FsdH1gO1xuXG5jb25zdCBnZXRNaXNzaW5nRXJyb3IgPSAoYywgYWx0KSA9PiBgVW5hYmxlIHRvIGZpbmQgYW4gZWxlbWVudCB3aXRoIHRoZSBhbHQgdGV4dDogJHthbHR9YDtcblxuY29uc3QgcXVlcnlBbGxCeUFsdFRleHRXaXRoU3VnZ2VzdGlvbnMgPSAoMCwgX3F1ZXJ5SGVscGVycy53cmFwQWxsQnlRdWVyeVdpdGhTdWdnZXN0aW9uKShxdWVyeUFsbEJ5QWx0VGV4dCwgcXVlcnlBbGxCeUFsdFRleHQubmFtZSwgJ3F1ZXJ5QWxsJyk7XG5leHBvcnRzLnF1ZXJ5QWxsQnlBbHRUZXh0ID0gcXVlcnlBbGxCeUFsdFRleHRXaXRoU3VnZ2VzdGlvbnM7XG5jb25zdCBbcXVlcnlCeUFsdFRleHQsIGdldEFsbEJ5QWx0VGV4dCwgZ2V0QnlBbHRUZXh0LCBmaW5kQWxsQnlBbHRUZXh0LCBmaW5kQnlBbHRUZXh0XSA9ICgwLCBfYWxsVXRpbHMuYnVpbGRRdWVyaWVzKShxdWVyeUFsbEJ5QWx0VGV4dCwgZ2V0TXVsdGlwbGVFcnJvciwgZ2V0TWlzc2luZ0Vycm9yKTtcbmV4cG9ydHMuZmluZEJ5QWx0VGV4dCA9IGZpbmRCeUFsdFRleHQ7XG5leHBvcnRzLmZpbmRBbGxCeUFsdFRleHQgPSBmaW5kQWxsQnlBbHRUZXh0O1xuZXhwb3J0cy5nZXRCeUFsdFRleHQgPSBnZXRCeUFsdFRleHQ7XG5leHBvcnRzLmdldEFsbEJ5QWx0VGV4dCA9IGdldEFsbEJ5QWx0VGV4dDtcbmV4cG9ydHMucXVlcnlCeUFsdFRleHQgPSBxdWVyeUJ5QWx0VGV4dDsiXX0=
{"version":3,"sources":["CardStack.tsx"],"names":["EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","options","getHeaderHeights","descriptors","curr","style","StyleSheet","height","previous","safeAreaInsets","headerStatusBarHeight","isParentHeaderShown","top","acc","getDistanceFromOptions","gestureDirection","mode","ModalTransition","DefaultTransition","getProgressFromGesture","distance","width","Math","layout","inputRange","outputRange","React","props","state","gestures","descriptor","animationEnabled","Animated","routes","scenes","previousRoute","self","index","nextRoute","oldScene","currentGesture","route","previousGesture","nextGesture","nextDescriptor","previousDescriptor","scene","progress","current","next","undefined","__memo","headerHeights","constructor","Dimensions","e","previousHeight","getPreviousRoute","previousScene","render","detachInactiveScreens","Platform","shouldUseActivityState","focusedRoute","focusedDescriptor","focusedOptions","focusedHeaderHeight","defaultTransitionPreset","headerMode","headerStyleInterpolator","forNoAnimationHeader","insets","right","bottom","left","activeScreensLimit","i","detachPreviousScreen","isFloatHeaderAbsolute","headerShown","headerTransparent","floatingHeader","renderHeader","getPreviousScene","getFocusedRoute","onContentHeightChange","styleInterpolator","styles","isScreensEnabled","handleLayout","focused","gesture","isScreenActive","sceneForActivity","outputValue","extrapolate","transitionSpec","cardStyleInterpolator","forNoAnimationCard","transitionConfig","nextScene","safeAreaInsetTop","safeAreaInsetRight","safeAreaInsetBottom","safeAreaInsetLeft","headerHeight","closingRouteKeys","getGesturesEnabled","gestureVelocityImpact","container","flex","absolute","position","floating","zIndex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  LayoutChangeEvent,\n  Dimensions,\n  Platform,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\nimport type {\n  ParamListBase,\n  Route,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport { screensEnabled } from 'react-native-screens';\n\nimport {\n  MaybeScreenContainer,\n  MaybeScreen,\n  shouldUseActivityState,\n} from '../Screens';\nimport { getDefaultHeaderHeight } from '../Header/HeaderSegment';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport CardContainer from './CardContainer';\nimport {\n  DefaultTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport { forNoAnimation as forNoAnimationHeader } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport type {\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  Scene,\n  StackDescriptorMap,\n  StackNavigationOptions,\n  StackDescriptor,\n} from '../../types';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  mode: StackCardMode;\n  insets: EdgeInsets;\n  state: StackNavigationState<ParamListBase>;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getGesturesEnabled: (props: { route: Route<string> }) => boolean;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  headerMode: StackHeaderMode;\n  isParentHeaderShown: boolean;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: (force: boolean) => void;\n  onPageChangeCancel?: () => void;\n  onGestureStart?: (props: { route: Route<string> }) => void;\n  onGestureEnd?: (props: { route: Route<string> }) => void;\n  onGestureCancel?: (props: { route: Route<string> }) => void;\n  detachInactiveScreens?: boolean;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene<Route<string>>[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getHeaderHeights = (\n  routes: Route<string>[],\n  insets: EdgeInsets,\n  isParentHeaderShown: boolean,\n  descriptors: StackDescriptorMap,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return routes.reduce<Record<string, number>>((acc, curr) => {\n    const { options = {} } = descriptors[curr.key] || {};\n    const style: any = StyleSheet.flatten(options.headerStyle || {});\n\n    const height =\n      typeof style.height === 'number' ? style.height : previous[curr.key];\n\n    const safeAreaInsets = {\n      ...insets,\n      ...options.safeAreaInsets,\n    };\n\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : safeAreaInsets.top,\n    } = options;\n\n    acc[curr.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  mode: StackCardMode,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    gestureDirection = mode === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = descriptor?.options || {};\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  mode: StackCardMode,\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    mode,\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(props.mode, state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          props.descriptors[route.key] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          props.descriptors[nextRoute?.key] ||\n          state.descriptors[nextRoute?.key];\n\n        const previousDescriptor =\n          props.descriptors[previousRoute?.key] ||\n          state.descriptors[previousRoute?.key];\n\n        const scene = {\n          route,\n          descriptor,\n          progress: {\n            current: getProgressFromGesture(\n              props.mode,\n              currentGesture,\n              state.layout,\n              descriptor\n            ),\n            next: nextGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor\n                )\n              : undefined,\n          },\n          __memo: [\n            route,\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        props.routes,\n        props.insets,\n        props.isParentHeaderShown,\n        state.descriptors,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: { height, width },\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          props.routes,\n          props.insets,\n          props.isParentHeaderShown,\n          state.descriptors,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      mode,\n      insets,\n      descriptors,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      getGesturesEnabled,\n      renderHeader,\n      renderScene,\n      headerMode,\n      isParentHeaderShown,\n      onTransitionStart,\n      onTransitionEnd,\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      // Enable on new versions of `react-native-screens`\n      // On older versions of `react-native-screens`, there's an issue with screens not being responsive to user interaction.\n      detachInactiveScreens = Platform.OS === 'web' || shouldUseActivityState,\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedDescriptor = descriptors[focusedRoute.key];\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n\n    let defaultTransitionPreset =\n      mode === 'modal' ? ModalTransition : DefaultTransition;\n\n    if (headerMode === 'screen') {\n      defaultTransitionPreset = {\n        ...defaultTransitionPreset,\n        headerStyleInterpolator: forNoAnimationHeader,\n      };\n    }\n\n    const {\n      top = insets.top,\n      right = insets.right,\n      bottom = insets.bottom,\n      left = insets.left,\n    } = focusedOptions.safeAreaInsets || {};\n\n    let activeScreensLimit = 1;\n\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = mode === 'modal'\n          ? i !== scenes.length - 1\n          : true,\n      } = scenes[i].descriptor.options;\n\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        break;\n      }\n    }\n\n    const isFloatHeaderAbsolute =\n      headerMode === 'float'\n        ? this.state.scenes.slice(-2).some((scene) => {\n            const { descriptor } = scene;\n            const options = descriptor ? descriptor.options : {};\n            const { headerTransparent, headerShown = true } = options;\n\n            if (headerTransparent || headerShown === false) {\n              return true;\n            }\n\n            return false;\n          })\n        : false;\n\n    const floatingHeader =\n      headerMode === 'float' ? (\n        <React.Fragment key=\"header\">\n          {renderHeader({\n            mode: 'float',\n            layout,\n            insets: { top, right, bottom, left },\n            scenes,\n            getPreviousScene: this.getPreviousScene,\n            getFocusedRoute: this.getFocusedRoute,\n            onContentHeightChange: this.handleHeaderLayout,\n            gestureDirection:\n              focusedOptions.gestureDirection !== undefined\n                ? focusedOptions.gestureDirection\n                : defaultTransitionPreset.gestureDirection,\n            styleInterpolator:\n              focusedOptions.headerStyleInterpolator !== undefined\n                ? focusedOptions.headerStyleInterpolator\n                : defaultTransitionPreset.headerStyleInterpolator,\n            style: [\n              styles.floating,\n              isFloatHeaderAbsolute && [\n                // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n                { height: focusedHeaderHeight },\n                styles.absolute,\n              ],\n            ],\n          })}\n        </React.Fragment>\n      ) : null;\n\n    const isScreensEnabled = screensEnabled?.() && detachInactiveScreens;\n\n    return (\n      <React.Fragment>\n        {isFloatHeaderAbsolute ? null : floatingHeader}\n        <MaybeScreenContainer\n          enabled={isScreensEnabled}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            // For the screens that shouldn't be active, the value is 0\n            // For those that should be active, but are not the top screen, the value is 1\n            // For those on top of the stack and with interaction enabled, the value is 2\n            // For the old implementation, it stays the same it was\n            let isScreenActive: Animated.AnimatedInterpolation | 2 | 1 | 0 = 1;\n\n            if (shouldUseActivityState || Platform.OS === 'web') {\n              if (index < self.length - activeScreensLimit - 1) {\n                // screen should be inactive because it is too deep in the stack\n                isScreenActive = STATE_INACTIVE;\n              } else {\n                const sceneForActivity = scenes[self.length - 1];\n                const outputValue =\n                  index === self.length - 1\n                    ? STATE_ON_TOP // the screen is on top after the transition\n                    : index >= self.length - activeScreensLimit\n                    ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n                    : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n                isScreenActive = sceneForActivity\n                  ? sceneForActivity.progress.current.interpolate({\n                      inputRange: [0, 1 - EPSILON, 1],\n                      outputRange: [1, 1, outputValue],\n                      extrapolate: 'clamp',\n                    })\n                  : STATE_TRANSITIONING_OR_BELOW_TOP;\n              }\n            } else {\n              isScreenActive = scene.progress.next\n                ? scene.progress.next.interpolate({\n                    inputRange: [0, 1 - EPSILON, 1],\n                    outputRange: [1, 1, 0],\n                    extrapolate: 'clamp',\n                  })\n                : 1;\n            }\n\n            const {\n              safeAreaInsets,\n              headerShown = true,\n              headerTransparent,\n              cardShadowEnabled,\n              cardOverlayEnabled,\n              cardOverlay,\n              cardStyle,\n              animationEnabled,\n              gestureResponseDistance,\n              gestureVelocityImpact,\n              gestureDirection = defaultTransitionPreset.gestureDirection,\n              transitionSpec = defaultTransitionPreset.transitionSpec,\n              cardStyleInterpolator = animationEnabled === false\n                ? forNoAnimationCard\n                : defaultTransitionPreset.cardStyleInterpolator,\n              headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n            } = scene.descriptor\n              ? scene.descriptor.options\n              : ({} as StackNavigationOptions);\n\n            let transitionConfig = {\n              gestureDirection,\n              transitionSpec,\n              cardStyleInterpolator,\n              headerStyleInterpolator,\n            };\n\n            // When a screen is not the last, it should use next screen's transition config\n            // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n            // For example combining a slide and a modal transition would look wrong otherwise\n            // With this approach, combining different transition styles in the same navigator mostly looks right\n            // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n            // but majority of the transitions look alright\n            if (index !== self.length - 1) {\n              const nextScene = scenes[index + 1];\n\n              if (nextScene) {\n                const {\n                  animationEnabled,\n                  gestureDirection = defaultTransitionPreset.gestureDirection,\n                  transitionSpec = defaultTransitionPreset.transitionSpec,\n                  cardStyleInterpolator = animationEnabled === false\n                    ? forNoAnimationCard\n                    : defaultTransitionPreset.cardStyleInterpolator,\n                  headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                } = nextScene.descriptor\n                  ? nextScene.descriptor.options\n                  : ({} as StackNavigationOptions);\n\n                transitionConfig = {\n                  gestureDirection,\n                  transitionSpec,\n                  cardStyleInterpolator,\n                  headerStyleInterpolator,\n                };\n              }\n            }\n\n            const {\n              top: safeAreaInsetTop = insets.top,\n              right: safeAreaInsetRight = insets.right,\n              bottom: safeAreaInsetBottom = insets.bottom,\n              left: safeAreaInsetLeft = insets.left,\n            } = safeAreaInsets || {};\n\n            const headerHeight =\n              headerMode !== 'none' && headerShown !== false\n                ? headerHeights[route.key]\n                : 0;\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={isScreensEnabled}\n                active={isScreenActive}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  cardOverlay={cardOverlay}\n                  cardOverlayEnabled={cardOverlayEnabled}\n                  cardShadowEnabled={cardShadowEnabled}\n                  cardStyle={cardStyle}\n                  onPageChangeStart={onPageChangeStart}\n                  onPageChangeConfirm={onPageChangeConfirm}\n                  onPageChangeCancel={onPageChangeCancel}\n                  onGestureStart={onGestureStart}\n                  onGestureCancel={onGestureCancel}\n                  onGestureEnd={onGestureEnd}\n                  gestureResponseDistance={gestureResponseDistance}\n                  headerHeight={headerHeight}\n                  isParentHeaderShown={isParentHeaderShown}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousScene={this.getPreviousScene}\n                  getFocusedRoute={this.getFocusedRoute}\n                  mode={mode}\n                  headerMode={headerMode}\n                  headerShown={headerShown}\n                  hasAbsoluteHeader={\n                    isFloatHeaderAbsolute && !headerTransparent\n                  }\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  gestureEnabled={index !== 0 && getGesturesEnabled({ route })}\n                  gestureVelocityImpact={gestureVelocityImpact}\n                  {...transitionConfig}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {isFloatHeaderAbsolute ? floatingHeader : null}\n      </React.Fragment>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"]}
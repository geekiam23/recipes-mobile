125583b82df1e814f808e041ff84d545
'use strict';

var $ = require("../internals/export");

var isObject = require("../internals/is-object");

var isArray = require("../internals/is-array");

var toAbsoluteIndex = require("../internals/to-absolute-index");

var toLength = require("../internals/to-length");

var toIndexedObject = require("../internals/to-indexed-object");

var createProperty = require("../internals/create-property");

var wellKnownSymbol = require("../internals/well-known-symbol");

var arrayMethodHasSpeciesSupport = require("../internals/array-method-has-species-support");

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('slice');
var SPECIES = wellKnownSymbol('species');
var nativeSlice = [].slice;
var max = Math.max;
$({
  target: 'Array',
  proto: true,
  forced: !HAS_SPECIES_SUPPORT
}, {
  slice: function slice(start, end) {
    var O = toIndexedObject(this);
    var length = toLength(O.length);
    var k = toAbsoluteIndex(start, length);
    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
    var Constructor, result, n;

    if (isArray(O)) {
      Constructor = O.constructor;

      if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {
        Constructor = undefined;
      } else if (isObject(Constructor)) {
        Constructor = Constructor[SPECIES];
        if (Constructor === null) Constructor = undefined;
      }

      if (Constructor === Array || Constructor === undefined) {
        return nativeSlice.call(O, k, fin);
      }
    }

    result = new (Constructor === undefined ? Array : Constructor)(max(fin - k, 0));

    for (n = 0; k < fin; k++, n++) {
      if (k in O) createProperty(result, n, O[k]);
    }

    result.length = n;
    return result;
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVzLmFycmF5LnNsaWNlLmpzIl0sIm5hbWVzIjpbIiQiLCJyZXF1aXJlIiwiaXNPYmplY3QiLCJpc0FycmF5IiwidG9BYnNvbHV0ZUluZGV4IiwidG9MZW5ndGgiLCJ0b0luZGV4ZWRPYmplY3QiLCJjcmVhdGVQcm9wZXJ0eSIsIndlbGxLbm93blN5bWJvbCIsImFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQiLCJIQVNfU1BFQ0lFU19TVVBQT1JUIiwiU1BFQ0lFUyIsIm5hdGl2ZVNsaWNlIiwic2xpY2UiLCJtYXgiLCJNYXRoIiwidGFyZ2V0IiwicHJvdG8iLCJmb3JjZWQiLCJzdGFydCIsImVuZCIsIk8iLCJsZW5ndGgiLCJrIiwiZmluIiwidW5kZWZpbmVkIiwiQ29uc3RydWN0b3IiLCJyZXN1bHQiLCJuIiwiY29uc3RydWN0b3IiLCJBcnJheSIsInByb3RvdHlwZSIsImNhbGwiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLElBQUlBLENBQUMsR0FBR0MsT0FBTyx1QkFBZjs7QUFDQSxJQUFJQyxRQUFRLEdBQUdELE9BQU8sMEJBQXRCOztBQUNBLElBQUlFLE9BQU8sR0FBR0YsT0FBTyx5QkFBckI7O0FBQ0EsSUFBSUcsZUFBZSxHQUFHSCxPQUFPLGtDQUE3Qjs7QUFDQSxJQUFJSSxRQUFRLEdBQUdKLE9BQU8sMEJBQXRCOztBQUNBLElBQUlLLGVBQWUsR0FBR0wsT0FBTyxrQ0FBN0I7O0FBQ0EsSUFBSU0sY0FBYyxHQUFHTixPQUFPLGdDQUE1Qjs7QUFDQSxJQUFJTyxlQUFlLEdBQUdQLE9BQU8sa0NBQTdCOztBQUNBLElBQUlRLDRCQUE0QixHQUFHUixPQUFPLGlEQUExQzs7QUFFQSxJQUFJUyxtQkFBbUIsR0FBR0QsNEJBQTRCLENBQUMsT0FBRCxDQUF0RDtBQUVBLElBQUlFLE9BQU8sR0FBR0gsZUFBZSxDQUFDLFNBQUQsQ0FBN0I7QUFDQSxJQUFJSSxXQUFXLEdBQUcsR0FBR0MsS0FBckI7QUFDQSxJQUFJQyxHQUFHLEdBQUdDLElBQUksQ0FBQ0QsR0FBZjtBQUtBZCxDQUFDLENBQUM7QUFBRWdCLEVBQUFBLE1BQU0sRUFBRSxPQUFWO0FBQW1CQyxFQUFBQSxLQUFLLEVBQUUsSUFBMUI7QUFBZ0NDLEVBQUFBLE1BQU0sRUFBRSxDQUFDUjtBQUF6QyxDQUFELEVBQWlFO0FBQ2hFRyxFQUFBQSxLQUFLLEVBQUUsU0FBU0EsS0FBVCxDQUFlTSxLQUFmLEVBQXNCQyxHQUF0QixFQUEyQjtBQUNoQyxRQUFJQyxDQUFDLEdBQUdmLGVBQWUsQ0FBQyxJQUFELENBQXZCO0FBQ0EsUUFBSWdCLE1BQU0sR0FBR2pCLFFBQVEsQ0FBQ2dCLENBQUMsQ0FBQ0MsTUFBSCxDQUFyQjtBQUNBLFFBQUlDLENBQUMsR0FBR25CLGVBQWUsQ0FBQ2UsS0FBRCxFQUFRRyxNQUFSLENBQXZCO0FBQ0EsUUFBSUUsR0FBRyxHQUFHcEIsZUFBZSxDQUFDZ0IsR0FBRyxLQUFLSyxTQUFSLEdBQW9CSCxNQUFwQixHQUE2QkYsR0FBOUIsRUFBbUNFLE1BQW5DLENBQXpCO0FBRUEsUUFBSUksV0FBSixFQUFpQkMsTUFBakIsRUFBeUJDLENBQXpCOztBQUNBLFFBQUl6QixPQUFPLENBQUNrQixDQUFELENBQVgsRUFBZ0I7QUFDZEssTUFBQUEsV0FBVyxHQUFHTCxDQUFDLENBQUNRLFdBQWhCOztBQUVBLFVBQUksT0FBT0gsV0FBUCxJQUFzQixVQUF0QixLQUFxQ0EsV0FBVyxLQUFLSSxLQUFoQixJQUF5QjNCLE9BQU8sQ0FBQ3VCLFdBQVcsQ0FBQ0ssU0FBYixDQUFyRSxDQUFKLEVBQW1HO0FBQ2pHTCxRQUFBQSxXQUFXLEdBQUdELFNBQWQ7QUFDRCxPQUZELE1BRU8sSUFBSXZCLFFBQVEsQ0FBQ3dCLFdBQUQsQ0FBWixFQUEyQjtBQUNoQ0EsUUFBQUEsV0FBVyxHQUFHQSxXQUFXLENBQUNmLE9BQUQsQ0FBekI7QUFDQSxZQUFJZSxXQUFXLEtBQUssSUFBcEIsRUFBMEJBLFdBQVcsR0FBR0QsU0FBZDtBQUMzQjs7QUFDRCxVQUFJQyxXQUFXLEtBQUtJLEtBQWhCLElBQXlCSixXQUFXLEtBQUtELFNBQTdDLEVBQXdEO0FBQ3RELGVBQU9iLFdBQVcsQ0FBQ29CLElBQVosQ0FBaUJYLENBQWpCLEVBQW9CRSxDQUFwQixFQUF1QkMsR0FBdkIsQ0FBUDtBQUNEO0FBQ0Y7O0FBQ0RHLElBQUFBLE1BQU0sR0FBRyxLQUFLRCxXQUFXLEtBQUtELFNBQWhCLEdBQTRCSyxLQUE1QixHQUFvQ0osV0FBekMsRUFBc0RaLEdBQUcsQ0FBQ1UsR0FBRyxHQUFHRCxDQUFQLEVBQVUsQ0FBVixDQUF6RCxDQUFUOztBQUNBLFNBQUtLLENBQUMsR0FBRyxDQUFULEVBQVlMLENBQUMsR0FBR0MsR0FBaEIsRUFBcUJELENBQUMsSUFBSUssQ0FBQyxFQUEzQjtBQUErQixVQUFJTCxDQUFDLElBQUlGLENBQVQsRUFBWWQsY0FBYyxDQUFDb0IsTUFBRCxFQUFTQyxDQUFULEVBQVlQLENBQUMsQ0FBQ0UsQ0FBRCxDQUFiLENBQWQ7QUFBM0M7O0FBQ0FJLElBQUFBLE1BQU0sQ0FBQ0wsTUFBUCxHQUFnQk0sQ0FBaEI7QUFDQSxXQUFPRCxNQUFQO0FBQ0Q7QUF6QitELENBQWpFLENBQUQiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xuXG52YXIgSEFTX1NQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ3NsaWNlJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgbmF0aXZlU2xpY2UgPSBbXS5zbGljZTtcbnZhciBtYXggPSBNYXRoLm1heDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5zbGljZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zbGljZVxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmdzIGFuZCBET00gb2JqZWN0c1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIUhBU19TUEVDSUVTX1NVUFBPUlQgfSwge1xuICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGsgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbmd0aCk7XG4gICAgdmFyIGZpbiA9IHRvQWJzb2x1dGVJbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZCwgbGVuZ3RoKTtcbiAgICAvLyBpbmxpbmUgYEFycmF5U3BlY2llc0NyZWF0ZWAgZm9yIHVzYWdlIG5hdGl2ZSBgQXJyYXkjc2xpY2VgIHdoZXJlIGl0J3MgcG9zc2libGVcbiAgICB2YXIgQ29uc3RydWN0b3IsIHJlc3VsdCwgbjtcbiAgICBpZiAoaXNBcnJheShPKSkge1xuICAgICAgQ29uc3RydWN0b3IgPSBPLmNvbnN0cnVjdG9yO1xuICAgICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICAgIGlmICh0eXBlb2YgQ29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiAoQ29uc3RydWN0b3IgPT09IEFycmF5IHx8IGlzQXJyYXkoQ29uc3RydWN0b3IucHJvdG90eXBlKSkpIHtcbiAgICAgICAgQ29uc3RydWN0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KENvbnN0cnVjdG9yKSkge1xuICAgICAgICBDb25zdHJ1Y3RvciA9IENvbnN0cnVjdG9yW1NQRUNJRVNdO1xuICAgICAgICBpZiAoQ29uc3RydWN0b3IgPT09IG51bGwpIENvbnN0cnVjdG9yID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKENvbnN0cnVjdG9yID09PSBBcnJheSB8fCBDb25zdHJ1Y3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVTbGljZS5jYWxsKE8sIGssIGZpbik7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdCA9IG5ldyAoQ29uc3RydWN0b3IgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQ29uc3RydWN0b3IpKG1heChmaW4gLSBrLCAwKSk7XG4gICAgZm9yIChuID0gMDsgayA8IGZpbjsgaysrLCBuKyspIGlmIChrIGluIE8pIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgbiwgT1trXSk7XG4gICAgcmVzdWx0Lmxlbmd0aCA9IG47XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iXX0=
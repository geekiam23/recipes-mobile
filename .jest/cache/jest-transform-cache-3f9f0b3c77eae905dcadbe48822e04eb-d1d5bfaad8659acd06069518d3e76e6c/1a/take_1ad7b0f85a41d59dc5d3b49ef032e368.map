{"version":3,"sources":["take.js"],"names":["_curry2","require","_dispatchable","_xtake","slice","take","n","xs","Infinity","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAAgBC,OAAO,sBAAlC;;AAEA,IAAIC,aAAa,GAAgBD,OAAO,4BAAxC;;AAEA,IAAIE,MAAM,GAAgBF,OAAO,qBAAjC;;AAEA,IAAIG,KAAK,GAAgBH,OAAO,WAAhC;;AA+CA,IAAII,IAAI,GAAgBL,OAAO,CAAeE,aAAa,CAAC,CAAC,MAAD,CAAD,EAAWC,MAAX,EAAmB,SAASE,IAAT,CAAcC,CAAd,EAAiBC,EAAjB,EAAqB;AACjG,SAAOH,KAAK,CAAC,CAAD,EAAIE,CAAC,GAAG,CAAJ,GAAQE,QAAR,GAAmBF,CAAvB,EAA0BC,EAA1B,CAAZ;AACD,CAF0D,CAA5B,CAA/B;;AAGAE,MAAM,CAACC,OAAP,GAAiBL,IAAjB","sourcesContent":["var _curry2 = /*#__PURE__*/require('./internal/_curry2');\n\nvar _dispatchable = /*#__PURE__*/require('./internal/_dispatchable');\n\nvar _xtake = /*#__PURE__*/require('./internal/_xtake');\n\nvar slice = /*#__PURE__*/require('./slice');\n\n/**\n * Returns the first `n` elements of the given list, string, or\n * transducer/transformer (or object with a `take` method).\n *\n * Dispatches to the `take` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n\n * @param {*} list\n * @return {*}\n * @see R.drop\n * @example\n *\n *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']\n *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.take(3, 'ramda');               //=> 'ram'\n *\n *      const personnel = [\n *        'Dave Brubeck',\n *        'Paul Desmond',\n *        'Eugene Wright',\n *        'Joe Morello',\n *        'Gerry Mulligan',\n *        'Bob Bates',\n *        'Joe Dodge',\n *        'Ron Crotty'\n *      ];\n *\n *      const takeFive = R.take(5);\n *      takeFive(personnel);\n *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']\n * @symb R.take(-1, [a, b]) = [a, b]\n * @symb R.take(0, [a, b]) = []\n * @symb R.take(1, [a, b]) = [a]\n * @symb R.take(2, [a, b]) = [a, b]\n */\n\n\nvar take = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['take'], _xtake, function take(n, xs) {\n  return slice(0, n < 0 ? Infinity : n, xs);\n}));\nmodule.exports = take;"]}
fe5763d402f8d0fd541da512df442e5d
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FlatList = exports.DrawerLayoutAndroid = exports.TextInput = exports.Switch = exports.ScrollView = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _createNativeWrapper = _interopRequireDefault(require("../handlers/createNativeWrapper"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var ScrollView = (0, _createNativeWrapper.default)(_reactNative.ScrollView, {
  disallowInterruption: true,
  shouldCancelWhenOutside: false
});
exports.ScrollView = ScrollView;
var Switch = (0, _createNativeWrapper.default)(_reactNative.Switch, {
  shouldCancelWhenOutside: false,
  shouldActivateOnStart: true,
  disallowInterruption: true
});
exports.Switch = Switch;
var TextInput = (0, _createNativeWrapper.default)(_reactNative.TextInput);
exports.TextInput = TextInput;
var DrawerLayoutAndroid = (0, _createNativeWrapper.default)(_reactNative.DrawerLayoutAndroid, {
  disallowInterruption: true
});
exports.DrawerLayoutAndroid = DrawerLayoutAndroid;
DrawerLayoutAndroid.positions = {
  Left: 'left',
  Right: 'right'
};
var FlatList = React.forwardRef(function (props, ref) {
  return React.createElement(_reactNative.FlatList, _extends({
    ref: ref
  }, props, {
    renderScrollComponent: function renderScrollComponent(scrollProps) {
      return React.createElement(ScrollView, scrollProps);
    }
  }));
});
exports.FlatList = FlatList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkdlc3R1cmVDb21wb25lbnRzLnRzeCJdLCJuYW1lcyI6WyJTY3JvbGxWaWV3IiwiUk5TY3JvbGxWaWV3IiwiZGlzYWxsb3dJbnRlcnJ1cHRpb24iLCJzaG91bGRDYW5jZWxXaGVuT3V0c2lkZSIsIlN3aXRjaCIsIlJOU3dpdGNoIiwic2hvdWxkQWN0aXZhdGVPblN0YXJ0IiwiVGV4dElucHV0IiwiUk5UZXh0SW5wdXQiLCJEcmF3ZXJMYXlvdXRBbmRyb2lkIiwiUk5EcmF3ZXJMYXlvdXRBbmRyb2lkIiwiTGVmdCIsIlJpZ2h0IiwiRmxhdExpc3QiLCJyZWYiLCJzY3JvbGxQcm9wcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUEsS0FBQSxHQUFBLHVCQUFBLENBQUEsT0FBQSxDQUFBLE9BQUEsQ0FBQSxDQUFBOztBQUVBLElBQUEsWUFBQSxHQUFBLE9BQUEsQ0FBQSxjQUFBLENBQUE7O0FBYUEsSUFBQSxvQkFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxtQ0FBQSxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFJTyxJQUFNQSxVQUFVLEdBQUcsQ0FBQSxHQUFBLG9CQUFBLENBQUEsT0FBQSxFQUV4QkMsWUFBQUEsQ0FGd0IsVUFBQSxFQUVWO0FBQ2RDLEVBQUFBLG9CQUFvQixFQUROLElBQUE7QUFFZEMsRUFBQUEsdUJBQXVCLEVBQUU7QUFGWCxDQUZVLENBQW5COztBQWlCQSxJQUFNQyxNQUFNLEdBQUcsQ0FBQSxHQUFBLG9CQUFBLENBQUEsT0FBQSxFQUFtQ0MsWUFBQUEsQ0FBbkMsTUFBQSxFQUE2QztBQUNqRUYsRUFBQUEsdUJBQXVCLEVBRDBDLEtBQUE7QUFFakVHLEVBQUFBLHFCQUFxQixFQUY0QyxJQUFBO0FBR2pFSixFQUFBQSxvQkFBb0IsRUFBRTtBQUgyQyxDQUE3QyxDQUFmOztBQVFBLElBQU1LLFNBQVMsR0FBRyxDQUFBLEdBQUEsb0JBQUEsQ0FBQSxPQUFBLEVBQXNDQyxZQUFBQSxDQUF4RCxTQUFrQixDQUFsQjs7QUFJQSxJQUFNQyxtQkFBbUIsR0FBRyxDQUFBLEdBQUEsb0JBQUEsQ0FBQSxPQUFBLEVBRWpDQyxZQUFBQSxDQUZpQyxtQkFBQSxFQUVWO0FBQUVSLEVBQUFBLG9CQUFvQixFQUFFO0FBQXhCLENBRlUsQ0FBNUI7O0FBS1BPLG1CQUFtQixDQUFuQkEsU0FBQUEsR0FBZ0M7QUFBRUUsRUFBQUEsSUFBSSxFQUFOLE1BQUE7QUFBZ0JDLEVBQUFBLEtBQUssRUFBRTtBQUF2QixDQUFoQ0g7QUFJTyxJQUFNSSxRQUFRLEdBQUcsS0FBSyxDQUFMLFVBQUEsQ0FDdEIsVUFBQSxLQUFBLEVBQUEsR0FBQTtBQUFBLFNBQ0UsS0FBQSxDQUFBLGFBQUEsQ0FBQyxZQUFBLENBQUQsUUFBQSxFQUFBLFFBQUEsQ0FBQTtBQUNFLElBQUEsR0FBRyxFQUFFQztBQURQLEdBQUEsRUFBQSxLQUFBLEVBQUE7QUFHRSxJQUFBLHFCQUFxQixFQUFHQywrQkFBQUEsV0FBRDtBQUFBLGFBQWlCLEtBQUEsQ0FBQSxhQUFBLENBQUEsVUFBQSxFQUFBLFdBQUEsQ0FBakI7QUFBQTtBQUh6QixHQUFBLENBQUEsQ0FERjtBQUFBLENBRHNCLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUHJvcHNXaXRoQ2hpbGRyZW4gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1xuICBTY3JvbGxWaWV3IGFzIFJOU2Nyb2xsVmlldyxcbiAgU2Nyb2xsVmlld1Byb3BzIGFzIFJOU2Nyb2xsVmlld1Byb3BzLFxuICBTd2l0Y2ggYXMgUk5Td2l0Y2gsXG4gIFN3aXRjaFByb3BzIGFzIFJOU3dpdGNoUHJvcHMsXG4gIFRleHRJbnB1dCBhcyBSTlRleHRJbnB1dCxcbiAgVGV4dElucHV0UHJvcHMgYXMgUk5UZXh0SW5wdXRQcm9wcyxcbiAgRHJhd2VyTGF5b3V0QW5kcm9pZCBhcyBSTkRyYXdlckxheW91dEFuZHJvaWQsXG4gIERyYXdlckxheW91dEFuZHJvaWRQcm9wcyBhcyBSTkRyYXdlckxheW91dEFuZHJvaWRQcm9wcyxcbiAgRmxhdExpc3QgYXMgUk5GbGF0TGlzdCxcbiAgRmxhdExpc3RQcm9wcyBhcyBSTkZsYXRMaXN0UHJvcHMsXG59IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5cbmltcG9ydCBjcmVhdGVOYXRpdmVXcmFwcGVyIGZyb20gJy4uL2hhbmRsZXJzL2NyZWF0ZU5hdGl2ZVdyYXBwZXInO1xuXG5pbXBvcnQgeyBOYXRpdmVWaWV3R2VzdHVyZUhhbmRsZXJQcm9wcyB9IGZyb20gJy4uL2hhbmRsZXJzL05hdGl2ZVZpZXdHZXN0dXJlSGFuZGxlcic7XG5cbmV4cG9ydCBjb25zdCBTY3JvbGxWaWV3ID0gY3JlYXRlTmF0aXZlV3JhcHBlcjxcbiAgUHJvcHNXaXRoQ2hpbGRyZW48Uk5TY3JvbGxWaWV3UHJvcHM+XG4+KFJOU2Nyb2xsVmlldywge1xuICBkaXNhbGxvd0ludGVycnVwdGlvbjogdHJ1ZSxcbiAgc2hvdWxkQ2FuY2VsV2hlbk91dHNpZGU6IGZhbHNlLFxufSk7XG4vLyBiYWNrd2FyZCB0eXBlIGNvbXBhdGliaWxpdHkgd2l0aCBodHRwczovL2dpdGh1Yi5jb20vc29mdHdhcmUtbWFuc2lvbi9yZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyL2Jsb2IvZGI3OGQzY2E3ZDQ4ZThiYTU3NDgyZDNmZTliMGExNWFhNzlkOTkzMi9yZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyLmQudHMjTDQ0MC1MNDU3XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZVxuZXhwb3J0IHR5cGUgU2Nyb2xsVmlldyA9IHR5cGVvZiBTY3JvbGxWaWV3ICYge1xuICBzY3JvbGxUbyhcbiAgICB5PzogbnVtYmVyIHwgeyB4PzogbnVtYmVyOyB5PzogbnVtYmVyOyBhbmltYXRlZD86IGJvb2xlYW4gfSxcbiAgICB4PzogbnVtYmVyLFxuICAgIGFuaW1hdGVkPzogYm9vbGVhblxuICApOiB2b2lkO1xuICBzY3JvbGxUb0VuZChvcHRpb25zPzogeyBhbmltYXRlZDogYm9vbGVhbiB9KTogdm9pZDtcbn07XG5cbmV4cG9ydCBjb25zdCBTd2l0Y2ggPSBjcmVhdGVOYXRpdmVXcmFwcGVyPFJOU3dpdGNoUHJvcHM+KFJOU3dpdGNoLCB7XG4gIHNob3VsZENhbmNlbFdoZW5PdXRzaWRlOiBmYWxzZSxcbiAgc2hvdWxkQWN0aXZhdGVPblN0YXJ0OiB0cnVlLFxuICBkaXNhbGxvd0ludGVycnVwdGlvbjogdHJ1ZSxcbn0pO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCB0eXBlIFN3aXRjaCA9IHR5cGVvZiBTd2l0Y2g7XG5cbmV4cG9ydCBjb25zdCBUZXh0SW5wdXQgPSBjcmVhdGVOYXRpdmVXcmFwcGVyPFJOVGV4dElucHV0UHJvcHM+KFJOVGV4dElucHV0KTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgdHlwZSBUZXh0SW5wdXQgPSB0eXBlb2YgVGV4dElucHV0O1xuXG5leHBvcnQgY29uc3QgRHJhd2VyTGF5b3V0QW5kcm9pZCA9IGNyZWF0ZU5hdGl2ZVdyYXBwZXI8XG4gIFByb3BzV2l0aENoaWxkcmVuPFJORHJhd2VyTGF5b3V0QW5kcm9pZFByb3BzPlxuPihSTkRyYXdlckxheW91dEFuZHJvaWQsIHsgZGlzYWxsb3dJbnRlcnJ1cHRpb246IHRydWUgfSk7XG4vLyB3ZSB1c2UgbGl0ZXJhbCBvYmplY3Qgc2luY2UgVFMgZ2l2ZXMgZXJyb3Igd2hlbiB1c2luZyBSTidzIGBwb3NpdGlvbnNgXG4vLyBAdHMtaWdub3JlIEZJWE1FKFRTKSBtYXliZSB0aGlzIHNob3VsZCBiZSByZW1vdmVkP1xuRHJhd2VyTGF5b3V0QW5kcm9pZC5wb3NpdGlvbnMgPSB7IExlZnQ6ICdsZWZ0JywgUmlnaHQ6ICdyaWdodCcgfTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgdHlwZSBEcmF3ZXJMYXlvdXRBbmRyb2lkID0gdHlwZW9mIERyYXdlckxheW91dEFuZHJvaWQ7XG5cbmV4cG9ydCBjb25zdCBGbGF0TGlzdCA9IFJlYWN0LmZvcndhcmRSZWY8Uk5GbGF0TGlzdDxhbnk+LCBSTkZsYXRMaXN0UHJvcHM8YW55Pj4oXG4gIChwcm9wcywgcmVmKSA9PiAoXG4gICAgPFJORmxhdExpc3RcbiAgICAgIHJlZj17cmVmfVxuICAgICAgey4uLnByb3BzfVxuICAgICAgcmVuZGVyU2Nyb2xsQ29tcG9uZW50PXsoc2Nyb2xsUHJvcHMpID0+IDxTY3JvbGxWaWV3IHsuLi5zY3JvbGxQcm9wc30gLz59XG4gICAgLz5cbiAgKVxuKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgdHlwZSBGbGF0TGlzdDxJdGVtVD4gPSBSZWFjdC5Db21wb25lbnRUeXBlPFxuICBSTkZsYXRMaXN0UHJvcHM8SXRlbVQ+ICZcbiAgICBOYXRpdmVWaWV3R2VzdHVyZUhhbmRsZXJQcm9wcyAmXG4gICAgUmVhY3QuUmVmQXR0cmlidXRlczxhbnk+XG4+ICYge1xuICBzY3JvbGxUb0VuZDogKHBhcmFtcz86IHsgYW5pbWF0ZWQ/OiBib29sZWFuIH0pID0+IHZvaWQ7XG4gIHNjcm9sbFRvSW5kZXg6IChwYXJhbXM6IHtcbiAgICBhbmltYXRlZD86IGJvb2xlYW47XG4gICAgaW5kZXg6IG51bWJlcjtcbiAgICB2aWV3T2Zmc2V0PzogbnVtYmVyO1xuICAgIHZpZXdQb3NpdGlvbj86IG51bWJlcjtcbiAgfSkgPT4gdm9pZDtcbiAgc2Nyb2xsVG9JdGVtOiAocGFyYW1zOiB7XG4gICAgYW5pbWF0ZWQ/OiBib29sZWFuO1xuICAgIGl0ZW06IEl0ZW1UO1xuICAgIHZpZXdQb3NpdGlvbj86IG51bWJlcjtcbiAgfSkgPT4gdm9pZDtcbiAgc2Nyb2xsVG9PZmZzZXQ6IChwYXJhbXM6IHsgYW5pbWF0ZWQ/OiBib29sZWFuOyBvZmZzZXQ6IG51bWJlciB9KSA9PiB2b2lkO1xufTtcbiJdfQ==
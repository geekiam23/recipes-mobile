d4c0dd8077caa3a6a97c6f88720756c6
var NATIVE_WEAK_MAP = require("../internals/native-weak-map");

var global = require("../internals/global");

var isObject = require("../internals/is-object");

var createNonEnumerableProperty = require("../internals/create-non-enumerable-property");

var objectHas = require("../internals/has");

var shared = require("../internals/shared-store");

var sharedKey = require("../internals/shared-key");

var hiddenKeys = require("../internals/hidden-keys");

var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
var WeakMap = global.WeakMap;
var set, get, has;

var enforce = function enforce(it) {
  return has(it) ? get(it) : set(it, {});
};

var getterFor = function getterFor(TYPE) {
  return function (it) {
    var state;

    if (!isObject(it) || (state = get(it)).type !== TYPE) {
      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
    }

    return state;
  };
};

if (NATIVE_WEAK_MAP || shared.state) {
  var store = shared.state || (shared.state = new WeakMap());
  var wmget = store.get;
  var wmhas = store.has;
  var wmset = store.set;

  set = function set(it, metadata) {
    if (wmhas.call(store, it)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    wmset.call(store, it, metadata);
    return metadata;
  };

  get = function get(it) {
    return wmget.call(store, it) || {};
  };

  has = function has(it) {
    return wmhas.call(store, it);
  };
} else {
  var STATE = sharedKey('state');
  hiddenKeys[STATE] = true;

  set = function set(it, metadata) {
    if (objectHas(it, STATE)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    createNonEnumerableProperty(it, STATE, metadata);
    return metadata;
  };

  get = function get(it) {
    return objectHas(it, STATE) ? it[STATE] : {};
  };

  has = function has(it) {
    return objectHas(it, STATE);
  };
}

module.exports = {
  set: set,
  get: get,
  has: has,
  enforce: enforce,
  getterFor: getterFor
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImludGVybmFsLXN0YXRlLmpzIl0sIm5hbWVzIjpbIk5BVElWRV9XRUFLX01BUCIsInJlcXVpcmUiLCJnbG9iYWwiLCJpc09iamVjdCIsImNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSIsIm9iamVjdEhhcyIsInNoYXJlZCIsInNoYXJlZEtleSIsImhpZGRlbktleXMiLCJPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCIsIldlYWtNYXAiLCJzZXQiLCJnZXQiLCJoYXMiLCJlbmZvcmNlIiwiaXQiLCJnZXR0ZXJGb3IiLCJUWVBFIiwic3RhdGUiLCJ0eXBlIiwiVHlwZUVycm9yIiwic3RvcmUiLCJ3bWdldCIsIndtaGFzIiwid21zZXQiLCJtZXRhZGF0YSIsImNhbGwiLCJmYWNhZGUiLCJTVEFURSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLGVBQWUsR0FBR0MsT0FBTyxnQ0FBN0I7O0FBQ0EsSUFBSUMsTUFBTSxHQUFHRCxPQUFPLHVCQUFwQjs7QUFDQSxJQUFJRSxRQUFRLEdBQUdGLE9BQU8sMEJBQXRCOztBQUNBLElBQUlHLDJCQUEyQixHQUFHSCxPQUFPLCtDQUF6Qzs7QUFDQSxJQUFJSSxTQUFTLEdBQUdKLE9BQU8sb0JBQXZCOztBQUNBLElBQUlLLE1BQU0sR0FBR0wsT0FBTyw2QkFBcEI7O0FBQ0EsSUFBSU0sU0FBUyxHQUFHTixPQUFPLDJCQUF2Qjs7QUFDQSxJQUFJTyxVQUFVLEdBQUdQLE9BQU8sNEJBQXhCOztBQUVBLElBQUlRLDBCQUEwQixHQUFHLDRCQUFqQztBQUNBLElBQUlDLE9BQU8sR0FBR1IsTUFBTSxDQUFDUSxPQUFyQjtBQUNBLElBQUlDLEdBQUosRUFBU0MsR0FBVCxFQUFjQyxHQUFkOztBQUVBLElBQUlDLE9BQU8sR0FBRyxTQUFWQSxPQUFVLENBQVVDLEVBQVYsRUFBYztBQUMxQixTQUFPRixHQUFHLENBQUNFLEVBQUQsQ0FBSCxHQUFVSCxHQUFHLENBQUNHLEVBQUQsQ0FBYixHQUFvQkos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QUFHLEVBQUVBLEdBSFU7QUFJZkMsRUFBQUEsT0FBTyxFQUFFQSxPQUpNO0FBS2ZFLEVBQUFBLFNBQVMsRUFBRUE7QUFMSSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbInZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBvYmplY3RIYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG52YXIgT0JKRUNUX0FMUkVBRFlfSU5JVElBTElaRUQgPSAnT2JqZWN0IGFscmVhZHkgaW5pdGlhbGl6ZWQnO1xudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcbnZhciBzZXQsIGdldCwgaGFzO1xuXG52YXIgZW5mb3JjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaGFzKGl0KSA/IGdldChpdCkgOiBzZXQoaXQsIHt9KTtcbn07XG5cbnZhciBnZXR0ZXJGb3IgPSBmdW5jdGlvbiAoVFlQRSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIHN0YXRlO1xuICAgIGlmICghaXNPYmplY3QoaXQpIHx8IChzdGF0ZSA9IGdldChpdCkpLnR5cGUgIT09IFRZUEUpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQnKTtcbiAgICB9IHJldHVybiBzdGF0ZTtcbiAgfTtcbn07XG5cbmlmIChOQVRJVkVfV0VBS19NQVAgfHwgc2hhcmVkLnN0YXRlKSB7XG4gIHZhciBzdG9yZSA9IHNoYXJlZC5zdGF0ZSB8fCAoc2hhcmVkLnN0YXRlID0gbmV3IFdlYWtNYXAoKSk7XG4gIHZhciB3bWdldCA9IHN0b3JlLmdldDtcbiAgdmFyIHdtaGFzID0gc3RvcmUuaGFzO1xuICB2YXIgd21zZXQgPSBzdG9yZS5zZXQ7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICBpZiAod21oYXMuY2FsbChzdG9yZSwgaXQpKSB0aHJvdyBuZXcgVHlwZUVycm9yKE9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEKTtcbiAgICBtZXRhZGF0YS5mYWNhZGUgPSBpdDtcbiAgICB3bXNldC5jYWxsKHN0b3JlLCBpdCwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtZ2V0LmNhbGwoc3RvcmUsIGl0KSB8fCB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtaGFzLmNhbGwoc3RvcmUsIGl0KTtcbiAgfTtcbn0gZWxzZSB7XG4gIHZhciBTVEFURSA9IHNoYXJlZEtleSgnc3RhdGUnKTtcbiAgaGlkZGVuS2V5c1tTVEFURV0gPSB0cnVlO1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgaWYgKG9iamVjdEhhcyhpdCwgU1RBVEUpKSB0aHJvdyBuZXcgVHlwZUVycm9yKE9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEKTtcbiAgICBtZXRhZGF0YS5mYWNhZGUgPSBpdDtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoaXQsIFNUQVRFLCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gb2JqZWN0SGFzKGl0LCBTVEFURSkgPyBpdFtTVEFURV0gOiB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIG9iamVjdEhhcyhpdCwgU1RBVEUpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXQsXG4gIGdldDogZ2V0LFxuICBoYXM6IGhhcyxcbiAgZW5mb3JjZTogZW5mb3JjZSxcbiAgZ2V0dGVyRm9yOiBnZXR0ZXJGb3Jcbn07XG4iXX0=
{"version":3,"sources":["both.js"],"names":["_curry2","require","_isFunction","and","lift","both","f","g","_both","apply","arguments","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAAgBC,OAAO,sBAAlC;;AAEA,IAAIC,WAAW,GAAgBD,OAAO,0BAAtC;;AAEA,IAAIE,GAAG,GAAgBF,OAAO,SAA9B;;AAEA,IAAIG,IAAI,GAAgBH,OAAO,UAA/B;;AAmCA,IAAII,IAAI,GAAgBL,OAAO,CAAC,SAASK,IAAT,CAAcC,CAAd,EAAiBC,CAAjB,EAAoB;AAClD,SAAOL,WAAW,CAACI,CAAD,CAAX,GAAiB,SAASE,KAAT,GAAiB;AACvC,WAAOF,CAAC,CAACG,KAAF,CAAQ,IAAR,EAAcC,SAAd,KAA4BH,CAAC,CAACE,KAAF,CAAQ,IAAR,EAAcC,SAAd,CAAnC;AACD,GAFM,GAEHN,IAAI,CAACD,GAAD,CAAJ,CAAUG,CAAV,EAAaC,CAAb,CAFJ;AAGD,CAJ8B,CAA/B;;AAKAI,MAAM,CAACC,OAAP,GAAiBP,IAAjB","sourcesContent":["var _curry2 = /*#__PURE__*/require('./internal/_curry2');\n\nvar _isFunction = /*#__PURE__*/require('./internal/_isFunction');\n\nvar and = /*#__PURE__*/require('./and');\n\nvar lift = /*#__PURE__*/require('./lift');\n\n/**\n * A function which calls the two provided functions and returns the `&&`\n * of the results.\n * It returns the result of the first function if it is false-y and the result\n * of the second function otherwise. Note that this is short-circuited,\n * meaning that the second function will not be invoked if the first returns a\n * false-y value.\n *\n * In addition to functions, `R.both` also accepts any fantasy-land compatible\n * applicative functor.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n * @param {Function} f A predicate\n * @param {Function} g Another predicate\n * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.\n * @see R.and\n * @example\n *\n *      const gt10 = R.gt(R.__, 10)\n *      const lt20 = R.lt(R.__, 20)\n *      const f = R.both(gt10, lt20);\n *      f(15); //=> true\n *      f(30); //=> false\n *\n *      R.both(Maybe.Just(false), Maybe.Just(55)); // => Maybe.Just(false)\n *      R.both([false, false, 'a'], [11]); //=> [false, false, 11]\n */\n\n\nvar both = /*#__PURE__*/_curry2(function both(f, g) {\n  return _isFunction(f) ? function _both() {\n    return f.apply(this, arguments) && g.apply(this, arguments);\n  } : lift(and)(f, g);\n});\nmodule.exports = both;"]}
{"version":3,"sources":["symmetricDifference.js"],"names":["_curry2","require","concat","difference","symmetricDifference","list1","list2","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAAgBC,OAAO,sBAAlC;;AAEA,IAAIC,MAAM,GAAgBD,OAAO,YAAjC;;AAEA,IAAIE,UAAU,GAAgBF,OAAO,gBAArC;;AAsBA,IAAIG,mBAAmB,GAAgBJ,OAAO,CAAC,SAASI,mBAAT,CAA6BC,KAA7B,EAAoCC,KAApC,EAA2C;AACxF,SAAOJ,MAAM,CAACC,UAAU,CAACE,KAAD,EAAQC,KAAR,CAAX,EAA2BH,UAAU,CAACG,KAAD,EAAQD,KAAR,CAArC,CAAb;AACD,CAF6C,CAA9C;;AAGAE,MAAM,CAACC,OAAP,GAAiBJ,mBAAjB","sourcesContent":["var _curry2 = /*#__PURE__*/require('./internal/_curry2');\n\nvar concat = /*#__PURE__*/require('./concat');\n\nvar difference = /*#__PURE__*/require('./difference');\n\n/**\n * Finds the set (i.e. no duplicates) of all elements contained in the first or\n * second list, but not both.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` or `list2`, but not both.\n * @see R.symmetricDifferenceWith, R.difference, R.differenceWith\n * @example\n *\n *      R.symmetricDifference([1,2,3,4], [7,6,5,4,3]); //=> [1,2,7,6,5]\n *      R.symmetricDifference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5,1,2]\n */\n\n\nvar symmetricDifference = /*#__PURE__*/_curry2(function symmetricDifference(list1, list2) {\n  return concat(difference(list1, list2), difference(list2, list1));\n});\nmodule.exports = symmetricDifference;"]}
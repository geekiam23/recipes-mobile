cd89acc8bbde8db00e18eb89ee5609fd
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var debug = require('debug')('nock.recorder');

var querystring = require('querystring');

var _require = require('util'),
    inspect = _require.inspect;

var common = require("./common");

var _require2 = require("./intercept"),
    restoreOverriddenClientRequest = _require2.restoreOverriddenClientRequest;

var SEPARATOR = '\n<<<<<<-- cut here -->>>>>>\n';
var recordingInProgress = false;
var _outputs = [];

function getScope(options) {
  var _common$normalizeRequ = common.normalizeRequestOptions(options),
      proto = _common$normalizeRequ.proto,
      host = _common$normalizeRequ.host,
      port = _common$normalizeRequ.port;

  return common.normalizeOrigin(proto, host, port);
}

function getMethod(options) {
  return options.method || 'GET';
}

function getBodyFromChunks(chunks, headers) {
  if (headers && common.isContentEncoded(headers)) {
    return {
      body: chunks.map(function (chunk) {
        return chunk.toString('hex');
      })
    };
  }

  var mergedBuffer = Buffer.concat(chunks);
  var isUtf8Representable = common.isUtf8Representable(mergedBuffer);

  if (isUtf8Representable) {
    var maybeStringifiedJson = mergedBuffer.toString('utf8');

    try {
      return {
        isUtf8Representable: isUtf8Representable,
        body: JSON.parse(maybeStringifiedJson)
      };
    } catch (err) {
      return {
        isUtf8Representable: isUtf8Representable,
        body: maybeStringifiedJson
      };
    }
  } else {
    return {
      isUtf8Representable: isUtf8Representable,
      body: mergedBuffer.toString('hex')
    };
  }
}

function generateRequestAndResponseObject(_ref) {
  var req = _ref.req,
      bodyChunks = _ref.bodyChunks,
      options = _ref.options,
      res = _ref.res,
      dataChunks = _ref.dataChunks,
      reqheaders = _ref.reqheaders;

  var _getBodyFromChunks = getBodyFromChunks(dataChunks, res.headers),
      body = _getBodyFromChunks.body,
      isUtf8Representable = _getBodyFromChunks.isUtf8Representable;

  options.path = req.path;
  return {
    scope: getScope(options),
    method: getMethod(options),
    path: options.path,
    body: getBodyFromChunks(bodyChunks).body,
    status: res.statusCode,
    response: body,
    rawHeaders: res.rawHeaders,
    reqheaders: reqheaders || undefined,
    responseIsBinary: isUtf8Representable === false
  };
}

function generateRequestAndResponse(_ref2) {
  var req = _ref2.req,
      bodyChunks = _ref2.bodyChunks,
      options = _ref2.options,
      res = _ref2.res,
      dataChunks = _ref2.dataChunks,
      reqheaders = _ref2.reqheaders;
  var requestBody = getBodyFromChunks(bodyChunks).body;
  var responseBody = getBodyFromChunks(dataChunks, res.headers).body;
  var path = options.path;
  var queryIndex = req.path.indexOf('?');
  var queryObj = {};

  if (queryIndex !== -1) {
    path = path.substring(0, queryIndex);
    var queryStr = req.path.slice(queryIndex + 1);
    queryObj = querystring.parse(queryStr);
  }

  path = path.replace(/'/g, "\\'");
  var encodedQueryObj = {};

  for (var key in queryObj) {
    var formattedPair = common.formatQueryValue(key, queryObj[key], common.percentEncode);
    encodedQueryObj[formattedPair[0]] = formattedPair[1];
  }

  var lines = [];
  lines.push('');
  var scope = getScope(options);
  lines.push("nock('" + scope + "', {\"encodedQueryParams\":true})");
  var methodName = getMethod(options).toLowerCase();

  if (requestBody) {
    lines.push("  ." + methodName + "('" + path + "', " + JSON.stringify(requestBody) + ")");
  } else {
    lines.push("  ." + methodName + "('" + path + "')");
  }

  Object.entries(reqheaders || {}).forEach(function (_ref3) {
    var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
        fieldName = _ref4[0],
        fieldValue = _ref4[1];

    var safeName = JSON.stringify(fieldName);
    var safeValue = JSON.stringify(fieldValue);
    lines.push("  .matchHeader(" + safeName + ", " + safeValue + ")");
  });

  if (queryIndex !== -1) {
    lines.push("  .query(" + JSON.stringify(encodedQueryObj) + ")");
  }

  var statusCode = res.statusCode.toString();
  var stringifiedResponseBody = JSON.stringify(responseBody);
  var headers = inspect(res.rawHeaders);
  lines.push("  .reply(" + statusCode + ", " + stringifiedResponseBody + ", " + headers + ");");
  return lines.join('\n');
}

var currentRecordingId = 0;
var defaultRecordOptions = {
  dont_print: false,
  enable_reqheaders_recording: false,
  logging: console.log,
  output_objects: false,
  use_separator: true
};

function record(recOptions) {
  if (recordingInProgress) {
    throw new Error('Nock recording already in progress');
  }

  recordingInProgress = true;
  currentRecordingId = currentRecordingId + 1;
  var thisRecordingId = currentRecordingId;

  if (typeof recOptions === 'boolean') {
    recOptions = {
      dont_print: recOptions
    };
  }

  recOptions = (0, _extends2.default)({}, defaultRecordOptions, recOptions);
  debug('start recording', thisRecordingId, recOptions);
  var _recOptions = recOptions,
      dontPrint = _recOptions.dont_print,
      enableReqHeadersRecording = _recOptions.enable_reqheaders_recording,
      logging = _recOptions.logging,
      outputObjects = _recOptions.output_objects,
      useSeparator = _recOptions.use_separator;
  debug(thisRecordingId, 'restoring overridden requests before new overrides');
  common.restoreOverriddenRequests();
  restoreOverriddenClientRequest();
  common.overrideRequests(function (proto, overriddenRequest, rawArgs) {
    var _common$normalizeClie = common.normalizeClientRequestArgs.apply(common, (0, _toConsumableArray2.default)(rawArgs)),
        options = _common$normalizeClie.options,
        callback = _common$normalizeClie.callback;

    var bodyChunks = [];

    if (options._recording) {
      return overriddenRequest(options, callback);
    }

    options._recording = true;
    var req = overriddenRequest(options, function (res) {
      debug(thisRecordingId, 'intercepting', proto, 'request to record');
      res.once('end', function () {
        debug(thisRecordingId, proto, 'intercepted request ended');
        var reqheaders;

        if (enableReqHeadersRecording) {
          reqheaders = req.getHeaders();
          common.deleteHeadersField(reqheaders, 'user-agent');
        }

        var generateFn = outputObjects ? generateRequestAndResponseObject : generateRequestAndResponse;
        var out = generateFn({
          req: req,
          bodyChunks: bodyChunks,
          options: options,
          res: res,
          dataChunks: dataChunks,
          reqheaders: reqheaders
        });
        debug('out:', out);

        if (thisRecordingId !== currentRecordingId) {
          debug('skipping recording of an out-of-order request', out);
          return;
        }

        _outputs.push(out);

        if (!dontPrint) {
          if (useSeparator) {
            if (typeof out !== 'string') {
              out = JSON.stringify(out, null, 2);
            }

            logging(SEPARATOR + out + SEPARATOR);
          } else {
            logging(out);
          }
        }
      });
      var encoding;
      var setEncoding = res.setEncoding;

      res.setEncoding = function (newEncoding) {
        encoding = newEncoding;
        return setEncoding.apply(this, arguments);
      };

      var dataChunks = [];
      var origResPush = res.push;

      res.push = function (data) {
        if (data) {
          if (encoding) {
            data = Buffer.from(data, encoding);
          }

          dataChunks.push(data);
        }

        return origResPush.call(res, data);
      };

      if (callback) {
        callback(res, options, callback);
      }

      debug('finished setting up intercepting');

      if (proto === 'https') {
        options.proto = 'https';
      }
    });

    var recordChunk = function recordChunk(chunk, encoding) {
      debug(thisRecordingId, 'new', proto, 'body chunk');

      if (!Buffer.isBuffer(chunk)) {
        chunk = Buffer.from(chunk, encoding);
      }

      bodyChunks.push(chunk);
    };

    var oldWrite = req.write;

    req.write = function (chunk, encoding) {
      if (typeof chunk !== 'undefined') {
        recordChunk(chunk, encoding);
        oldWrite.apply(req, arguments);
      } else {
        throw new Error('Data was undefined.');
      }
    };

    var oldEnd = req.end;

    req.end = function (chunk, encoding, callback) {
      debug('req.end');

      if (typeof chunk === 'function') {
        callback = chunk;
        chunk = null;
      } else if (typeof encoding === 'function') {
        callback = encoding;
        encoding = null;
      }

      if (chunk) {
        recordChunk(chunk, encoding);
      }

      oldEnd.call(req, chunk, encoding, callback);
    };

    return req;
  });
}

function restore() {
  debug(currentRecordingId, 'restoring all the overridden http/https properties');
  common.restoreOverriddenRequests();
  restoreOverriddenClientRequest();
  recordingInProgress = false;
}

function clear() {
  _outputs = [];
}

module.exports = {
  record: record,
  outputs: function outputs() {
    return _outputs;
  },
  restore: restore,
  clear: clear
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
518f48d0a5848b9a02f6f4b86317801d
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var debug = require('debug')('nock.common');

var set = require('lodash.set');

var timers = require('timers');

var url = require('url');

var util = require('util');

function normalizeRequestOptions(options) {
  options.proto = options.proto || 'http';
  options.port = options.port || (options.proto === 'http' ? 80 : 443);

  if (options.host) {
    debug('options.host:', options.host);

    if (!options.hostname) {
      if (options.host.split(':').length === 2) {
        options.hostname = options.host.split(':')[0];
      } else {
        options.hostname = options.host;
      }
    }
  }

  debug('options.hostname in the end: %j', options.hostname);
  options.host = (options.hostname || 'localhost') + ":" + options.port;
  debug('options.host in the end: %j', options.host);
  ['hostname', 'host'].forEach(function (attr) {
    if (options[attr]) {
      options[attr] = options[attr].toLowerCase();
    }
  });
  return options;
}

function isUtf8Representable(buffer) {
  var utfEncodedBuffer = buffer.toString('utf8');
  var reconstructedBuffer = Buffer.from(utfEncodedBuffer, 'utf8');
  return reconstructedBuffer.equals(buffer);
}

var requestOverrides = {};

function overrideRequests(newRequest) {
  debug('overriding requests');
  ['http', 'https'].forEach(function (proto) {
    debug('- overriding request for', proto);
    var moduleName = proto;
    var module = {
      http: require('http'),
      https: require('https')
    }[moduleName];
    var overriddenRequest = module.request;
    var overriddenGet = module.get;

    if (requestOverrides[moduleName]) {
      throw new Error("Module's request already overridden for " + moduleName + " protocol.");
    }

    requestOverrides[moduleName] = {
      module: module,
      request: overriddenRequest,
      get: overriddenGet
    };

    module.request = function (input, options, callback) {
      return newRequest(proto, overriddenRequest.bind(module), [input, options, callback]);
    };

    module.get = function (input, options, callback) {
      var req = newRequest(proto, overriddenGet.bind(module), [input, options, callback]);
      req.end();
      return req;
    };

    debug('- overridden request for', proto);
  });
}

function restoreOverriddenRequests() {
  debug('restoring requests');
  Object.entries(requestOverrides).forEach(function (_ref) {
    var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
        proto = _ref2[0],
        _ref2$ = _ref2[1],
        module = _ref2$.module,
        request = _ref2$.request,
        get = _ref2$.get;

    debug('- restoring request for', proto);
    module.request = request;
    module.get = get;
    debug('- restored request for', proto);
  });
  requestOverrides = {};
}

function normalizeOrigin(proto, host, port) {
  var hostHasPort = host.includes(':');
  var portIsStandard = proto === 'http' && (port === 80 || port === '80') || proto === 'https' && (port === 443 || port === '443');
  var portStr = hostHasPort || portIsStandard ? '' : ":" + port;
  return proto + "://" + host + portStr;
}

function stringifyRequest(options, body) {
  var _options$method = options.method,
      method = _options$method === void 0 ? 'GET' : _options$method,
      _options$path = options.path,
      path = _options$path === void 0 ? '' : _options$path,
      port = options.port;
  var origin = normalizeOrigin(options.proto, options.hostname, port);
  var log = {
    method: method,
    url: "" + origin + path,
    headers: options.headers
  };

  if (body) {
    log.body = body;
  }

  return JSON.stringify(log, null, 2);
}

function isContentEncoded(headers) {
  var contentEncoding = headers['content-encoding'];
  return typeof contentEncoding === 'string' && contentEncoding !== '';
}

function contentEncoding(headers, encoder) {
  var contentEncoding = headers['content-encoding'];
  return contentEncoding !== undefined && contentEncoding.toString() === encoder;
}

function isJSONContent(headers) {
  var contentType = String(headers['content-type'] || '').toLowerCase();
  return contentType.startsWith('application/json');
}

function headersFieldNamesToLowerCase(headers) {
  if (!isPlainObject(headers)) {
    throw Error('Headers must be provided as an object');
  }

  var lowerCaseHeaders = {};
  Object.entries(headers).forEach(function (_ref3) {
    var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
        fieldName = _ref4[0],
        fieldValue = _ref4[1];

    var key = fieldName.toLowerCase();

    if (lowerCaseHeaders[key] !== undefined) {
      throw Error("Failed to convert header keys to lower case due to field name conflict: " + key);
    }

    lowerCaseHeaders[key] = fieldValue;
  });
  return lowerCaseHeaders;
}

var headersFieldsArrayToLowerCase = function headersFieldsArrayToLowerCase(headers) {
  return (0, _toConsumableArray2.default)(new Set(headers.map(function (fieldName) {
    return fieldName.toLowerCase();
  })));
};

function headersInputToRawArray(headers) {
  if (headers === undefined) {
    return [];
  }

  if (Array.isArray(headers)) {
    if (headers.length % 2) {
      throw new Error("Raw headers must be provided as an array with an even number of items. [fieldName, value, ...]");
    }

    return (0, _toConsumableArray2.default)(headers);
  }

  if (util.types.isMap(headers)) {
    var _ref5;

    return (_ref5 = []).concat.apply(_ref5, (0, _toConsumableArray2.default)(Array.from(headers, function (_ref6) {
      var _ref7 = (0, _slicedToArray2.default)(_ref6, 2),
          k = _ref7[0],
          v = _ref7[1];

      return [k.toString(), v];
    })));
  }

  if (isPlainObject(headers)) {
    var _ref8;

    return (_ref8 = []).concat.apply(_ref8, (0, _toConsumableArray2.default)(Object.entries(headers)));
  }

  throw new Error("Headers must be provided as an array of raw values, a Map, or a plain Object. " + headers);
}

function headersArrayToObject(rawHeaders) {
  if (!Array.isArray(rawHeaders)) {
    throw Error('Expected a header array');
  }

  var accumulator = {};
  forEachHeader(rawHeaders, function (value, fieldName) {
    addHeaderLine(accumulator, fieldName, value);
  });
  return accumulator;
}

var noDuplicatesHeaders = new Set(['age', 'authorization', 'content-length', 'content-type', 'etag', 'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since', 'last-modified', 'location', 'max-forwards', 'proxy-authorization', 'referer', 'retry-after', 'user-agent']);

function addHeaderLine(headers, name, value) {
  var values;

  if (typeof value === 'function') {
    values = [value.name];
  } else if (Array.isArray(value)) {
    values = value.map(String);
  } else {
    values = [String(value)];
  }

  var key = name.toLowerCase();

  if (key === 'set-cookie') {
    if (headers['set-cookie'] === undefined) {
      headers['set-cookie'] = values;
    } else {
      var _headers$setCookie;

      (_headers$setCookie = headers['set-cookie']).push.apply(_headers$setCookie, (0, _toConsumableArray2.default)(values));
    }
  } else if (noDuplicatesHeaders.has(key)) {
    if (headers[key] === undefined) {
      headers[key] = values[0];
    }
  } else {
    if (headers[key] !== undefined) {
      values = [headers[key]].concat((0, _toConsumableArray2.default)(values));
    }

    var separator = key === 'cookie' ? '; ' : ', ';
    headers[key] = values.join(separator);
  }
}

function deleteHeadersField(headers, fieldNameToDelete) {
  if (!isPlainObject(headers)) {
    throw Error('headers must be an object');
  }

  if (typeof fieldNameToDelete !== 'string') {
    throw Error('field name must be a string');
  }

  var lowerCaseFieldNameToDelete = fieldNameToDelete.toLowerCase();
  Object.keys(headers).filter(function (fieldName) {
    return fieldName.toLowerCase() === lowerCaseFieldNameToDelete;
  }).forEach(function (fieldName) {
    return delete headers[fieldName];
  });
}

function forEachHeader(rawHeaders, callback) {
  for (var i = 0; i < rawHeaders.length; i += 2) {
    callback(rawHeaders[i + 1], rawHeaders[i], i);
  }
}

function percentDecode(str) {
  try {
    return decodeURIComponent(str.replace(/\+/g, ' '));
  } catch (e) {
    return str;
  }
}

function percentEncode(str) {
  return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
    return "%" + c.charCodeAt(0).toString(16).toUpperCase();
  });
}

function matchStringOrRegexp(target, pattern) {
  var targetStr = target === undefined || target === null ? '' : String(target);

  if (pattern instanceof RegExp) {
    pattern.lastIndex = 0;
    return pattern.test(targetStr);
  }

  return targetStr === String(pattern);
}

function formatQueryValue(key, value, stringFormattingFn) {
  switch (true) {
    case typeof value === 'number':
    case typeof value === 'boolean':
      value = value.toString();
      break;

    case value === null:
    case value === undefined:
      value = '';
      break;

    case typeof value === 'string':
      if (stringFormattingFn) {
        value = stringFormattingFn(value);
      }

      break;

    case value instanceof RegExp:
      break;

    case Array.isArray(value):
      {
        value = value.map(function (val, idx) {
          return formatQueryValue(idx, val, stringFormattingFn)[1];
        });
        break;
      }

    case typeof value === 'object':
      {
        value = Object.entries(value).reduce(function (acc, _ref9) {
          var _ref10 = (0, _slicedToArray2.default)(_ref9, 2),
              subKey = _ref10[0],
              subVal = _ref10[1];

          var subPair = formatQueryValue(subKey, subVal, stringFormattingFn);
          acc[subPair[0]] = subPair[1];
          return acc;
        }, {});
        break;
      }
  }

  if (stringFormattingFn) key = stringFormattingFn(key);
  return [key, value];
}

function isStream(obj) {
  return obj && typeof obj !== 'string' && !Buffer.isBuffer(obj) && typeof obj.setEncoding === 'function';
}

function normalizeClientRequestArgs(input, options, cb) {
  if (typeof input === 'string') {
    input = urlToOptions(new url.URL(input));
  } else if (input instanceof url.URL) {
    input = urlToOptions(input);
  } else {
    cb = options;
    options = input;
    input = null;
  }

  if (typeof options === 'function') {
    cb = options;
    options = input || {};
  } else {
    options = (0, _extends2.default)(input || {}, options);
  }

  return {
    options: options,
    callback: cb
  };
}

function urlToOptions(url) {
  var options = {
    protocol: url.protocol,
    hostname: typeof url.hostname === 'string' && url.hostname.startsWith('[') ? url.hostname.slice(1, -1) : url.hostname,
    hash: url.hash,
    search: url.search,
    pathname: url.pathname,
    path: "" + url.pathname + (url.search || ''),
    href: url.href
  };

  if (url.port !== '') {
    options.port = Number(url.port);
  }

  if (url.username || url.password) {
    options.auth = url.username + ":" + url.password;
  }

  return options;
}

var dataEqual = function dataEqual(expected, actual) {
  if (isPlainObject(expected)) {
    expected = expand(expected);
  }

  if (isPlainObject(actual)) {
    actual = expand(actual);
  }

  return deepEqual(expected, actual);
};

var expand = function expand(input) {
  return Object.entries(input).reduce(function (acc, _ref11) {
    var _ref12 = (0, _slicedToArray2.default)(_ref11, 2),
        k = _ref12[0],
        v = _ref12[1];

    return set(acc, k, v);
  }, {});
};

function deepEqual(expected, actual) {
  debug('deepEqual comparing', typeof expected, expected, typeof actual, actual);

  if (expected instanceof RegExp) {
    return expected.test(actual);
  }

  if (Array.isArray(expected) && Array.isArray(actual)) {
    if (expected.length !== actual.length) {
      return false;
    }

    return expected.every(function (expVal, idx) {
      return deepEqual(expVal, actual[idx]);
    });
  }

  if (isPlainObject(expected) && isPlainObject(actual)) {
    var allKeys = Array.from(new Set(Object.keys(expected).concat(Object.keys(actual))));
    return allKeys.every(function (key) {
      return deepEqual(expected[key], actual[key]);
    });
  }

  return expected === actual;
}

function isPlainObject(value) {
  var isObjectLike = typeof value === 'object' && value !== null;
  var tag = Object.prototype.toString.call(value);

  if (!isObjectLike || tag !== '[object Object]') {
    return false;
  }

  if (Object.getPrototypeOf(value) === null) {
    return true;
  }

  var proto = value;

  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }

  return Object.getPrototypeOf(value) === proto;
}

function mapValue(object, iteratee) {
  object = Object(object);
  var result = {};
  Object.keys(object).forEach(function (key) {
    result[key] = iteratee(object[key], key, object);
  });
  return result;
}

var timeouts = [];
var intervals = [];
var immediates = [];

var wrapTimer = function wrapTimer(timer, ids) {
  return function () {
    var id = timer.apply(void 0, arguments);
    ids.push(id);
    return id;
  };
};

var setTimeout = wrapTimer(timers.setTimeout, timeouts);
var setInterval = wrapTimer(timers.setInterval, intervals);
var setImmediate = wrapTimer(timers.setImmediate, immediates);

function clearTimer(clear, ids) {
  while (ids.length) {
    clear(ids.shift());
  }
}

function removeAllTimers() {
  clearTimer(clearTimeout, timeouts);
  clearTimer(clearInterval, intervals);
  clearTimer(clearImmediate, immediates);
}

function isRequestDestroyed(req) {
  return !!(req.destroyed === true || req.aborted || req.socket && req.socket.destroyed);
}

module.exports = {
  contentEncoding: contentEncoding,
  dataEqual: dataEqual,
  deleteHeadersField: deleteHeadersField,
  forEachHeader: forEachHeader,
  formatQueryValue: formatQueryValue,
  headersArrayToObject: headersArrayToObject,
  headersFieldNamesToLowerCase: headersFieldNamesToLowerCase,
  headersFieldsArrayToLowerCase: headersFieldsArrayToLowerCase,
  headersInputToRawArray: headersInputToRawArray,
  isContentEncoded: isContentEncoded,
  isJSONContent: isJSONContent,
  isPlainObject: isPlainObject,
  isRequestDestroyed: isRequestDestroyed,
  isStream: isStream,
  isUtf8Representable: isUtf8Representable,
  mapValue: mapValue,
  matchStringOrRegexp: matchStringOrRegexp,
  normalizeClientRequestArgs: normalizeClientRequestArgs,
  normalizeOrigin: normalizeOrigin,
  normalizeRequestOptions: normalizeRequestOptions,
  overrideRequests: overrideRequests,
  percentDecode: percentDecode,
  percentEncode: percentEncode,
  removeAllTimers: removeAllTimers,
  restoreOverriddenRequests: restoreOverriddenRequests,
  setImmediate: setImmediate,
  setInterval: setInterval,
  setTimeout: setTimeout,
  stringifyRequest: stringifyRequest
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
{"version":3,"sources":["Header.tsx"],"names":["styleInterpolator","options","scene","title","leftLabel","o","previous","goBack","navigation","StackActions","source","key","props"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StackActions } from '@react-navigation/native';\n\nimport HeaderSegment from './HeaderSegment';\nimport HeaderTitle from './HeaderTitle';\nimport debounce from '../../utils/debounce';\nimport type { StackHeaderProps, StackHeaderTitleProps } from '../../types';\n\nexport default React.memo(function Header(props: StackHeaderProps) {\n  const {\n    scene,\n    previous,\n    layout,\n    insets,\n    navigation,\n    styleInterpolator,\n  } = props;\n  const { options } = scene.descriptor;\n  const title =\n    typeof options.headerTitle !== 'function' &&\n    options.headerTitle !== undefined\n      ? options.headerTitle\n      : options.title !== undefined\n      ? options.title\n      : scene.route.name;\n\n  let leftLabel;\n\n  // The label for the left back button shows the title of the previous screen\n  // If a custom label is specified, we use it, otherwise use previous screen's title\n  if (options.headerBackTitle !== undefined) {\n    leftLabel = options.headerBackTitle;\n  } else if (previous) {\n    const o = previous.descriptor.options;\n\n    leftLabel =\n      typeof o.headerTitle !== 'function' && o.headerTitle !== undefined\n        ? o.headerTitle\n        : o.title !== undefined\n        ? o.title\n        : previous.route.name;\n  }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const goBack = React.useCallback(\n    debounce(() => {\n      if (navigation.isFocused() && navigation.canGoBack()) {\n        navigation.dispatch({\n          ...StackActions.pop(),\n          source: scene.route.key,\n        });\n      }\n    }, 50),\n    [navigation, scene.route.key]\n  );\n\n  return (\n    <HeaderSegment\n      {...options}\n      insets={insets}\n      layout={layout}\n      scene={scene}\n      title={title}\n      leftLabel={leftLabel}\n      headerTitle={\n        typeof options.headerTitle !== 'function'\n          ? (props: StackHeaderTitleProps) => <HeaderTitle {...props} />\n          : options.headerTitle\n      }\n      onGoBack={previous ? goBack : undefined}\n      styleInterpolator={styleInterpolator}\n    />\n  );\n});\n"]}
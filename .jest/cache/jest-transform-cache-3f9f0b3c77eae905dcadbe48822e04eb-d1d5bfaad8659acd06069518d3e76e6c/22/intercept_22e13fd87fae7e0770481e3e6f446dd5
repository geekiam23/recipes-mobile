b7ece87bc9e3c2bae44ea290d1912a97
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var _require = require("./intercepted_request_router"),
    InterceptedRequestRouter = _require.InterceptedRequestRouter;

var common = require("./common");

var _require2 = require('util'),
    inherits = _require2.inherits;

var http = require('http');

var debug = require('debug')('nock.intercept');

var globalEmitter = require("./global_emitter");

function NetConnectNotAllowedError(host, path) {
  Error.call(this);
  this.name = 'NetConnectNotAllowedError';
  this.code = 'ENETUNREACH';
  this.message = "Nock: Disallowed net connect for \"" + host + path + "\"";
  Error.captureStackTrace(this, this.constructor);
}

inherits(NetConnectNotAllowedError, Error);
var allInterceptors = {};
var allowNetConnect;

function enableNetConnect(matcher) {
  if (typeof matcher === 'string') {
    allowNetConnect = new RegExp(matcher);
  } else if (matcher instanceof RegExp) {
    allowNetConnect = matcher;
  } else if (typeof matcher === 'function') {
    allowNetConnect = {
      test: matcher
    };
  } else {
    allowNetConnect = /.*/;
  }
}

function isEnabledForNetConnect(options) {
  common.normalizeRequestOptions(options);
  var enabled = allowNetConnect && allowNetConnect.test(options.host);
  debug('Net connect', enabled ? '' : 'not', 'enabled for', options.host);
  return enabled;
}

function disableNetConnect() {
  allowNetConnect = undefined;
}

function isOn() {
  return !isOff();
}

function isOff() {
  return process.env.NOCK_OFF === 'true';
}

function addInterceptor(key, interceptor, scope, scopeOptions, host) {
  if (!(key in allInterceptors)) {
    allInterceptors[key] = {
      key: key,
      interceptors: []
    };
  }

  interceptor.__nock_scope = scope;
  interceptor.__nock_scopeKey = key;
  interceptor.__nock_scopeOptions = scopeOptions;
  interceptor.__nock_scopeHost = host;
  interceptor.interceptionCounter = 0;
  if (scopeOptions.allowUnmocked) allInterceptors[key].allowUnmocked = true;
  allInterceptors[key].interceptors.push(interceptor);
}

function remove(interceptor) {
  if (interceptor.__nock_scope.shouldPersist() || --interceptor.counter > 0) {
    return;
  }

  var basePath = interceptor.basePath;
  var interceptors = allInterceptors[basePath] && allInterceptors[basePath].interceptors || [];
  interceptors.some(function (thisInterceptor, i) {
    return thisInterceptor === interceptor ? interceptors.splice(i, 1) : false;
  });
}

function removeAll() {
  Object.keys(allInterceptors).forEach(function (key) {
    allInterceptors[key].interceptors.forEach(function (interceptor) {
      interceptor.scope.keyedInterceptors = {};
    });
  });
  allInterceptors = {};
}

function interceptorsFor(options) {
  common.normalizeRequestOptions(options);
  debug('interceptors for %j', options.host);
  var basePath = options.proto + "://" + options.host;
  debug('filtering interceptors for basepath', basePath);

  for (var _i = 0, _Object$values = Object.values(allInterceptors); _i < _Object$values.length; _i++) {
    var _ref = _Object$values[_i];
    var key = _ref.key;
    var interceptors = _ref.interceptors;
    var allowUnmocked = _ref.allowUnmocked;

    for (var _iterator = _createForOfIteratorHelperLoose(interceptors), _step; !(_step = _iterator()).done;) {
      var interceptor = _step.value;
      var filteringScope = interceptor.__nock_scopeOptions.filteringScope;

      if (filteringScope && filteringScope(basePath)) {
        interceptor.scope.logger('found matching scope interceptor');
        interceptors.forEach(function (ic) {
          ic.__nock_filteredScope = ic.__nock_scopeKey;
        });
        return interceptors;
      }
    }

    if (common.matchStringOrRegexp(basePath, key)) {
      if (allowUnmocked && interceptors.length === 0) {
        debug('matched base path with allowUnmocked (no matching interceptors)');
        return [{
          options: {
            allowUnmocked: true
          },
          matchOrigin: function matchOrigin() {
            return false;
          }
        }];
      } else {
        debug("matched base path (" + interceptors.length + " interceptor" + (interceptors.length > 1 ? 's' : '') + ")");
        return interceptors;
      }
    }
  }

  return undefined;
}

function removeInterceptor(options) {
  var Interceptor = require("./interceptor");

  var baseUrl, key, method, proto;

  if (options instanceof Interceptor) {
    baseUrl = options.basePath;
    key = options._key;
  } else {
    proto = options.proto ? options.proto : 'http';
    common.normalizeRequestOptions(options);
    baseUrl = proto + "://" + options.host;
    method = options.method && options.method.toUpperCase() || 'GET';
    key = method + " " + baseUrl + (options.path || '/');
  }

  if (allInterceptors[baseUrl] && allInterceptors[baseUrl].interceptors.length > 0) {
    for (var i = 0; i < allInterceptors[baseUrl].interceptors.length; i++) {
      var interceptor = allInterceptors[baseUrl].interceptors[i];

      if (interceptor._key === key) {
        allInterceptors[baseUrl].interceptors.splice(i, 1);
        interceptor.scope.remove(key, interceptor);
        break;
      }
    }

    return true;
  }

  return false;
}

var originalClientRequest;

function ErroringClientRequest(error) {
  http.OutgoingMessage.call(this);
  process.nextTick(function () {
    this.emit('error', error);
  }.bind(this));
}

inherits(ErroringClientRequest, http.ClientRequest);

function overrideClientRequest() {
  debug('Overriding ClientRequest');

  function OverriddenClientRequest() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _common$normalizeClie = common.normalizeClientRequestArgs.apply(common, args),
        options = _common$normalizeClie.options,
        callback = _common$normalizeClie.callback;

    if (Object.keys(options).length === 0) {
      throw Error('Creating a ClientRequest with empty `options` is not supported in Nock');
    }

    http.OutgoingMessage.call(this);
    var interceptors = interceptorsFor(options);

    if (isOn() && interceptors) {
      debug('using', interceptors.length, 'interceptors');
      var overrider = new InterceptedRequestRouter({
        req: this,
        options: options,
        interceptors: interceptors
      });
      (0, _extends2.default)(this, overrider);

      if (callback) {
        this.once('response', callback);
      }
    } else {
      debug('falling back to original ClientRequest');

      if (isOff() || isEnabledForNetConnect(options)) {
        originalClientRequest.apply(this, arguments);
      } else {
        common.setImmediate(function () {
          var error = new NetConnectNotAllowedError(options.host, options.path);
          this.emit('error', error);
        }.bind(this));
      }
    }
  }

  inherits(OverriddenClientRequest, http.ClientRequest);
  originalClientRequest = http.ClientRequest;
  http.ClientRequest = OverriddenClientRequest;
  debug('ClientRequest overridden');
}

function restoreOverriddenClientRequest() {
  debug('restoring overridden ClientRequest');

  if (!originalClientRequest) {
    debug('- ClientRequest was not overridden');
  } else {
    http.ClientRequest = originalClientRequest;
    originalClientRequest = undefined;
    debug('- ClientRequest restored');
  }
}

function isActive() {
  return originalClientRequest !== undefined;
}

function interceptorScopes() {
  var _ref2;

  var nestedInterceptors = Object.values(allInterceptors).map(function (i) {
    return i.interceptors;
  });
  return (_ref2 = []).concat.apply(_ref2, (0, _toConsumableArray2.default)(nestedInterceptors)).map(function (i) {
    return i.scope;
  });
}

function isDone() {
  return interceptorScopes().every(function (scope) {
    return scope.isDone();
  });
}

function pendingMocks() {
  var _ref3;

  return (_ref3 = []).concat.apply(_ref3, (0, _toConsumableArray2.default)(interceptorScopes().map(function (scope) {
    return scope.pendingMocks();
  })));
}

function activeMocks() {
  var _ref4;

  return (_ref4 = []).concat.apply(_ref4, (0, _toConsumableArray2.default)(interceptorScopes().map(function (scope) {
    return scope.activeMocks();
  })));
}

function activate() {
  if (originalClientRequest) {
    throw new Error('Nock already active');
  }

  overrideClientRequest();
  common.overrideRequests(function (proto, overriddenRequest, args) {
    var _common$normalizeClie2 = common.normalizeClientRequestArgs.apply(common, (0, _toConsumableArray2.default)(args)),
        options = _common$normalizeClie2.options,
        callback = _common$normalizeClie2.callback;

    if (Object.keys(options).length === 0) {
      throw Error('Making a request with empty `options` is not supported in Nock');
    }

    options.proto = proto;
    var interceptors = interceptorsFor(options);

    if (isOn() && interceptors) {
      var matches = interceptors.some(function (interceptor) {
        return interceptor.matchOrigin(options);
      });
      var allowUnmocked = interceptors.some(function (interceptor) {
        return interceptor.options.allowUnmocked;
      });

      if (!matches && allowUnmocked) {
        var req;

        if (proto === 'https') {
          var ClientRequest = http.ClientRequest;
          http.ClientRequest = originalClientRequest;
          req = overriddenRequest(options, callback);
          http.ClientRequest = ClientRequest;
        } else {
          req = overriddenRequest(options, callback);
        }

        globalEmitter.emit('no match', req);
        return req;
      }

      return new http.ClientRequest(options, callback);
    } else {
      globalEmitter.emit('no match', options);

      if (isOff() || isEnabledForNetConnect(options)) {
        return overriddenRequest(options, callback);
      } else {
        var error = new NetConnectNotAllowedError(options.host, options.path);
        return new ErroringClientRequest(error);
      }
    }
  });
}

module.exports = {
  addInterceptor: addInterceptor,
  remove: remove,
  removeAll: removeAll,
  removeInterceptor: removeInterceptor,
  isOn: isOn,
  activate: activate,
  isActive: isActive,
  isDone: isDone,
  pendingMocks: pendingMocks,
  activeMocks: activeMocks,
  enableNetConnect: enableNetConnect,
  disableNetConnect: disableNetConnect,
  restoreOverriddenClientRequest: restoreOverriddenClientRequest,
  abortPendingRequests: common.removeAllTimers
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
{"version":3,"sources":["intercept.js"],"names":["require","InterceptedRequestRouter","common","inherits","http","debug","globalEmitter","NetConnectNotAllowedError","host","path","Error","call","name","code","message","captureStackTrace","constructor","allInterceptors","allowNetConnect","enableNetConnect","matcher","RegExp","test","isEnabledForNetConnect","options","normalizeRequestOptions","enabled","disableNetConnect","undefined","isOn","isOff","process","env","NOCK_OFF","addInterceptor","key","interceptor","scope","scopeOptions","interceptors","__nock_scope","__nock_scopeKey","__nock_scopeOptions","__nock_scopeHost","interceptionCounter","allowUnmocked","push","remove","shouldPersist","counter","basePath","some","thisInterceptor","i","splice","removeAll","Object","keys","forEach","keyedInterceptors","interceptorsFor","proto","values","filteringScope","logger","ic","__nock_filteredScope","matchStringOrRegexp","length","matchOrigin","removeInterceptor","Interceptor","baseUrl","method","_key","toUpperCase","originalClientRequest","ErroringClientRequest","error","OutgoingMessage","nextTick","emit","bind","ClientRequest","overrideClientRequest","OverriddenClientRequest","args","normalizeClientRequestArgs","callback","overrider","req","once","apply","arguments","setImmediate","restoreOverriddenClientRequest","isActive","interceptorScopes","nestedInterceptors","map","concat","isDone","every","pendingMocks","activeMocks","activate","overrideRequests","overriddenRequest","matches","module","exports","abortPendingRequests","removeAllTimers"],"mappings":"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","sourcesContent":["'use strict'\n\n/**\n * @module nock/intercept\n */\n\nconst { InterceptedRequestRouter } = require('./intercepted_request_router')\nconst common = require('./common')\nconst { inherits } = require('util')\nconst http = require('http')\nconst debug = require('debug')('nock.intercept')\nconst globalEmitter = require('./global_emitter')\n\n/**\n * @name NetConnectNotAllowedError\n * @private\n * @desc Error trying to make a connection when disabled external access.\n * @class\n * @example\n * nock.disableNetConnect();\n * http.get('http://zombo.com');\n * // throw NetConnectNotAllowedError\n */\nfunction NetConnectNotAllowedError(host, path) {\n  Error.call(this)\n\n  this.name = 'NetConnectNotAllowedError'\n  this.code = 'ENETUNREACH'\n  this.message = `Nock: Disallowed net connect for \"${host}${path}\"`\n\n  Error.captureStackTrace(this, this.constructor)\n}\n\ninherits(NetConnectNotAllowedError, Error)\n\nlet allInterceptors = {}\nlet allowNetConnect\n\n/**\n * Enabled real request.\n * @public\n * @param {String|RegExp} matcher=RegExp.new('.*') Expression to match\n * @example\n * // Enables all real requests\n * nock.enableNetConnect();\n * @example\n * // Enables real requests for url that matches google\n * nock.enableNetConnect('google');\n * @example\n * // Enables real requests for url that matches google and amazon\n * nock.enableNetConnect(/(google|amazon)/);\n * @example\n * // Enables real requests for url that includes google\n * nock.enableNetConnect(host => host.includes('google'));\n */\nfunction enableNetConnect(matcher) {\n  if (typeof matcher === 'string') {\n    allowNetConnect = new RegExp(matcher)\n  } else if (matcher instanceof RegExp) {\n    allowNetConnect = matcher\n  } else if (typeof matcher === 'function') {\n    allowNetConnect = { test: matcher }\n  } else {\n    allowNetConnect = /.*/\n  }\n}\n\nfunction isEnabledForNetConnect(options) {\n  common.normalizeRequestOptions(options)\n\n  const enabled = allowNetConnect && allowNetConnect.test(options.host)\n  debug('Net connect', enabled ? '' : 'not', 'enabled for', options.host)\n  return enabled\n}\n\n/**\n * Disable all real requests.\n * @public\n * @example\n * nock.disableNetConnect();\n */\nfunction disableNetConnect() {\n  allowNetConnect = undefined\n}\n\nfunction isOn() {\n  return !isOff()\n}\n\nfunction isOff() {\n  return process.env.NOCK_OFF === 'true'\n}\n\nfunction addInterceptor(key, interceptor, scope, scopeOptions, host) {\n  if (!(key in allInterceptors)) {\n    allInterceptors[key] = { key, interceptors: [] }\n  }\n  interceptor.__nock_scope = scope\n\n  //  We need scope's key and scope options for scope filtering function (if defined)\n  interceptor.__nock_scopeKey = key\n  interceptor.__nock_scopeOptions = scopeOptions\n  //  We need scope's host for setting correct request headers for filtered scopes.\n  interceptor.__nock_scopeHost = host\n  interceptor.interceptionCounter = 0\n\n  if (scopeOptions.allowUnmocked) allInterceptors[key].allowUnmocked = true\n\n  allInterceptors[key].interceptors.push(interceptor)\n}\n\nfunction remove(interceptor) {\n  if (interceptor.__nock_scope.shouldPersist() || --interceptor.counter > 0) {\n    return\n  }\n\n  const { basePath } = interceptor\n  const interceptors =\n    (allInterceptors[basePath] && allInterceptors[basePath].interceptors) || []\n\n  // TODO: There is a clearer way to write that we want to delete the first\n  // matching instance. I'm also not sure why we couldn't delete _all_\n  // matching instances.\n  interceptors.some(function (thisInterceptor, i) {\n    return thisInterceptor === interceptor ? interceptors.splice(i, 1) : false\n  })\n}\n\nfunction removeAll() {\n  Object.keys(allInterceptors).forEach(function (key) {\n    allInterceptors[key].interceptors.forEach(function (interceptor) {\n      interceptor.scope.keyedInterceptors = {}\n    })\n  })\n  allInterceptors = {}\n}\n\n/**\n * Return all the Interceptors whose Scopes match against the base path of the provided options.\n *\n * @returns {Interceptor[]}\n */\nfunction interceptorsFor(options) {\n  common.normalizeRequestOptions(options)\n\n  debug('interceptors for %j', options.host)\n\n  const basePath = `${options.proto}://${options.host}`\n\n  debug('filtering interceptors for basepath', basePath)\n\n  // First try to use filteringScope if any of the interceptors has it defined.\n  for (const { key, interceptors, allowUnmocked } of Object.values(\n    allInterceptors\n  )) {\n    for (const interceptor of interceptors) {\n      const { filteringScope } = interceptor.__nock_scopeOptions\n\n      // If scope filtering function is defined and returns a truthy value then\n      // we have to treat this as a match.\n      if (filteringScope && filteringScope(basePath)) {\n        interceptor.scope.logger('found matching scope interceptor')\n\n        // Keep the filtered scope (its key) to signal the rest of the module\n        // that this wasn't an exact but filtered match.\n        interceptors.forEach(ic => {\n          ic.__nock_filteredScope = ic.__nock_scopeKey\n        })\n        return interceptors\n      }\n    }\n\n    if (common.matchStringOrRegexp(basePath, key)) {\n      if (allowUnmocked && interceptors.length === 0) {\n        debug('matched base path with allowUnmocked (no matching interceptors)')\n        return [\n          {\n            options: { allowUnmocked: true },\n            matchOrigin() {\n              return false\n            },\n          },\n        ]\n      } else {\n        debug(\n          `matched base path (${interceptors.length} interceptor${\n            interceptors.length > 1 ? 's' : ''\n          })`\n        )\n        return interceptors\n      }\n    }\n  }\n\n  return undefined\n}\n\nfunction removeInterceptor(options) {\n  // Lazily import to avoid circular imports.\n  const Interceptor = require('./interceptor')\n\n  let baseUrl, key, method, proto\n  if (options instanceof Interceptor) {\n    baseUrl = options.basePath\n    key = options._key\n  } else {\n    proto = options.proto ? options.proto : 'http'\n\n    common.normalizeRequestOptions(options)\n    baseUrl = `${proto}://${options.host}`\n    method = (options.method && options.method.toUpperCase()) || 'GET'\n    key = `${method} ${baseUrl}${options.path || '/'}`\n  }\n\n  if (\n    allInterceptors[baseUrl] &&\n    allInterceptors[baseUrl].interceptors.length > 0\n  ) {\n    for (let i = 0; i < allInterceptors[baseUrl].interceptors.length; i++) {\n      const interceptor = allInterceptors[baseUrl].interceptors[i]\n      if (interceptor._key === key) {\n        allInterceptors[baseUrl].interceptors.splice(i, 1)\n        interceptor.scope.remove(key, interceptor)\n        break\n      }\n    }\n\n    return true\n  }\n\n  return false\n}\n//  Variable where we keep the ClientRequest we have overridden\n//  (which might or might not be node's original http.ClientRequest)\nlet originalClientRequest\n\nfunction ErroringClientRequest(error) {\n  http.OutgoingMessage.call(this)\n  process.nextTick(\n    function () {\n      this.emit('error', error)\n    }.bind(this)\n  )\n}\n\ninherits(ErroringClientRequest, http.ClientRequest)\n\nfunction overrideClientRequest() {\n  // Here's some background discussion about overriding ClientRequest:\n  // - https://github.com/nodejitsu/mock-request/issues/4\n  // - https://github.com/nock/nock/issues/26\n  // It would be good to add a comment that explains this more clearly.\n  debug('Overriding ClientRequest')\n\n  // ----- Extending http.ClientRequest\n\n  //  Define the overriding client request that nock uses internally.\n  function OverriddenClientRequest(...args) {\n    const { options, callback } = common.normalizeClientRequestArgs(...args)\n\n    if (Object.keys(options).length === 0) {\n      // As weird as it is, it's possible to call `http.request` without\n      // options, and it makes a request to localhost or somesuch. We should\n      // support it too, for parity. However it doesn't work today, and fixing\n      // it seems low priority. Giving an explicit error is nicer than\n      // crashing with a weird stack trace. `http[s].request()`, nock's other\n      // client-facing entry point, makes a similar check.\n      // https://github.com/nock/nock/pull/1386\n      // https://github.com/nock/nock/pull/1440\n      throw Error(\n        'Creating a ClientRequest with empty `options` is not supported in Nock'\n      )\n    }\n\n    http.OutgoingMessage.call(this)\n\n    //  Filter the interceptors per request options.\n    const interceptors = interceptorsFor(options)\n\n    if (isOn() && interceptors) {\n      debug('using', interceptors.length, 'interceptors')\n\n      //  Use filtered interceptors to intercept requests.\n      // TODO: this shouldn't be a class anymore\n      // the overrider explicitly overrides methods and attrs on the request so the `assign` below should be removed.\n      const overrider = new InterceptedRequestRouter({\n        req: this,\n        options,\n        interceptors,\n      })\n      Object.assign(this, overrider)\n\n      if (callback) {\n        this.once('response', callback)\n      }\n    } else {\n      debug('falling back to original ClientRequest')\n\n      //  Fallback to original ClientRequest if nock is off or the net connection is enabled.\n      if (isOff() || isEnabledForNetConnect(options)) {\n        originalClientRequest.apply(this, arguments)\n      } else {\n        common.setImmediate(\n          function () {\n            const error = new NetConnectNotAllowedError(\n              options.host,\n              options.path\n            )\n            this.emit('error', error)\n          }.bind(this)\n        )\n      }\n    }\n  }\n  inherits(OverriddenClientRequest, http.ClientRequest)\n\n  //  Override the http module's request but keep the original so that we can use it and later restore it.\n  //  NOTE: We only override http.ClientRequest as https module also uses it.\n  originalClientRequest = http.ClientRequest\n  http.ClientRequest = OverriddenClientRequest\n\n  debug('ClientRequest overridden')\n}\n\nfunction restoreOverriddenClientRequest() {\n  debug('restoring overridden ClientRequest')\n\n  //  Restore the ClientRequest we have overridden.\n  if (!originalClientRequest) {\n    debug('- ClientRequest was not overridden')\n  } else {\n    http.ClientRequest = originalClientRequest\n    originalClientRequest = undefined\n\n    debug('- ClientRequest restored')\n  }\n}\n\nfunction isActive() {\n  //  If ClientRequest has been overwritten by Nock then originalClientRequest is not undefined.\n  //  This means that Nock has been activated.\n  return originalClientRequest !== undefined\n}\n\nfunction interceptorScopes() {\n  const nestedInterceptors = Object.values(allInterceptors).map(\n    i => i.interceptors\n  )\n  return [].concat(...nestedInterceptors).map(i => i.scope)\n}\n\nfunction isDone() {\n  return interceptorScopes().every(scope => scope.isDone())\n}\n\nfunction pendingMocks() {\n  return [].concat(...interceptorScopes().map(scope => scope.pendingMocks()))\n}\n\nfunction activeMocks() {\n  return [].concat(...interceptorScopes().map(scope => scope.activeMocks()))\n}\n\nfunction activate() {\n  if (originalClientRequest) {\n    throw new Error('Nock already active')\n  }\n\n  overrideClientRequest()\n\n  // ----- Overriding http.request and https.request:\n\n  common.overrideRequests(function (proto, overriddenRequest, args) {\n    //  NOTE: overriddenRequest is already bound to its module.\n\n    const { options, callback } = common.normalizeClientRequestArgs(...args)\n\n    if (Object.keys(options).length === 0) {\n      // As weird as it is, it's possible to call `http.request` without\n      // options, and it makes a request to localhost or somesuch. We should\n      // support it too, for parity. However it doesn't work today, and fixing\n      // it seems low priority. Giving an explicit error is nicer than\n      // crashing with a weird stack trace. `new ClientRequest()`, nock's\n      // other client-facing entry point, makes a similar check.\n      // https://github.com/nock/nock/pull/1386\n      // https://github.com/nock/nock/pull/1440\n      throw Error(\n        'Making a request with empty `options` is not supported in Nock'\n      )\n    }\n\n    // The option per the docs is `protocol`. Its unclear if this line is meant to override that and is misspelled or if\n    // the intend is to explicitly keep track of which module was called using a separate name.\n    // Either way, `proto` is used as the source of truth from here on out.\n    options.proto = proto\n\n    const interceptors = interceptorsFor(options)\n\n    if (isOn() && interceptors) {\n      const matches = interceptors.some(interceptor =>\n        interceptor.matchOrigin(options)\n      )\n      const allowUnmocked = interceptors.some(\n        interceptor => interceptor.options.allowUnmocked\n      )\n\n      if (!matches && allowUnmocked) {\n        let req\n        if (proto === 'https') {\n          const { ClientRequest } = http\n          http.ClientRequest = originalClientRequest\n          req = overriddenRequest(options, callback)\n          http.ClientRequest = ClientRequest\n        } else {\n          req = overriddenRequest(options, callback)\n        }\n        globalEmitter.emit('no match', req)\n        return req\n      }\n\n      //  NOTE: Since we already overrode the http.ClientRequest we are in fact constructing\n      //    our own OverriddenClientRequest.\n      return new http.ClientRequest(options, callback)\n    } else {\n      globalEmitter.emit('no match', options)\n      if (isOff() || isEnabledForNetConnect(options)) {\n        return overriddenRequest(options, callback)\n      } else {\n        const error = new NetConnectNotAllowedError(options.host, options.path)\n        return new ErroringClientRequest(error)\n      }\n    }\n  })\n}\n\nmodule.exports = {\n  addInterceptor,\n  remove,\n  removeAll,\n  removeInterceptor,\n  isOn,\n  activate,\n  isActive,\n  isDone,\n  pendingMocks,\n  activeMocks,\n  enableNetConnect,\n  disableNetConnect,\n  restoreOverriddenClientRequest,\n  abortPendingRequests: common.removeAllTimers,\n}\n"]}
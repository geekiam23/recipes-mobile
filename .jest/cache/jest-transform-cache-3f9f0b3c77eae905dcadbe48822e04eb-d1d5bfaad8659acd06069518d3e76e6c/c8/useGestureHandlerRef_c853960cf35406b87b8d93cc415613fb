06f27ac5993afa1e61fafaeed566a66f
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useGestureHandlerRef;

var React = _interopRequireWildcard(require("react"));

var _GestureHandlerRefContext = _interopRequireDefault(require("./GestureHandlerRefContext"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function useGestureHandlerRef() {
  var ref = React.useContext(_GestureHandlerRefContext.default);

  if (ref === undefined) {
    throw new Error("Couldn't find a ref for gesture handler. Are you inside a screen in Stack?");
  }

  return ref;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZUdlc3R1cmVIYW5kbGVyUmVmLnRzeCJdLCJuYW1lcyI6WyJyZWYiLCJSZWFjdCIsIlN0YWNrR2VzdHVyZVJlZkNvbnRleHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBLEtBQUEsR0FBQSx1QkFBQSxDQUFBLE9BQUEsQ0FBQSxPQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLHlCQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLDhCQUFBLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVlLFNBQUEsb0JBQUEsR0FBZ0M7QUFDN0MsTUFBTUEsR0FBRyxHQUFHQyxLQUFLLENBQUxBLFVBQUFBLENBQWlCQyx5QkFBQUEsQ0FBN0IsT0FBWUQsQ0FBWjs7QUFFQSxNQUFJRCxHQUFHLEtBQVAsU0FBQSxFQUF1QjtBQUNyQixVQUFNLElBQUEsS0FBQSxDQUFOLDRFQUFNLENBQU47QUFHRDs7QUFFRCxTQUFBLEdBQUE7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBTdGFja0dlc3R1cmVSZWZDb250ZXh0IGZyb20gJy4vR2VzdHVyZUhhbmRsZXJSZWZDb250ZXh0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlR2VzdHVyZUhhbmRsZXJSZWYoKSB7XG4gIGNvbnN0IHJlZiA9IFJlYWN0LnVzZUNvbnRleHQoU3RhY2tHZXN0dXJlUmVmQ29udGV4dCk7XG5cbiAgaWYgKHJlZiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJDb3VsZG4ndCBmaW5kIGEgcmVmIGZvciBnZXN0dXJlIGhhbmRsZXIuIEFyZSB5b3UgaW5zaWRlIGEgc2NyZWVuIGluIFN0YWNrP1wiXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiByZWY7XG59XG4iXX0=
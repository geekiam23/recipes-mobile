{"version":3,"sources":["toPairsIn.js"],"names":["_curry1","require","toPairsIn","obj","pairs","prop","length","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAAgBC,OAAO,sBAAlC;;AAyBA,IAAIC,SAAS,GAAgBF,OAAO,CAAC,SAASE,SAAT,CAAmBC,GAAnB,EAAwB;AAC3D,MAAIC,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAIC,IAAT,IAAiBF,GAAjB,EAAsB;AACpBC,IAAAA,KAAK,CAACA,KAAK,CAACE,MAAP,CAAL,GAAsB,CAACD,IAAD,EAAOF,GAAG,CAACE,IAAD,CAAV,CAAtB;AACD;;AACD,SAAOD,KAAP;AACD,CANmC,CAApC;;AAOAG,MAAM,CAACC,OAAP,GAAiBN,SAAjB","sourcesContent":["var _curry1 = /*#__PURE__*/require('./internal/_curry1');\n\n/**\n * Converts an object into an array of key, value arrays. The object's own\n * properties and prototype properties are used. Note that the order of the\n * output array is not guaranteed to be consistent across different JS\n * platforms.\n *\n * @func\n * @memberOf R\n * @since v0.4.0\n * @category Object\n * @sig {String: *} -> [[String,*]]\n * @param {Object} obj The object to extract from\n * @return {Array} An array of key, value arrays from the object's own\n *         and prototype properties.\n * @example\n *\n *      const F = function() { this.x = 'X'; };\n *      F.prototype.y = 'Y';\n *      const f = new F();\n *      R.toPairsIn(f); //=> [['x','X'], ['y','Y']]\n */\n\n\nvar toPairsIn = /*#__PURE__*/_curry1(function toPairsIn(obj) {\n  var pairs = [];\n  for (var prop in obj) {\n    pairs[pairs.length] = [prop, obj[prop]];\n  }\n  return pairs;\n});\nmodule.exports = toPairsIn;"]}
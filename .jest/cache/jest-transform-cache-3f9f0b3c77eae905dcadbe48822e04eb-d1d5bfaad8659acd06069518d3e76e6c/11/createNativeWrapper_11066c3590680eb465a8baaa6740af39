f10f264fbecb2b5c3981f6fd9d4cb268
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends3 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createNativeWrapper;

var React = _interopRequireWildcard(require("react"));

var _NativeViewGestureHandler = require("./NativeViewGestureHandler");

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var NATIVE_WRAPPER_PROPS_FILTER = [].concat((0, _toConsumableArray2.default)(_NativeViewGestureHandler.nativeViewProps), ['onGestureHandlerEvent', 'onGestureHandlerStateChange']);

function createNativeWrapper(Component) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var ComponentWrapper = React.forwardRef(function (props, ref) {
    var gestureHandlerProps = Object.keys(props).reduce(function (res, key) {
      var allowedKeys = NATIVE_WRAPPER_PROPS_FILTER;

      if (allowedKeys.includes(key)) {
        res[key] = props[key];
      }

      return res;
    }, (0, _extends3.default)({}, config));

    var _ref = (0, React.useRef)();

    var _gestureHandlerRef = (0, React.useRef)();

    (0, React.useImperativeHandle)(ref, function () {
      var node = _gestureHandlerRef.current;

      if (_ref.current && node) {
        _ref.current.handlerTag = node.handlerTag;
        return _ref.current;
      }

      return null;
    }, [_ref, _gestureHandlerRef]);
    return React.createElement(_NativeViewGestureHandler.NativeViewGestureHandler, _extends({}, gestureHandlerProps, {
      ref: _gestureHandlerRef
    }), React.createElement(Component, _extends({}, props, {
      ref: _ref
    })));
  });
  ComponentWrapper.displayName = Component.displayName || 'ComponentWrapper';
  return ComponentWrapper;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNyZWF0ZU5hdGl2ZVdyYXBwZXIudHN4Il0sIm5hbWVzIjpbIk5BVElWRV9XUkFQUEVSX1BST1BTX0ZJTFRFUiIsIm5hdGl2ZVZpZXdQcm9wcyIsImNvbmZpZyIsIkNvbXBvbmVudFdyYXBwZXIiLCJnZXN0dXJlSGFuZGxlclByb3BzIiwiYWxsb3dlZEtleXMiLCJyZXMiLCJwcm9wcyIsIl9yZWYiLCJfZ2VzdHVyZUhhbmRsZXJSZWYiLCJub2RlIiwiQ29tcG9uZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQSxLQUFBLEdBQUEsdUJBQUEsQ0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBLENBQUE7O0FBR0EsSUFBQSx5QkFBQSxHQUFBLE9BQUEsOEJBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWFBLElBQU1BLDJCQUEyQiw4Q0FDNUJDLHlCQUFBQSxDQUQrQixlQUFILElBQUcsdUJBQUgsRUFBakMsNkJBQWlDLEVBQWpDOztBQU1lLFNBQUEsbUJBQUEsQ0FBQSxTQUFBLEVBR2I7QUFBQSxNQURBQyxNQUNBLHVFQUhhLEVBR2I7QUFDQSxNQUFNQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUwsVUFBQSxDQUd2QixVQUFBLEtBQUEsRUFBQSxHQUFBLEVBQWdCO0FBRWhCLFFBQU1DLG1CQUFtQixHQUFHLE1BQU0sQ0FBTixJQUFBLENBQUEsS0FBQSxFQUFBLE1BQUEsQ0FDMUIsVUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFjO0FBRVosVUFBTUMsV0FBOEIsR0FBcEMsMkJBQUE7O0FBQ0EsVUFBSUEsV0FBVyxDQUFYQSxRQUFBQSxDQUFKLEdBQUlBLENBQUosRUFBK0I7QUFFN0JDLFFBQUFBLEdBQUcsQ0FBSEEsR0FBRyxDQUFIQSxHQUFXQyxLQUFLLENBQWhCRCxHQUFnQixDQUFoQkE7QUFDRDs7QUFDRCxhQUFBLEdBQUE7QUFSd0IsS0FBQSw2QkFVckJKLE1BVnFCLEVBQTVCOztBQVlBLFFBQU1NLElBQUksR0FBRyxDQUFBLEdBQUEsS0FBQSxDQUFiLE1BQWEsR0FBYjs7QUFDQSxRQUFNQyxrQkFBa0IsR0FBRyxDQUFBLEdBQUEsS0FBQSxDQUEzQixNQUEyQixHQUEzQjs7QUFDQSxLQUFBLEdBQUEsS0FBQSxDQUFBLG1CQUFBLEVBQUEsR0FBQSxFQUdFLFlBQU07QUFDSixVQUFNQyxJQUFJLEdBQUdELGtCQUFrQixDQUQzQixPQUNKOztBQUVBLFVBQUlELElBQUksQ0FBSkEsT0FBQUEsSUFBSixJQUFBLEVBQTBCO0FBRXhCQSxRQUFBQSxJQUFJLENBQUpBLE9BQUFBLENBQUFBLFVBQUFBLEdBQTBCRSxJQUFJLENBQTlCRixVQUFBQTtBQUNBLGVBQU9BLElBQUksQ0FBWCxPQUFBO0FBQ0Q7O0FBQ0QsYUFBQSxJQUFBO0FBWEosS0FBQSxFQWFFLENBQUEsSUFBQSxFQWJGLGtCQWFFLENBYkY7QUFlQSxXQUNFLEtBQUEsQ0FBQSxhQUFBLENBQUMseUJBQUEsQ0FBRCx3QkFBQSxFQUFBLFFBQUEsQ0FBQSxFQUFBLEVBQUEsbUJBQUEsRUFBQTtBQUdFLE1BQUEsR0FBRyxFQUFFQztBQUhQLEtBQUEsQ0FBQSxFQUlFLEtBQUEsQ0FBQSxhQUFBLENBQUEsU0FBQSxFQUFBLFFBQUEsQ0FBQSxFQUFBLEVBQUEsS0FBQSxFQUFBO0FBQXNCLE1BQUEsR0FBRyxFQUFFRDtBQUEzQixLQUFBLENBQUEsQ0FKRixDQURGO0FBbENGLEdBQXlCLENBQXpCO0FBNENBTCxFQUFBQSxnQkFBZ0IsQ0FBaEJBLFdBQUFBLEdBQStCUSxTQUFTLENBQVRBLFdBQUFBLElBQS9CUixrQkFBQUE7QUFFQSxTQUFBLGdCQUFBO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VJbXBlcmF0aXZlSGFuZGxlLCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7XG4gIE5hdGl2ZVZpZXdHZXN0dXJlSGFuZGxlcixcbiAgTmF0aXZlVmlld0dlc3R1cmVIYW5kbGVyUHJvcHMsXG4gIG5hdGl2ZVZpZXdQcm9wcyxcbn0gZnJvbSAnLi9OYXRpdmVWaWV3R2VzdHVyZUhhbmRsZXInO1xuXG4vKlxuICogVGhpcyBhcnJheSBzaG91bGQgY29uc2lzdCBvZjpcbiAqICAgLSBBbGwga2V5cyBpbiBwcm9wVHlwZXMgZnJvbSBOYXRpdmVHZXN0dXJlSGFuZGxlclxuICogICAgIChhbmQgYWxsIGtleXMgaW4gR2VzdHVyZUhhbmRsZXJQcm9wVHlwZXMpXG4gKiAgIC0gJ29uR2VzdHVyZUhhbmRsZXJFdmVudCdcbiAqICAgLSAnb25HZXN0dXJlSGFuZGxlclN0YXRlQ2hhbmdlJ1xuICovXG5jb25zdCBOQVRJVkVfV1JBUFBFUl9QUk9QU19GSUxURVIgPSBbXG4gIC4uLm5hdGl2ZVZpZXdQcm9wcyxcbiAgJ29uR2VzdHVyZUhhbmRsZXJFdmVudCcsXG4gICdvbkdlc3R1cmVIYW5kbGVyU3RhdGVDaGFuZ2UnLFxuXSBhcyBjb25zdDtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTmF0aXZlV3JhcHBlcjxQPihcbiAgQ29tcG9uZW50OiBSZWFjdC5Db21wb25lbnRUeXBlPFA+LFxuICBjb25maWc6IFJlYWRvbmx5PE5hdGl2ZVZpZXdHZXN0dXJlSGFuZGxlclByb3BzPiA9IHt9XG4pIHtcbiAgY29uc3QgQ29tcG9uZW50V3JhcHBlciA9IFJlYWN0LmZvcndhcmRSZWY8XG4gICAgUmVhY3QuQ29tcG9uZW50VHlwZTxhbnk+LFxuICAgIFAgJiBOYXRpdmVWaWV3R2VzdHVyZUhhbmRsZXJQcm9wc1xuICA+KChwcm9wcywgcmVmKSA9PiB7XG4gICAgLy8gZmlsdGVyIG91dCBwcm9wcyB0aGF0IHNob3VsZCBiZSBwYXNzZWQgdG8gZ2VzdHVyZSBoYW5kbGVyIHdyYXBwZXJcbiAgICBjb25zdCBnZXN0dXJlSGFuZGxlclByb3BzID0gT2JqZWN0LmtleXMocHJvcHMpLnJlZHVjZShcbiAgICAgIChyZXMsIGtleSkgPT4ge1xuICAgICAgICAvLyBUUyBiZWluZyBvdmVybHkgcHJvdGVjdGl2ZSB3aXRoIGl0J3MgdHlwZXMsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzI2MjU1I2lzc3VlY29tbWVudC00NTgwMTM3MzEgZm9yIG1vcmUgaW5mb1xuICAgICAgICBjb25zdCBhbGxvd2VkS2V5czogcmVhZG9ubHkgc3RyaW5nW10gPSBOQVRJVkVfV1JBUFBFUl9QUk9QU19GSUxURVI7XG4gICAgICAgIGlmIChhbGxvd2VkS2V5cy5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgLy8gQHRzLWlnbm9yZSBGSVhNRShUUylcbiAgICAgICAgICByZXNba2V5XSA9IHByb3BzW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgIH0sXG4gICAgICB7IC4uLmNvbmZpZyB9IC8vIHdhdGNoIG91dCBub3QgdG8gbW9kaWZ5IGNvbmZpZ1xuICAgICk7XG4gICAgY29uc3QgX3JlZiA9IHVzZVJlZjxSZWFjdC5Db21wb25lbnRUeXBlPFA+PigpO1xuICAgIGNvbnN0IF9nZXN0dXJlSGFuZGxlclJlZiA9IHVzZVJlZjxSZWFjdC5Db21wb25lbnRUeXBlPFA+PigpO1xuICAgIHVzZUltcGVyYXRpdmVIYW5kbGUoXG4gICAgICByZWYsXG4gICAgICAvLyBAdHMtaWdub3JlIFRPRE8oVFMpIGRlY2lkZSBob3cgbnVsbHMgd29yayBpbiB0aGlzIGNvbnRleHRcbiAgICAgICgpID0+IHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IF9nZXN0dXJlSGFuZGxlclJlZi5jdXJyZW50O1xuICAgICAgICAvLyBhZGQgaGFuZGxlclRhZyBmb3IgcmVsYXRpb25zIGNvbmZpZ1xuICAgICAgICBpZiAoX3JlZi5jdXJyZW50ICYmIG5vZGUpIHtcbiAgICAgICAgICAvLyBAdHMtaWdub3JlIEZJWE1FKFRTKSB0aGluayBhYm91dCBjcmVhdGVIYW5kbGVyIHJldHVybiB0eXBlXG4gICAgICAgICAgX3JlZi5jdXJyZW50LmhhbmRsZXJUYWcgPSBub2RlLmhhbmRsZXJUYWc7XG4gICAgICAgICAgcmV0dXJuIF9yZWYuY3VycmVudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0sXG4gICAgICBbX3JlZiwgX2dlc3R1cmVIYW5kbGVyUmVmXVxuICAgICk7XG4gICAgcmV0dXJuIChcbiAgICAgIDxOYXRpdmVWaWV3R2VzdHVyZUhhbmRsZXJcbiAgICAgICAgey4uLmdlc3R1cmVIYW5kbGVyUHJvcHN9XG4gICAgICAgIC8vIEB0cy1pZ25vcmUgVE9ETyhUUylcbiAgICAgICAgcmVmPXtfZ2VzdHVyZUhhbmRsZXJSZWZ9PlxuICAgICAgICA8Q29tcG9uZW50IHsuLi5wcm9wc30gcmVmPXtfcmVmfSAvPlxuICAgICAgPC9OYXRpdmVWaWV3R2VzdHVyZUhhbmRsZXI+XG4gICAgKTtcbiAgfSk7XG5cbiAgQ29tcG9uZW50V3JhcHBlci5kaXNwbGF5TmFtZSA9IENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCAnQ29tcG9uZW50V3JhcHBlcic7XG5cbiAgcmV0dXJuIENvbXBvbmVudFdyYXBwZXI7XG59XG4iXX0=
{"version":3,"sources":["test-id.js"],"names":["Object","defineProperty","exports","value","findByTestId","findAllByTestId","getAllByTestId","getByTestId","queryAllByTestId","queryByTestId","_helpers","require","_queryHelpers","_allUtils","getTestIdAttribute","getConfig","testIdAttribute","args","checkContainerType","queryAllByAttribute","getMultipleError","c","id","getMissingError","queryAllByTestIdWithSuggestions","wrapAllByQueryWithSuggestion","name","buildQueries"],"mappings":"AAAA;;;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,YAAR,GAAuBF,OAAO,CAACG,eAAR,GAA0BH,OAAO,CAACI,cAAR,GAAyBJ,OAAO,CAACK,WAAR,GAAsBL,OAAO,CAACM,gBAAR,GAA2BN,OAAO,CAACO,aAAR,GAAwB,KAAK,CAAxJ;;AAEA,IAAIC,QAAQ,GAAGC,OAAO,cAAtB;;AAEA,IAAIC,aAAa,GAAGD,OAAO,oBAA3B;;AAEA,IAAIE,SAAS,GAAGF,OAAO,eAAvB;;AAEA,IAAMG,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,SAAM,CAAC,GAAGD,SAAS,CAACE,SAAd,IAA2BC,eAAjC;AAAA,CAA3B;;AAEA,IAAMR,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAa;AAAA,oCAATS,IAAS;AAATA,IAAAA,IAAS;AAAA;;AACpC,GAAC,GAAGP,QAAQ,CAACQ,kBAAb,EAAiCD,IAAI,CAAC,CAAD,CAArC;AAIA,SAAO,CAAC,GAAGJ,SAAS,CAACM,mBAAd,iBAAmCL,kBAAkB,EAArD,SAA4DG,IAA5D,EAAP;AACD,CAND;;AAQA,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,CAAD,EAAIC,EAAJ;AAAA,2CAA2CR,kBAAkB,EAA7D,WAAoEQ,EAApE;AAAA,CAAzB;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACF,CAAD,EAAIC,EAAJ;AAAA,6CAA6CR,kBAAkB,EAA/D,WAAsEQ,EAAtE;AAAA,CAAxB;;AAEA,IAAME,+BAA+B,GAAG,CAAC,GAAGZ,aAAa,CAACa,4BAAlB,EAAgDjB,gBAAhD,EAAkEA,gBAAgB,CAACkB,IAAnF,EAAyF,UAAzF,CAAxC;AACAxB,OAAO,CAACM,gBAAR,GAA2BgB,+BAA3B;;AACA,WAAoF,CAAC,GAAGX,SAAS,CAACc,YAAd,EAA4BnB,gBAA5B,EAA8CY,gBAA9C,EAAgEG,eAAhE,CAApF;AAAA;AAAA,IAAOd,aAAP;AAAA,IAAsBH,cAAtB;AAAA,IAAsCC,WAAtC;AAAA,IAAmDF,eAAnD;AAAA,IAAoED,YAApE;;AACAF,OAAO,CAACE,YAAR,GAAuBA,YAAvB;AACAF,OAAO,CAACG,eAAR,GAA0BA,eAA1B;AACAH,OAAO,CAACK,WAAR,GAAsBA,WAAtB;AACAL,OAAO,CAACI,cAAR,GAAyBA,cAAzB;AACAJ,OAAO,CAACO,aAAR,GAAwBA,aAAxB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findByTestId = exports.findAllByTestId = exports.getAllByTestId = exports.getByTestId = exports.queryAllByTestId = exports.queryByTestId = void 0;\n\nvar _helpers = require(\"../helpers\");\n\nvar _queryHelpers = require(\"../query-helpers\");\n\nvar _allUtils = require(\"./all-utils\");\n\nconst getTestIdAttribute = () => (0, _allUtils.getConfig)().testIdAttribute;\n\nconst queryAllByTestId = (...args) => {\n  (0, _helpers.checkContainerType)(args[0]); // TODO: Remove ignore after `queryAllByAttribute` will be moved to TS\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n\n  return (0, _allUtils.queryAllByAttribute)(getTestIdAttribute(), ...args);\n};\n\nconst getMultipleError = (c, id) => `Found multiple elements by: [${getTestIdAttribute()}=\"${id}\"]`;\n\nconst getMissingError = (c, id) => `Unable to find an element by: [${getTestIdAttribute()}=\"${id}\"]`;\n\nconst queryAllByTestIdWithSuggestions = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByTestId, queryAllByTestId.name, 'queryAll');\nexports.queryAllByTestId = queryAllByTestIdWithSuggestions;\nconst [queryByTestId, getAllByTestId, getByTestId, findAllByTestId, findByTestId] = (0, _allUtils.buildQueries)(queryAllByTestId, getMultipleError, getMissingError);\nexports.findByTestId = findByTestId;\nexports.findAllByTestId = findAllByTestId;\nexports.getByTestId = getByTestId;\nexports.getAllByTestId = getAllByTestId;\nexports.queryByTestId = queryByTestId;"]}
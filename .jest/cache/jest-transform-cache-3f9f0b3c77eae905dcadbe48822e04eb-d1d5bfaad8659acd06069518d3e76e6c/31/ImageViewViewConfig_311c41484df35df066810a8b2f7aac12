eeee7cb7832fa08741afff74c11dd1fe
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _ReactNativeViewViewConfig = _interopRequireDefault(require("../Components/View/ReactNativeViewViewConfig"));

var ImageViewViewConfig = {
  uiViewClassName: 'RCTImageView',
  bubblingEventTypes: {},
  directEventTypes: {
    topLoadStart: {
      registrationName: 'onLoadStart'
    },
    topProgress: {
      registrationName: 'onProgress'
    },
    topError: {
      registrationName: 'onError'
    },
    topPartialLoad: {
      registrationName: 'onPartialLoad'
    },
    topLoad: {
      registrationName: 'onLoad'
    },
    topLoadEnd: {
      registrationName: 'onLoadEnd'
    }
  },
  validAttributes: (0, _extends2.default)({}, _ReactNativeViewViewConfig.default.validAttributes, {
    blurRadius: true,
    capInsets: {
      diff: require("../Utilities/differ/insetsDiffer")
    },
    defaultSource: {
      process: require("./resolveAssetSource")
    },
    defaultSrc: true,
    fadeDuration: true,
    headers: true,
    loadingIndicatorSrc: true,
    onError: true,
    onLoad: true,
    onLoadEnd: true,
    onLoadStart: true,
    onPartialLoad: true,
    onProgress: true,
    overlayColor: {
      process: require("../StyleSheet/processColor")
    },
    progressiveRenderingEnabled: true,
    resizeMethod: true,
    resizeMode: true,
    shouldNotifyLoadEvents: true,
    source: true,
    src: true,
    tintColor: {
      process: require("../StyleSheet/processColor")
    }
  })
};
module.exports = ImageViewViewConfig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkltYWdlVmlld1ZpZXdDb25maWcuanMiXSwibmFtZXMiOlsiSW1hZ2VWaWV3Vmlld0NvbmZpZyIsInVpVmlld0NsYXNzTmFtZSIsImJ1YmJsaW5nRXZlbnRUeXBlcyIsImRpcmVjdEV2ZW50VHlwZXMiLCJ0b3BMb2FkU3RhcnQiLCJyZWdpc3RyYXRpb25OYW1lIiwidG9wUHJvZ3Jlc3MiLCJ0b3BFcnJvciIsInRvcFBhcnRpYWxMb2FkIiwidG9wTG9hZCIsInRvcExvYWRFbmQiLCJ2YWxpZEF0dHJpYnV0ZXMiLCJSZWFjdE5hdGl2ZVZpZXdWaWV3Q29uZmlnIiwiYmx1clJhZGl1cyIsImNhcEluc2V0cyIsImRpZmYiLCJyZXF1aXJlIiwiZGVmYXVsdFNvdXJjZSIsInByb2Nlc3MiLCJkZWZhdWx0U3JjIiwiZmFkZUR1cmF0aW9uIiwiaGVhZGVycyIsImxvYWRpbmdJbmRpY2F0b3JTcmMiLCJvbkVycm9yIiwib25Mb2FkIiwib25Mb2FkRW5kIiwib25Mb2FkU3RhcnQiLCJvblBhcnRpYWxMb2FkIiwib25Qcm9ncmVzcyIsIm92ZXJsYXlDb2xvciIsInByb2dyZXNzaXZlUmVuZGVyaW5nRW5hYmxlZCIsInJlc2l6ZU1ldGhvZCIsInJlc2l6ZU1vZGUiLCJzaG91bGROb3RpZnlMb2FkRXZlbnRzIiwic291cmNlIiwic3JjIiwidGludENvbG9yIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBVUE7Ozs7OztBQUVBOztBQUdBLElBQU1BLG1CQUFtQixHQUFHO0FBQzFCQyxFQUFBQSxlQUFlLEVBQUUsY0FEUztBQUUxQkMsRUFBQUEsa0JBQWtCLEVBQUUsRUFGTTtBQUcxQkMsRUFBQUEsZ0JBQWdCLEVBQUU7QUFDaEJDLElBQUFBLFlBQVksRUFBRTtBQUNaQyxNQUFBQSxnQkFBZ0IsRUFBRTtBQUROLEtBREU7QUFJaEJDLElBQUFBLFdBQVcsRUFBRTtBQUNYRCxNQUFBQSxnQkFBZ0IsRUFBRTtBQURQLEtBSkc7QUFPaEJFLElBQUFBLFFBQVEsRUFBRTtBQUNSRixNQUFBQSxnQkFBZ0IsRUFBRTtBQURWLEtBUE07QUFVaEJHLElBQUFBLGNBQWMsRUFBRTtBQUNkSCxNQUFBQSxnQkFBZ0IsRUFBRTtBQURKLEtBVkE7QUFhaEJJLElBQUFBLE9BQU8sRUFBRTtBQUNQSixNQUFBQSxnQkFBZ0IsRUFBRTtBQURYLEtBYk87QUFnQmhCSyxJQUFBQSxVQUFVLEVBQUU7QUFDVkwsTUFBQUEsZ0JBQWdCLEVBQUU7QUFEUjtBQWhCSSxHQUhRO0FBdUIxQk0sRUFBQUEsZUFBZSw2QkFDVkMsbUNBQTBCRCxlQURoQjtBQUViRSxJQUFBQSxVQUFVLEVBQUUsSUFGQztBQUliQyxJQUFBQSxTQUFTLEVBQUU7QUFBQ0MsTUFBQUEsSUFBSSxFQUFHQyxPQUFPO0FBQWYsS0FKRTtBQUtiQyxJQUFBQSxhQUFhLEVBQUU7QUFDYkMsTUFBQUEsT0FBTyxFQUFFRixPQUFPO0FBREgsS0FMRjtBQVFiRyxJQUFBQSxVQUFVLEVBQUUsSUFSQztBQVNiQyxJQUFBQSxZQUFZLEVBQUUsSUFURDtBQVViQyxJQUFBQSxPQUFPLEVBQUUsSUFWSTtBQVdiQyxJQUFBQSxtQkFBbUIsRUFBRSxJQVhSO0FBWWJDLElBQUFBLE9BQU8sRUFBRSxJQVpJO0FBYWJDLElBQUFBLE1BQU0sRUFBRSxJQWJLO0FBY2JDLElBQUFBLFNBQVMsRUFBRSxJQWRFO0FBZWJDLElBQUFBLFdBQVcsRUFBRSxJQWZBO0FBZ0JiQyxJQUFBQSxhQUFhLEVBQUUsSUFoQkY7QUFpQmJDLElBQUFBLFVBQVUsRUFBRSxJQWpCQztBQWtCYkMsSUFBQUEsWUFBWSxFQUFFO0FBQUNYLE1BQUFBLE9BQU8sRUFBRUYsT0FBTztBQUFqQixLQWxCRDtBQW1CYmMsSUFBQUEsMkJBQTJCLEVBQUUsSUFuQmhCO0FBb0JiQyxJQUFBQSxZQUFZLEVBQUUsSUFwQkQ7QUFxQmJDLElBQUFBLFVBQVUsRUFBRSxJQXJCQztBQXNCYkMsSUFBQUEsc0JBQXNCLEVBQUUsSUF0Qlg7QUF1QmJDLElBQUFBLE1BQU0sRUFBRSxJQXZCSztBQXdCYkMsSUFBQUEsR0FBRyxFQUFFLElBeEJRO0FBeUJiQyxJQUFBQSxTQUFTLEVBQUU7QUFBQ2xCLE1BQUFBLE9BQU8sRUFBRUYsT0FBTztBQUFqQjtBQXpCRTtBQXZCVyxDQUE1QjtBQW9EQXFCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFrQnRDLG1CQUFsQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgUmVhY3ROYXRpdmVWaWV3Vmlld0NvbmZpZyBmcm9tICcuLi9Db21wb25lbnRzL1ZpZXcvUmVhY3ROYXRpdmVWaWV3Vmlld0NvbmZpZyc7XG5pbXBvcnQgdHlwZSB7UmVhY3ROYXRpdmVCYXNlQ29tcG9uZW50Vmlld0NvbmZpZ30gZnJvbSAnLi4vUmVuZGVyZXIvc2hpbXMvUmVhY3ROYXRpdmVUeXBlcyc7XG5cbmNvbnN0IEltYWdlVmlld1ZpZXdDb25maWcgPSB7XG4gIHVpVmlld0NsYXNzTmFtZTogJ1JDVEltYWdlVmlldycsXG4gIGJ1YmJsaW5nRXZlbnRUeXBlczoge30sXG4gIGRpcmVjdEV2ZW50VHlwZXM6IHtcbiAgICB0b3BMb2FkU3RhcnQ6IHtcbiAgICAgIHJlZ2lzdHJhdGlvbk5hbWU6ICdvbkxvYWRTdGFydCcsXG4gICAgfSxcbiAgICB0b3BQcm9ncmVzczoge1xuICAgICAgcmVnaXN0cmF0aW9uTmFtZTogJ29uUHJvZ3Jlc3MnLFxuICAgIH0sXG4gICAgdG9wRXJyb3I6IHtcbiAgICAgIHJlZ2lzdHJhdGlvbk5hbWU6ICdvbkVycm9yJyxcbiAgICB9LFxuICAgIHRvcFBhcnRpYWxMb2FkOiB7XG4gICAgICByZWdpc3RyYXRpb25OYW1lOiAnb25QYXJ0aWFsTG9hZCcsXG4gICAgfSxcbiAgICB0b3BMb2FkOiB7XG4gICAgICByZWdpc3RyYXRpb25OYW1lOiAnb25Mb2FkJyxcbiAgICB9LFxuICAgIHRvcExvYWRFbmQ6IHtcbiAgICAgIHJlZ2lzdHJhdGlvbk5hbWU6ICdvbkxvYWRFbmQnLFxuICAgIH0sXG4gIH0sXG4gIHZhbGlkQXR0cmlidXRlczoge1xuICAgIC4uLlJlYWN0TmF0aXZlVmlld1ZpZXdDb25maWcudmFsaWRBdHRyaWJ1dGVzLFxuICAgIGJsdXJSYWRpdXM6IHRydWUsXG4gICAgLy8gZmxvd2xpbnQtbmV4dC1saW5lIHVuY2xlYXItdHlwZTpvZmZcbiAgICBjYXBJbnNldHM6IHtkaWZmOiAocmVxdWlyZSgnLi4vVXRpbGl0aWVzL2RpZmZlci9pbnNldHNEaWZmZXInKTogYW55KX0sXG4gICAgZGVmYXVsdFNvdXJjZToge1xuICAgICAgcHJvY2VzczogcmVxdWlyZSgnLi9yZXNvbHZlQXNzZXRTb3VyY2UnKSxcbiAgICB9LFxuICAgIGRlZmF1bHRTcmM6IHRydWUsXG4gICAgZmFkZUR1cmF0aW9uOiB0cnVlLFxuICAgIGhlYWRlcnM6IHRydWUsXG4gICAgbG9hZGluZ0luZGljYXRvclNyYzogdHJ1ZSxcbiAgICBvbkVycm9yOiB0cnVlLFxuICAgIG9uTG9hZDogdHJ1ZSxcbiAgICBvbkxvYWRFbmQ6IHRydWUsXG4gICAgb25Mb2FkU3RhcnQ6IHRydWUsXG4gICAgb25QYXJ0aWFsTG9hZDogdHJ1ZSxcbiAgICBvblByb2dyZXNzOiB0cnVlLFxuICAgIG92ZXJsYXlDb2xvcjoge3Byb2Nlc3M6IHJlcXVpcmUoJy4uL1N0eWxlU2hlZXQvcHJvY2Vzc0NvbG9yJyl9LFxuICAgIHByb2dyZXNzaXZlUmVuZGVyaW5nRW5hYmxlZDogdHJ1ZSxcbiAgICByZXNpemVNZXRob2Q6IHRydWUsXG4gICAgcmVzaXplTW9kZTogdHJ1ZSxcbiAgICBzaG91bGROb3RpZnlMb2FkRXZlbnRzOiB0cnVlLFxuICAgIHNvdXJjZTogdHJ1ZSxcbiAgICBzcmM6IHRydWUsXG4gICAgdGludENvbG9yOiB7cHJvY2VzczogcmVxdWlyZSgnLi4vU3R5bGVTaGVldC9wcm9jZXNzQ29sb3InKX0sXG4gIH0sXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IChJbWFnZVZpZXdWaWV3Q29uZmlnOiBSZWFjdE5hdGl2ZUJhc2VDb21wb25lbnRWaWV3Q29uZmlnPD4pO1xuIl19
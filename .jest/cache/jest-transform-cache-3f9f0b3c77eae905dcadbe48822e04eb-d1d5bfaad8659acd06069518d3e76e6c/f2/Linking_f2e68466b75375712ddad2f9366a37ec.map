{"version":3,"sources":["Linking.js"],"names":["Linking","Platform","OS","NativeLinkingManager","undefined","type","handler","addListener","removeListener","url","_validateURL","NativeIntentAndroid","openURL","canOpenURL","openSettings","InteractionManager","runAfterInteractions","then","getInitialURL","action","extras","sendIntent","Promise","resolve","reject","Error","NativeEventEmitter","module","exports"],"mappings":"AAUA;;;;;;;;;;;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;IAQMA,O;;;;;AACJ,qBAAc;AAAA;AAAA,6BACNC,kBAASC,EAAT,KAAgB,KAAhB,GAAwB,yBAAWC,6BAAX,CAAxB,GAA2DC,SADrD;AAEb;;;;WAQD,0BAAoBC,IAApB,EAAkCC,OAAlC,EAA8C;AAC5C,WAAKC,WAAL,CAAiBF,IAAjB,EAAuBC,OAAvB;AACD;;;WAOD,6BAAuBD,IAAvB,EAAqCC,OAArC,EAAiD;AAC/C,WAAKE,cAAL,CAAoBH,IAApB,EAA0BC,OAA1B;AACD;;;WAOD,iBAAQG,GAAR,EAAoC;AAClC,WAAKC,YAAL,CAAkBD,GAAlB;;AACA,UAAIR,kBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,eAAO,yBAAWS,4BAAX,EAAgCC,OAAhC,CAAwCH,GAAxC,CAAP;AACD,OAFD,MAEO;AACL,eAAO,yBAAWN,6BAAX,EAAiCS,OAAjC,CAAyCH,GAAzC,CAAP;AACD;AACF;;;WAOD,oBAAWA,GAAX,EAA0C;AACxC,WAAKC,YAAL,CAAkBD,GAAlB;;AACA,UAAIR,kBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,eAAO,yBAAWS,4BAAX,EAAgCE,UAAhC,CAA2CJ,GAA3C,CAAP;AACD,OAFD,MAEO;AACL,eAAO,yBAAWN,6BAAX,EAAiCU,UAAjC,CAA4CJ,GAA5C,CAAP;AACD;AACF;;;WAOD,wBAA8B;AAC5B,UAAIR,kBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,eAAO,yBAAWS,4BAAX,EAAgCG,YAAhC,EAAP;AACD,OAFD,MAEO;AACL,eAAO,yBAAWX,6BAAX,EAAiCW,YAAjC,EAAP;AACD;AACF;;;WAQD,yBAAkC;AAChC,aAAOb,kBAASC,EAAT,KAAgB,SAAhB,GACHa,4BAAmBC,oBAAnB,GAA0CC,IAA1C,CAA+C;AAAA,eAC7C,yBAAWN,4BAAX,EAAgCO,aAAhC,EAD6C;AAAA,OAA/C,CADG,GAIH,yBAAWf,6BAAX,EAAiCe,aAAjC,EAJJ;AAKD;;;WASD,oBACEC,MADF,EAEEC,MAFF,EAOiB;AACf,UAAInB,kBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,eAAO,yBAAWS,4BAAX,EAAgCU,UAAhC,CAA2CF,MAA3C,EAAmDC,MAAnD,CAAP;AACD,OAFD,MAEO;AACL,eAAO,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV;AAAA,iBAAqBA,MAAM,CAAC,IAAIC,KAAJ,CAAU,aAAV,CAAD,CAA3B;AAAA,SAAZ,CAAP;AACD;AACF;;;WAED,sBAAahB,GAAb,EAA0B;AACxB,8BACE,OAAOA,GAAP,KAAe,QADjB,EAEE,2CAA2CA,GAF7C;AAIA,8BAAUA,GAAV,EAAe,8BAAf;AACD;;;EA3GmBiB,4B;;AA8GtBC,MAAM,CAACC,OAAP,GAAkB,IAAI5B,OAAJ,EAAlB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nimport NativeEventEmitter from '../EventEmitter/NativeEventEmitter';\nimport InteractionManager from '../Interaction/InteractionManager';\nimport Platform from '../Utilities/Platform';\nimport NativeLinkingManager from './NativeLinkingManager';\nimport NativeIntentAndroid from './NativeIntentAndroid';\nimport invariant from 'invariant';\nimport nullthrows from 'nullthrows';\n\n/**\n * `Linking` gives you a general interface to interact with both incoming\n * and outgoing app links.\n *\n * See https://reactnative.dev/docs/linking.html\n */\nclass Linking extends NativeEventEmitter {\n  constructor() {\n    super(Platform.OS === 'ios' ? nullthrows(NativeLinkingManager) : undefined);\n  }\n\n  /**\n   * Add a handler to Linking changes by listening to the `url` event type\n   * and providing the handler\n   *\n   * See https://reactnative.dev/docs/linking.html#addeventlistener\n   */\n  addEventListener<T>(type: string, handler: T) {\n    this.addListener(type, handler);\n  }\n\n  /**\n   * Remove a handler by passing the `url` event type and the handler.\n   *\n   * See https://reactnative.dev/docs/linking.html#removeeventlistener\n   */\n  removeEventListener<T>(type: string, handler: T) {\n    this.removeListener(type, handler);\n  }\n\n  /**\n   * Try to open the given `url` with any of the installed apps.\n   *\n   * See https://reactnative.dev/docs/linking.html#openurl\n   */\n  openURL(url: string): Promise<void> {\n    this._validateURL(url);\n    if (Platform.OS === 'android') {\n      return nullthrows(NativeIntentAndroid).openURL(url);\n    } else {\n      return nullthrows(NativeLinkingManager).openURL(url);\n    }\n  }\n\n  /**\n   * Determine whether or not an installed app can handle a given URL.\n   *\n   * See https://reactnative.dev/docs/linking.html#canopenurl\n   */\n  canOpenURL(url: string): Promise<boolean> {\n    this._validateURL(url);\n    if (Platform.OS === 'android') {\n      return nullthrows(NativeIntentAndroid).canOpenURL(url);\n    } else {\n      return nullthrows(NativeLinkingManager).canOpenURL(url);\n    }\n  }\n\n  /**\n   * Open app settings.\n   *\n   * See https://reactnative.dev/docs/linking.html#opensettings\n   */\n  openSettings(): Promise<void> {\n    if (Platform.OS === 'android') {\n      return nullthrows(NativeIntentAndroid).openSettings();\n    } else {\n      return nullthrows(NativeLinkingManager).openSettings();\n    }\n  }\n\n  /**\n   * If the app launch was triggered by an app link,\n   * it will give the link url, otherwise it will give `null`\n   *\n   * See https://reactnative.dev/docs/linking.html#getinitialurl\n   */\n  getInitialURL(): Promise<?string> {\n    return Platform.OS === 'android'\n      ? InteractionManager.runAfterInteractions().then(() =>\n          nullthrows(NativeIntentAndroid).getInitialURL(),\n        )\n      : nullthrows(NativeLinkingManager).getInitialURL();\n  }\n\n  /*\n   * Launch an Android intent with extras (optional)\n   *\n   * @platform android\n   *\n   * See https://reactnative.dev/docs/linking.html#sendintent\n   */\n  sendIntent(\n    action: string,\n    extras?: Array<{\n      key: string,\n      value: string | number | boolean,\n      ...\n    }>,\n  ): Promise<void> {\n    if (Platform.OS === 'android') {\n      return nullthrows(NativeIntentAndroid).sendIntent(action, extras);\n    } else {\n      return new Promise((resolve, reject) => reject(new Error('Unsupported')));\n    }\n  }\n\n  _validateURL(url: string) {\n    invariant(\n      typeof url === 'string',\n      'Invalid URL: should be a string. Was: ' + url,\n    );\n    invariant(url, 'Invalid URL: cannot be empty');\n  }\n}\n\nmodule.exports = (new Linking(): Linking);\n"]}
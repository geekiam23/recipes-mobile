5e413585c6fb060aa35bc747e11727cf
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runWithExpensiveErrorDiagnosticsDisabled = runWithExpensiveErrorDiagnosticsDisabled;
exports.configure = configure;
exports.getConfig = getConfig;

var _prettyDom = require("./pretty-dom");

var config = {
  testIdAttribute: 'data-testid',
  asyncUtilTimeout: 1000,
  asyncWrapper: function asyncWrapper(cb) {
    return cb();
  },
  eventWrapper: function eventWrapper(cb) {
    return cb();
  },
  defaultHidden: false,
  showOriginalStackTrace: false,
  throwSuggestions: false,
  getElementError: function getElementError(message, container) {
    var prettifiedDOM = (0, _prettyDom.prettyDOM)(container);
    var error = new Error([message, prettifiedDOM.length > 0 ? "Ignored nodes: comments, <script />, <style />\n" + (0, _prettyDom.prettyDOM)(container) : null].filter(Boolean).join('\n\n'));
    error.name = 'TestingLibraryElementError';
    return error;
  },
  _disableExpensiveErrorDiagnostics: false,
  computedStyleSupportsPseudoElements: false
};

function runWithExpensiveErrorDiagnosticsDisabled(callback) {
  try {
    config._disableExpensiveErrorDiagnostics = true;
    return callback();
  } finally {
    config._disableExpensiveErrorDiagnostics = false;
  }
}

function configure(newConfig) {
  if (typeof newConfig === 'function') {
    newConfig = newConfig(config);
  }

  config = (0, _extends2.default)({}, config, newConfig);
}

function getConfig() {
  return config;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInJ1bldpdGhFeHBlbnNpdmVFcnJvckRpYWdub3N0aWNzRGlzYWJsZWQiLCJjb25maWd1cmUiLCJnZXRDb25maWciLCJfcHJldHR5RG9tIiwicmVxdWlyZSIsImNvbmZpZyIsInRlc3RJZEF0dHJpYnV0ZSIsImFzeW5jVXRpbFRpbWVvdXQiLCJhc3luY1dyYXBwZXIiLCJjYiIsImV2ZW50V3JhcHBlciIsImRlZmF1bHRIaWRkZW4iLCJzaG93T3JpZ2luYWxTdGFja1RyYWNlIiwidGhyb3dTdWdnZXN0aW9ucyIsImdldEVsZW1lbnRFcnJvciIsIm1lc3NhZ2UiLCJjb250YWluZXIiLCJwcmV0dGlmaWVkRE9NIiwicHJldHR5RE9NIiwiZXJyb3IiLCJFcnJvciIsImxlbmd0aCIsImZpbHRlciIsIkJvb2xlYW4iLCJqb2luIiwibmFtZSIsIl9kaXNhYmxlRXhwZW5zaXZlRXJyb3JEaWFnbm9zdGljcyIsImNvbXB1dGVkU3R5bGVTdXBwb3J0c1BzZXVkb0VsZW1lbnRzIiwiY2FsbGJhY2siLCJuZXdDb25maWciXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFFQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsRUFBQUEsS0FBSyxFQUFFO0FBRG9DLENBQTdDO0FBR0FELE9BQU8sQ0FBQ0Usd0NBQVIsR0FBbURBLHdDQUFuRDtBQUNBRixPQUFPLENBQUNHLFNBQVIsR0FBb0JBLFNBQXBCO0FBQ0FILE9BQU8sQ0FBQ0ksU0FBUixHQUFvQkEsU0FBcEI7O0FBRUEsSUFBSUMsVUFBVSxHQUFHQyxPQUFPLGdCQUF4Qjs7QUFLQSxJQUFJQyxNQUFNLEdBQUc7QUFDWEMsRUFBQUEsZUFBZSxFQUFFLGFBRE47QUFFWEMsRUFBQUEsZ0JBQWdCLEVBQUUsSUFGUDtBQVVYQyxFQUFBQSxZQUFZLEVBQUUsc0JBQUFDLEVBQUU7QUFBQSxXQUFJQSxFQUFFLEVBQU47QUFBQSxHQVZMO0FBV1hDLEVBQUFBLFlBQVksRUFBRSxzQkFBQUQsRUFBRTtBQUFBLFdBQUlBLEVBQUUsRUFBTjtBQUFBLEdBWEw7QUFhWEUsRUFBQUEsYUFBYSxFQUFFLEtBYko7QUFlWEMsRUFBQUEsc0JBQXNCLEVBQUUsS0FmYjtBQWlCWEMsRUFBQUEsZ0JBQWdCLEVBQUUsS0FqQlA7QUFvQlhDLEVBQUFBLGVBcEJXLDJCQW9CS0MsT0FwQkwsRUFvQmNDLFNBcEJkLEVBb0J5QjtBQUNsQyxRQUFNQyxhQUFhLEdBQUcsQ0FBQyxHQUFHZCxVQUFVLENBQUNlLFNBQWYsRUFBMEJGLFNBQTFCLENBQXRCO0FBQ0EsUUFBTUcsS0FBSyxHQUFHLElBQUlDLEtBQUosQ0FBVSxDQUFDTCxPQUFELEVBQVVFLGFBQWEsQ0FBQ0ksTUFBZCxHQUF1QixDQUF2Qix3REFBOEUsQ0FBQyxHQUFHbEIsVUFBVSxDQUFDZSxTQUFmLEVBQTBCRixTQUExQixDQUE5RSxHQUF1SCxJQUFqSSxFQUF1SU0sTUFBdkksQ0FBOElDLE9BQTlJLEVBQXVKQyxJQUF2SixDQUE0SixNQUE1SixDQUFWLENBQWQ7QUFDQUwsSUFBQUEsS0FBSyxDQUFDTSxJQUFOLEdBQWEsNEJBQWI7QUFDQSxXQUFPTixLQUFQO0FBQ0QsR0F6QlU7QUEyQlhPLEVBQUFBLGlDQUFpQyxFQUFFLEtBM0J4QjtBQTRCWEMsRUFBQUEsbUNBQW1DLEVBQUU7QUE1QjFCLENBQWI7O0FBK0JBLFNBQVMzQix3Q0FBVCxDQUFrRDRCLFFBQWxELEVBQTREO0FBQzFELE1BQUk7QUFDRnZCLElBQUFBLE1BQU0sQ0FBQ3FCLGlDQUFQLEdBQTJDLElBQTNDO0FBQ0EsV0FBT0UsUUFBUSxFQUFmO0FBQ0QsR0FIRCxTQUdVO0FBQ1J2QixJQUFBQSxNQUFNLENBQUNxQixpQ0FBUCxHQUEyQyxLQUEzQztBQUNEO0FBQ0Y7O0FBRUQsU0FBU3pCLFNBQVQsQ0FBbUI0QixTQUFuQixFQUE4QjtBQUM1QixNQUFJLE9BQU9BLFNBQVAsS0FBcUIsVUFBekIsRUFBcUM7QUFHbkNBLElBQUFBLFNBQVMsR0FBR0EsU0FBUyxDQUFDeEIsTUFBRCxDQUFyQjtBQUNEOztBQUdEQSxFQUFBQSxNQUFNLDhCQUFRQSxNQUFSLEVBQ0R3QixTQURDLENBQU47QUFHRDs7QUFFRCxTQUFTM0IsU0FBVCxHQUFxQjtBQUNuQixTQUFPRyxNQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMucnVuV2l0aEV4cGVuc2l2ZUVycm9yRGlhZ25vc3RpY3NEaXNhYmxlZCA9IHJ1bldpdGhFeHBlbnNpdmVFcnJvckRpYWdub3N0aWNzRGlzYWJsZWQ7XG5leHBvcnRzLmNvbmZpZ3VyZSA9IGNvbmZpZ3VyZTtcbmV4cG9ydHMuZ2V0Q29uZmlnID0gZ2V0Q29uZmlnO1xuXG52YXIgX3ByZXR0eURvbSA9IHJlcXVpcmUoXCIuL3ByZXR0eS1kb21cIik7XG5cbi8vIEl0IHdvdWxkIGJlIGNsZWFuZXIgZm9yIHRoaXMgdG8gbGl2ZSBpbnNpZGUgJy4vcXVlcmllcycsIGJ1dFxuLy8gb3RoZXIgcGFydHMgb2YgdGhlIGNvZGUgYXNzdW1lIHRoYXQgYWxsIGV4cG9ydHMgZnJvbVxuLy8gJy4vcXVlcmllcycgYXJlIHF1ZXJ5IGZ1bmN0aW9ucy5cbmxldCBjb25maWcgPSB7XG4gIHRlc3RJZEF0dHJpYnV0ZTogJ2RhdGEtdGVzdGlkJyxcbiAgYXN5bmNVdGlsVGltZW91dDogMTAwMCxcbiAgLy8gdGhpcyBpcyB0byBzdXBwb3J0IFJlYWN0J3MgYXN5bmMgYGFjdGAgZnVuY3Rpb24uXG4gIC8vIGZvcmNpbmcgcmVhY3QtdGVzdGluZy1saWJyYXJ5IHRvIHdyYXAgYWxsIGFzeW5jIGZ1bmN0aW9ucyB3b3VsZCd2ZSBiZWVuXG4gIC8vIGEgdG90YWwgbmlnaHRtYXJlIChjb25zaWRlciB3cmFwcGluZyBldmVyeSBmaW5kQnkqIHF1ZXJ5IGFuZCB0aGVuIGFsc29cbiAgLy8gdXBkYXRpbmcgYHdpdGhpbmAgc28gdGhvc2Ugd291bGQgYmUgd3JhcHBlZCB0b28uIFRvdGFsIG5pZ2h0bWFyZSkuXG4gIC8vIHNvIHdlIGhhdmUgdGhpcyBjb25maWcgb3B0aW9uIHRoYXQncyByZWFsbHkgb25seSBpbnRlbmRlZCBmb3JcbiAgLy8gcmVhY3QtdGVzdGluZy1saWJyYXJ5IHRvIHVzZS4gRm9yIHRoYXQgcmVhc29uLCB0aGlzIGZlYXR1cmUgd2lsbCByZW1haW5cbiAgLy8gdW5kb2N1bWVudGVkLlxuICBhc3luY1dyYXBwZXI6IGNiID0+IGNiKCksXG4gIGV2ZW50V3JhcHBlcjogY2IgPT4gY2IoKSxcbiAgLy8gZGVmYXVsdCB2YWx1ZSBmb3IgdGhlIGBoaWRkZW5gIG9wdGlvbiBpbiBgQnlSb2xlYCBxdWVyaWVzXG4gIGRlZmF1bHRIaWRkZW46IGZhbHNlLFxuICAvLyBzaG93T3JpZ2luYWxTdGFja1RyYWNlIGZsYWcgdG8gc2hvdyB0aGUgZnVsbCBlcnJvciBzdGFjayB0cmFjZXMgZm9yIGFzeW5jIGVycm9yc1xuICBzaG93T3JpZ2luYWxTdGFja1RyYWNlOiBmYWxzZSxcbiAgLy8gdGhyb3cgZXJyb3JzIHcvIHN1Z2dlc3Rpb25zIGZvciBiZXR0ZXIgcXVlcmllcy4gT3B0IGluIHNvIG9mZiBieSBkZWZhdWx0LlxuICB0aHJvd1N1Z2dlc3Rpb25zOiBmYWxzZSxcblxuICAvLyBjYWxsZWQgd2hlbiBnZXRCeSogcXVlcmllcyBmYWlsLiAobWVzc2FnZSwgY29udGFpbmVyKSA9PiBFcnJvclxuICBnZXRFbGVtZW50RXJyb3IobWVzc2FnZSwgY29udGFpbmVyKSB7XG4gICAgY29uc3QgcHJldHRpZmllZERPTSA9ICgwLCBfcHJldHR5RG9tLnByZXR0eURPTSkoY29udGFpbmVyKTtcbiAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihbbWVzc2FnZSwgcHJldHRpZmllZERPTS5sZW5ndGggPiAwID8gYElnbm9yZWQgbm9kZXM6IGNvbW1lbnRzLCA8c2NyaXB0IC8+LCA8c3R5bGUgLz5cXG4keygwLCBfcHJldHR5RG9tLnByZXR0eURPTSkoY29udGFpbmVyKX1gIDogbnVsbF0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcblxcbicpKTtcbiAgICBlcnJvci5uYW1lID0gJ1Rlc3RpbmdMaWJyYXJ5RWxlbWVudEVycm9yJztcbiAgICByZXR1cm4gZXJyb3I7XG4gIH0sXG5cbiAgX2Rpc2FibGVFeHBlbnNpdmVFcnJvckRpYWdub3N0aWNzOiBmYWxzZSxcbiAgY29tcHV0ZWRTdHlsZVN1cHBvcnRzUHNldWRvRWxlbWVudHM6IGZhbHNlXG59O1xuXG5mdW5jdGlvbiBydW5XaXRoRXhwZW5zaXZlRXJyb3JEaWFnbm9zdGljc0Rpc2FibGVkKGNhbGxiYWNrKSB7XG4gIHRyeSB7XG4gICAgY29uZmlnLl9kaXNhYmxlRXhwZW5zaXZlRXJyb3JEaWFnbm9zdGljcyA9IHRydWU7XG4gICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gIH0gZmluYWxseSB7XG4gICAgY29uZmlnLl9kaXNhYmxlRXhwZW5zaXZlRXJyb3JEaWFnbm9zdGljcyA9IGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbmZpZ3VyZShuZXdDb25maWcpIHtcbiAgaWYgKHR5cGVvZiBuZXdDb25maWcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBQYXNzIHRoZSBleGlzdGluZyBjb25maWcgb3V0IHRvIHRoZSBwcm92aWRlZCBmdW5jdGlvblxuICAgIC8vIGFuZCBhY2NlcHQgYSBkZWx0YSBpbiByZXR1cm5cbiAgICBuZXdDb25maWcgPSBuZXdDb25maWcoY29uZmlnKTtcbiAgfSAvLyBNZXJnZSB0aGUgaW5jb21pbmcgY29uZmlnIGRlbHRhXG5cblxuICBjb25maWcgPSB7IC4uLmNvbmZpZyxcbiAgICAuLi5uZXdDb25maWdcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0Q29uZmlnKCkge1xuICByZXR1cm4gY29uZmlnO1xufSJdfQ==
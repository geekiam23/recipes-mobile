{"version":3,"sources":["mergeDeepWith.js"],"names":["_curry3","require","mergeDeepWithKey","mergeDeepWith","fn","lObj","rObj","k","lVal","rVal","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAAgBC,OAAO,sBAAlC;;AAEA,IAAIC,gBAAgB,GAAgBD,OAAO,sBAA3C;;AA+BA,IAAIE,aAAa,GAAgBH,OAAO,CAAC,SAASG,aAAT,CAAuBC,EAAvB,EAA2BC,IAA3B,EAAiCC,IAAjC,EAAuC;AAC9E,SAAOJ,gBAAgB,CAAC,UAAUK,CAAV,EAAaC,IAAb,EAAmBC,IAAnB,EAAyB;AAC/C,WAAOL,EAAE,CAACI,IAAD,EAAOC,IAAP,CAAT;AACD,GAFsB,EAEpBJ,IAFoB,EAEdC,IAFc,CAAvB;AAGD,CAJuC,CAAxC;;AAKAI,MAAM,CAACC,OAAP,GAAiBR,aAAjB","sourcesContent":["var _curry3 = /*#__PURE__*/require('./internal/_curry3');\n\nvar mergeDeepWithKey = /*#__PURE__*/require('./mergeDeepWithKey');\n\n/**\n * Creates a new object with the own properties of the two provided objects.\n * If a key exists in both objects:\n * - and both associated values are also objects then the values will be\n *   recursively merged.\n * - otherwise the provided function is applied to associated values using the\n *   resulting value as the new value associated with the key.\n * If a key only exists in one object, the value will be associated with the key\n * of the resulting object.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Object\n * @sig ((a, a) -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} lObj\n * @param {Object} rObj\n * @return {Object}\n * @see R.mergeWith, R.mergeDeepWithKey\n * @example\n *\n *      R.mergeDeepWith(R.concat,\n *                      { a: true, c: { values: [10, 20] }},\n *                      { b: true, c: { values: [15, 35] }});\n *      //=> { a: true, b: true, c: { values: [10, 20, 15, 35] }}\n */\n\n\nvar mergeDeepWith = /*#__PURE__*/_curry3(function mergeDeepWith(fn, lObj, rObj) {\n  return mergeDeepWithKey(function (k, lVal, rVal) {\n    return fn(lVal, rVal);\n  }, lObj, rObj);\n});\nmodule.exports = mergeDeepWith;"]}
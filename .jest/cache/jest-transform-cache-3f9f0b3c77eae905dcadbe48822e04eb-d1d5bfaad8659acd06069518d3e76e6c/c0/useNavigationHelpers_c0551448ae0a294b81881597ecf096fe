79d51f4eef0531a640a0294695ca3b68
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useNavigationHelpers;

var React = _interopRequireWildcard(require("react"));

var _routers = require("@react-navigation/routers");

var _NavigationContext = _interopRequireDefault(require("./NavigationContext"));

var _UnhandledActionContext = _interopRequireDefault(require("./UnhandledActionContext"));

var _types = require("./types");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

_types.PrivateValueStore;

function useNavigationHelpers(_ref) {
  var onAction = _ref.onAction,
      getState = _ref.getState,
      emitter = _ref.emitter,
      router = _ref.router;
  var onUnhandledAction = React.useContext(_UnhandledActionContext.default);
  var parentNavigationHelpers = React.useContext(_NavigationContext.default);
  return React.useMemo(function () {
    var dispatch = function dispatch(op) {
      var action = typeof op === 'function' ? op(getState()) : op;
      var handled = onAction(action);

      if (!handled) {
        onUnhandledAction === null || onUnhandledAction === void 0 ? void 0 : onUnhandledAction(action);
      }
    };

    var actions = (0, _extends2.default)({}, router.actionCreators, _routers.CommonActions);
    var helpers = Object.keys(actions).reduce(function (acc, name) {
      acc[name] = function () {
        return dispatch(actions[name].apply(actions, arguments));
      };

      return acc;
    }, {});
    return (0, _extends2.default)({}, parentNavigationHelpers, helpers, {
      dispatch: dispatch,
      emit: emitter.emit,
      isFocused: parentNavigationHelpers ? parentNavigationHelpers.isFocused : function () {
        return true;
      },
      canGoBack: function canGoBack() {
        var state = getState();
        return router.getStateForAction(state, _routers.CommonActions.goBack(), {
          routeNames: state.routeNames,
          routeParamList: {},
          routeGetIdList: {}
        }) !== null || (parentNavigationHelpers === null || parentNavigationHelpers === void 0 ? void 0 : parentNavigationHelpers.canGoBack()) || false;
      },
      dangerouslyGetParent: function dangerouslyGetParent() {
        return parentNavigationHelpers;
      },
      dangerouslyGetState: getState
    });
  }, [emitter.emit, getState, onAction, onUnhandledAction, parentNavigationHelpers, router]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZU5hdmlnYXRpb25IZWxwZXJzLnRzeCJdLCJuYW1lcyI6WyJQcml2YXRlVmFsdWVTdG9yZSIsInJvdXRlciIsIm9uVW5oYW5kbGVkQWN0aW9uIiwiUmVhY3QiLCJVbmhhbmRsZWRBY3Rpb25Db250ZXh0IiwicGFyZW50TmF2aWdhdGlvbkhlbHBlcnMiLCJOYXZpZ2F0aW9uQ29udGV4dCIsImRpc3BhdGNoIiwib3AiLCJhY3Rpb24iLCJnZXRTdGF0ZSIsImhhbmRsZWQiLCJvbkFjdGlvbiIsImFjdGlvbnMiLCJDb21tb25BY3Rpb25zIiwiaGVscGVycyIsImFjYyIsImVtaXQiLCJlbWl0dGVyIiwiaXNGb2N1c2VkIiwiY2FuR29CYWNrIiwic3RhdGUiLCJyb3V0ZU5hbWVzIiwicm91dGVQYXJhbUxpc3QiLCJyb3V0ZUdldElkTGlzdCIsImRhbmdlcm91c2x5R2V0UGFyZW50IiwiZGFuZ2Vyb3VzbHlHZXRTdGF0ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxJQUFBLEtBQUEsR0FBQSx1QkFBQSxDQUFBLE9BQUEsQ0FBQSxPQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLFFBQUEsR0FBQSxPQUFBLENBQUEsMkJBQUEsQ0FBQTs7QUFPQSxJQUFBLGtCQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLHVCQUFBLENBQUE7O0FBQ0EsSUFBQSx1QkFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSw0QkFBQSxDQUFBOztBQUVBLElBQUEsTUFBQSxHQUFBLE9BQUEsV0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBSUFBLE1BQUFBLENBQUFBLGlCQUFBQTs7QUFnQmUsU0FBQSxvQkFBQSxPQUtvRDtBQUFBLE1BQWpFLFFBQWlFLFFBQWpFLFFBQWlFO0FBQUEsTUFBakUsUUFBaUUsUUFBakUsUUFBaUU7QUFBQSxNQUFqRSxPQUFpRSxRQUFqRSxPQUFpRTtBQUFBLE1BQWxDQyxNQUFrQyxRQUFsQ0EsTUFBa0M7QUFDakUsTUFBTUMsaUJBQWlCLEdBQUdDLEtBQUssQ0FBTEEsVUFBQUEsQ0FBaUJDLHVCQUFBQSxDQUEzQyxPQUEwQkQsQ0FBMUI7QUFDQSxNQUFNRSx1QkFBdUIsR0FBR0YsS0FBSyxDQUFMQSxVQUFBQSxDQUFpQkcsa0JBQUFBLENBQWpELE9BQWdDSCxDQUFoQztBQUVBLFNBQU8sS0FBSyxDQUFMLE9BQUEsQ0FBYyxZQUFNO0FBQ3pCLFFBQU1JLFFBQVEsR0FBSUMsU0FBWkQsUUFBWUMsQ0FBQUEsRUFBRCxFQUE2QztBQUM1RCxVQUFNQyxNQUFNLEdBQUcsT0FBQSxFQUFBLEtBQUEsVUFBQSxHQUEyQkQsRUFBRSxDQUFDRSxRQUE5QixFQUE2QixDQUE3QixHQUFmLEVBQUE7QUFFQSxVQUFNQyxPQUFPLEdBQUdDLFFBQVEsQ0FBeEIsTUFBd0IsQ0FBeEI7O0FBRUEsVUFBSSxDQUFKLE9BQUEsRUFBYztBQUNaVixRQUFBQSxpQkFBaUIsS0FBakJBLElBQUFBLElBQUFBLGlCQUFpQixLQUFBLEtBQWpCQSxDQUFBQSxHQUFBQSxLQUFBQSxDQUFBQSxHQUFBQSxpQkFBaUIsQ0FBakJBLE1BQWlCLENBQWpCQTtBQUNEO0FBUEgsS0FBQTs7QUFVQSxRQUFNVyxPQUFPLDhCQUNSWixNQUFNLENBREssY0FBSCxFQUVSYSxRQUFBQSxDQUFBQSxhQUZRLENBQWI7QUFLQSxRQUFNQyxPQUFPLEdBQUcsTUFBTSxDQUFOLElBQUEsQ0FBQSxPQUFBLEVBQUEsTUFBQSxDQUNkLFVBQUEsR0FBQSxFQUFBLElBQUEsRUFBZTtBQUViQyxNQUFBQSxHQUFHLENBQUhBLElBQUcsQ0FBSEEsR0FBWTtBQUFBLGVBQWtCVCxRQUFRLENBQUNNLE9BQU8sQ0FBOUNHLElBQThDLENBQVBILE9BQUFBLE9BQU8sWUFBUixDQUExQjtBQUFBLE9BQVpHOztBQUNBLGFBQUEsR0FBQTtBQUpZLEtBQUEsRUFBaEIsRUFBZ0IsQ0FBaEI7QUFTQSxzQ0FBTyx1QkFBUCxFQUFPLE9BQVA7QUFHRVQsTUFBQUEsUUFISyxFQUdMQSxRQUhGO0FBSUVVLE1BQUFBLElBQUksRUFBRUMsT0FBTyxDQUpSLElBQVA7QUFLRUMsTUFBQUEsU0FBUyxFQUFFZCx1QkFBdUIsR0FDOUJBLHVCQUF1QixDQURPLFNBQUEsR0FFOUI7QUFBQSxlQVBDLElBT0Q7QUFBQSxPQVBOO0FBUUVlLE1BQUFBLFNBQVMsRUFBRSxxQkFBTTtBQUNmLFlBQU1DLEtBQUssR0FBR1gsUUFBZCxFQUFBO0FBRUEsZUFDRSxNQUFNLENBQU4saUJBQUEsQ0FBQSxLQUFBLEVBQWdDSSxRQUFBQSxDQUFBQSxhQUFBQSxDQUFoQyxNQUFnQ0EsRUFBaEMsRUFBa0U7QUFDaEVRLFVBQUFBLFVBQVUsRUFBRUQsS0FBSyxDQUQrQyxVQUFBO0FBRWhFRSxVQUFBQSxjQUFjLEVBRmtELEVBQUE7QUFHaEVDLFVBQUFBLGNBQWMsRUFBRTtBQUhnRCxTQUFsRSxNQUFBLElBQUEsS0FLQW5CLHVCQUxBLEtBQUEsSUFLQUEsSUFBQUEsdUJBTEEsS0FBQSxLQUFBLENBS0FBLEdBTEEsS0FBQSxDQUtBQSxHQUFBQSx1QkFBdUIsQ0FMdkIsU0FLQUEsRUFMQSxLQURGLEtBQUE7QUFYRyxPQUFQO0FBcUJFb0IsTUFBQUEsb0JBQW9CLEVBQUU7QUFBQSxlQXJCakIsdUJBcUJpQjtBQUFBLE9BckJ4QjtBQXNCRUMsTUFBQUEsbUJBQW1CLEVBQUVoQjtBQXRCdkI7QUF6QkssR0FBQSxFQW1ESixDQUNEUSxPQUFPLENBRE4sSUFBQSxFQUFBLFFBQUEsRUFBQSxRQUFBLEVBQUEsaUJBQUEsRUFBQSx1QkFBQSxFQW5ESCxNQW1ERyxDQW5ESSxDQUFQO0FBMkREIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgQ29tbW9uQWN0aW9ucyxcbiAgTmF2aWdhdGlvbkFjdGlvbixcbiAgTmF2aWdhdGlvblN0YXRlLFxuICBQYXJhbUxpc3RCYXNlLFxuICBSb3V0ZXIsXG59IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL3JvdXRlcnMnO1xuaW1wb3J0IE5hdmlnYXRpb25Db250ZXh0IGZyb20gJy4vTmF2aWdhdGlvbkNvbnRleHQnO1xuaW1wb3J0IFVuaGFuZGxlZEFjdGlvbkNvbnRleHQgZnJvbSAnLi9VbmhhbmRsZWRBY3Rpb25Db250ZXh0JztcbmltcG9ydCB0eXBlIHsgTmF2aWdhdGlvbkV2ZW50RW1pdHRlciB9IGZyb20gJy4vdXNlRXZlbnRFbWl0dGVyJztcbmltcG9ydCB7IE5hdmlnYXRpb25IZWxwZXJzLCBOYXZpZ2F0aW9uUHJvcCwgUHJpdmF0ZVZhbHVlU3RvcmUgfSBmcm9tICcuL3R5cGVzJztcblxuLy8gVGhpcyBpcyB0byBtYWtlIFR5cGVTY3JpcHQgY29tcGlsZXIgaGFwcHlcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBiYWJlbC9uby11bnVzZWQtZXhwcmVzc2lvbnNcblByaXZhdGVWYWx1ZVN0b3JlO1xuXG50eXBlIE9wdGlvbnM8U3RhdGUgZXh0ZW5kcyBOYXZpZ2F0aW9uU3RhdGUsIEFjdGlvbiBleHRlbmRzIE5hdmlnYXRpb25BY3Rpb24+ID0ge1xuICBvbkFjdGlvbjogKFxuICAgIGFjdGlvbjogTmF2aWdhdGlvbkFjdGlvbixcbiAgICB2aXNpdGVkTmF2aWdhdG9ycz86IFNldDxzdHJpbmc+XG4gICkgPT4gYm9vbGVhbjtcbiAgZ2V0U3RhdGU6ICgpID0+IFN0YXRlO1xuICBlbWl0dGVyOiBOYXZpZ2F0aW9uRXZlbnRFbWl0dGVyPGFueT47XG4gIHJvdXRlcjogUm91dGVyPFN0YXRlLCBBY3Rpb24+O1xufTtcblxuLyoqXG4gKiBOYXZpZ2F0aW9uIG9iamVjdCB3aXRoIGhlbHBlciBtZXRob2RzIHRvIGJlIHVzZWQgYnkgYSBuYXZpZ2F0b3IuXG4gKiBUaGlzIG9iamVjdCBpbmNsdWRlcyBtZXRob2RzIGZvciBjb21tb24gYWN0aW9ucyBhcyB3ZWxsIGFzIG1ldGhvZHMgdGhlIHBhcmVudCBzY3JlZW4ncyBuYXZpZ2F0aW9uIG9iamVjdC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlTmF2aWdhdGlvbkhlbHBlcnM8XG4gIFN0YXRlIGV4dGVuZHMgTmF2aWdhdGlvblN0YXRlLFxuICBBY3Rpb25IZWxwZXJzIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgKCkgPT4gdm9pZD4sXG4gIEFjdGlvbiBleHRlbmRzIE5hdmlnYXRpb25BY3Rpb24sXG4gIEV2ZW50TWFwIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgYW55PlxuPih7IG9uQWN0aW9uLCBnZXRTdGF0ZSwgZW1pdHRlciwgcm91dGVyIH06IE9wdGlvbnM8U3RhdGUsIEFjdGlvbj4pIHtcbiAgY29uc3Qgb25VbmhhbmRsZWRBY3Rpb24gPSBSZWFjdC51c2VDb250ZXh0KFVuaGFuZGxlZEFjdGlvbkNvbnRleHQpO1xuICBjb25zdCBwYXJlbnROYXZpZ2F0aW9uSGVscGVycyA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuXG4gIHJldHVybiBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICBjb25zdCBkaXNwYXRjaCA9IChvcDogQWN0aW9uIHwgKChzdGF0ZTogU3RhdGUpID0+IEFjdGlvbikpID0+IHtcbiAgICAgIGNvbnN0IGFjdGlvbiA9IHR5cGVvZiBvcCA9PT0gJ2Z1bmN0aW9uJyA/IG9wKGdldFN0YXRlKCkpIDogb3A7XG5cbiAgICAgIGNvbnN0IGhhbmRsZWQgPSBvbkFjdGlvbihhY3Rpb24pO1xuXG4gICAgICBpZiAoIWhhbmRsZWQpIHtcbiAgICAgICAgb25VbmhhbmRsZWRBY3Rpb24/LihhY3Rpb24pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBhY3Rpb25zID0ge1xuICAgICAgLi4ucm91dGVyLmFjdGlvbkNyZWF0b3JzLFxuICAgICAgLi4uQ29tbW9uQWN0aW9ucyxcbiAgICB9O1xuXG4gICAgY29uc3QgaGVscGVycyA9IE9iamVjdC5rZXlzKGFjdGlvbnMpLnJlZHVjZTxSZWNvcmQ8c3RyaW5nLCAoKSA9PiB2b2lkPj4oXG4gICAgICAoYWNjLCBuYW1lKSA9PiB7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IG5hbWUgaXMgYSB2YWxpZCBrZXksIGJ1dCBUeXBlU2NyaXB0IGlzIGR1bWJcbiAgICAgICAgYWNjW25hbWVdID0gKC4uLmFyZ3M6IGFueSkgPT4gZGlzcGF0Y2goYWN0aW9uc1tuYW1lXSguLi5hcmdzKSk7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9LFxuICAgICAge31cbiAgICApO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnBhcmVudE5hdmlnYXRpb25IZWxwZXJzLFxuICAgICAgLi4uaGVscGVycyxcbiAgICAgIGRpc3BhdGNoLFxuICAgICAgZW1pdDogZW1pdHRlci5lbWl0LFxuICAgICAgaXNGb2N1c2VkOiBwYXJlbnROYXZpZ2F0aW9uSGVscGVyc1xuICAgICAgICA/IHBhcmVudE5hdmlnYXRpb25IZWxwZXJzLmlzRm9jdXNlZFxuICAgICAgICA6ICgpID0+IHRydWUsXG4gICAgICBjYW5Hb0JhY2s6ICgpID0+IHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSBnZXRTdGF0ZSgpO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgcm91dGVyLmdldFN0YXRlRm9yQWN0aW9uKHN0YXRlLCBDb21tb25BY3Rpb25zLmdvQmFjaygpIGFzIEFjdGlvbiwge1xuICAgICAgICAgICAgcm91dGVOYW1lczogc3RhdGUucm91dGVOYW1lcyxcbiAgICAgICAgICAgIHJvdXRlUGFyYW1MaXN0OiB7fSxcbiAgICAgICAgICAgIHJvdXRlR2V0SWRMaXN0OiB7fSxcbiAgICAgICAgICB9KSAhPT0gbnVsbCB8fFxuICAgICAgICAgIHBhcmVudE5hdmlnYXRpb25IZWxwZXJzPy5jYW5Hb0JhY2soKSB8fFxuICAgICAgICAgIGZhbHNlXG4gICAgICAgICk7XG4gICAgICB9LFxuICAgICAgZGFuZ2Vyb3VzbHlHZXRQYXJlbnQ6ICgpID0+IHBhcmVudE5hdmlnYXRpb25IZWxwZXJzIGFzIGFueSxcbiAgICAgIGRhbmdlcm91c2x5R2V0U3RhdGU6IGdldFN0YXRlLFxuICAgIH0gYXMgTmF2aWdhdGlvbkhlbHBlcnM8UGFyYW1MaXN0QmFzZSwgRXZlbnRNYXA+ICZcbiAgICAgIChOYXZpZ2F0aW9uUHJvcDxQYXJhbUxpc3RCYXNlLCBzdHJpbmcsIGFueSwgYW55LCBhbnk+IHwgdW5kZWZpbmVkKSAmXG4gICAgICBBY3Rpb25IZWxwZXJzO1xuICB9LCBbXG4gICAgZW1pdHRlci5lbWl0LFxuICAgIGdldFN0YXRlLFxuICAgIG9uQWN0aW9uLFxuICAgIG9uVW5oYW5kbGVkQWN0aW9uLFxuICAgIHBhcmVudE5hdmlnYXRpb25IZWxwZXJzLFxuICAgIHJvdXRlcixcbiAgXSk7XG59XG4iXX0=
b2d0fae106f5f1c344f1a76dbe87b8d3
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = void 0;

var _diffSequences = _interopRequireDefault(require('diff-sequences'));

var _cleanupSemantic = require("./cleanupSemantic");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var diffStrings = function diffStrings(a, b) {
  var isCommon = function isCommon(aIndex, bIndex) {
    return a[aIndex] === b[bIndex];
  };

  var aIndex = 0;
  var bIndex = 0;
  var diffs = [];

  var foundSubsequence = function foundSubsequence(nCommon, aCommon, bCommon) {
    if (aIndex !== aCommon) {
      diffs.push(new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_DELETE, a.slice(aIndex, aCommon)));
    }

    if (bIndex !== bCommon) {
      diffs.push(new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_INSERT, b.slice(bIndex, bCommon)));
    }

    aIndex = aCommon + nCommon;
    bIndex = bCommon + nCommon;
    diffs.push(new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_EQUAL, b.slice(bCommon, bIndex)));
  };

  (0, _diffSequences.default)(a.length, b.length, isCommon, foundSubsequence);

  if (aIndex !== a.length) {
    diffs.push(new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_DELETE, a.slice(aIndex)));
  }

  if (bIndex !== b.length) {
    diffs.push(new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_INSERT, b.slice(bIndex)));
  }

  return diffs;
};

var _default = diffStrings;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRpZmZTdHJpbmdzLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9kaWZmU2VxdWVuY2VzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfY2xlYW51cFNlbWFudGljIiwib2JqIiwiX19lc01vZHVsZSIsImRpZmZTdHJpbmdzIiwiYSIsImIiLCJpc0NvbW1vbiIsImFJbmRleCIsImJJbmRleCIsImRpZmZzIiwiZm91bmRTdWJzZXF1ZW5jZSIsIm5Db21tb24iLCJhQ29tbW9uIiwiYkNvbW1vbiIsInB1c2giLCJEaWZmIiwiRElGRl9ERUxFVEUiLCJzbGljZSIsIkRJRkZfSU5TRVJUIiwiRElGRl9FUVVBTCIsImxlbmd0aCIsIl9kZWZhdWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsRUFBQUEsS0FBSyxFQUFFO0FBRG9DLENBQTdDO0FBR0FELE9BQU8sQ0FBQ0UsT0FBUixHQUFrQixLQUFLLENBQXZCOztBQUVBLElBQUlDLGNBQWMsR0FBR0Msc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxnQkFBRCxDQUFSLENBQTNDOztBQUVBLElBQUlDLGdCQUFnQixHQUFHRCxPQUFPLHFCQUE5Qjs7QUFFQSxTQUFTRCxzQkFBVCxDQUFnQ0csR0FBaEMsRUFBcUM7QUFDbkMsU0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQVgsR0FBd0JELEdBQXhCLEdBQThCO0FBQUNMLElBQUFBLE9BQU8sRUFBRUs7QUFBVixHQUFyQztBQUNEOztBQVFELElBQU1FLFdBQVcsR0FBRyxTQUFkQSxXQUFjLENBQUNDLENBQUQsRUFBSUMsQ0FBSixFQUFVO0FBQzVCLE1BQU1DLFFBQVEsR0FBRyxTQUFYQSxRQUFXLENBQUNDLE1BQUQsRUFBU0MsTUFBVDtBQUFBLFdBQW9CSixDQUFDLENBQUNHLE1BQUQsQ0FBRCxLQUFjRixDQUFDLENBQUNHLE1BQUQsQ0FBbkM7QUFBQSxHQUFqQjs7QUFFQSxNQUFJRCxNQUFNLEdBQUcsQ0FBYjtBQUNBLE1BQUlDLE1BQU0sR0FBRyxDQUFiO0FBQ0EsTUFBTUMsS0FBSyxHQUFHLEVBQWQ7O0FBRUEsTUFBTUMsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFtQixDQUFDQyxPQUFELEVBQVVDLE9BQVYsRUFBbUJDLE9BQW5CLEVBQStCO0FBQ3RELFFBQUlOLE1BQU0sS0FBS0ssT0FBZixFQUF3QjtBQUN0QkgsTUFBQUEsS0FBSyxDQUFDSyxJQUFOLENBQ0UsSUFBSWQsZ0JBQWdCLENBQUNlLElBQXJCLENBQ0VmLGdCQUFnQixDQUFDZ0IsV0FEbkIsRUFFRVosQ0FBQyxDQUFDYSxLQUFGLENBQVFWLE1BQVIsRUFBZ0JLLE9BQWhCLENBRkYsQ0FERjtBQU1EOztBQUVELFFBQUlKLE1BQU0sS0FBS0ssT0FBZixFQUF3QjtBQUN0QkosTUFBQUEsS0FBSyxDQUFDSyxJQUFOLENBQ0UsSUFBSWQsZ0JBQWdCLENBQUNlLElBQXJCLENBQ0VmLGdCQUFnQixDQUFDa0IsV0FEbkIsRUFFRWIsQ0FBQyxDQUFDWSxLQUFGLENBQVFULE1BQVIsRUFBZ0JLLE9BQWhCLENBRkYsQ0FERjtBQU1EOztBQUVETixJQUFBQSxNQUFNLEdBQUdLLE9BQU8sR0FBR0QsT0FBbkI7QUFFQUgsSUFBQUEsTUFBTSxHQUFHSyxPQUFPLEdBQUdGLE9BQW5CO0FBRUFGLElBQUFBLEtBQUssQ0FBQ0ssSUFBTixDQUNFLElBQUlkLGdCQUFnQixDQUFDZSxJQUFyQixDQUNFZixnQkFBZ0IsQ0FBQ21CLFVBRG5CLEVBRUVkLENBQUMsQ0FBQ1ksS0FBRixDQUFRSixPQUFSLEVBQWlCTCxNQUFqQixDQUZGLENBREY7QUFNRCxHQTdCRDs7QUErQkEsR0FBQyxHQUFHWCxjQUFjLENBQUNELE9BQW5CLEVBQTRCUSxDQUFDLENBQUNnQixNQUE5QixFQUFzQ2YsQ0FBQyxDQUFDZSxNQUF4QyxFQUFnRGQsUUFBaEQsRUFBMERJLGdCQUExRDs7QUFFQSxNQUFJSCxNQUFNLEtBQUtILENBQUMsQ0FBQ2dCLE1BQWpCLEVBQXlCO0FBQ3ZCWCxJQUFBQSxLQUFLLENBQUNLLElBQU4sQ0FDRSxJQUFJZCxnQkFBZ0IsQ0FBQ2UsSUFBckIsQ0FBMEJmLGdCQUFnQixDQUFDZ0IsV0FBM0MsRUFBd0RaLENBQUMsQ0FBQ2EsS0FBRixDQUFRVixNQUFSLENBQXhELENBREY7QUFHRDs7QUFFRCxNQUFJQyxNQUFNLEtBQUtILENBQUMsQ0FBQ2UsTUFBakIsRUFBeUI7QUFDdkJYLElBQUFBLEtBQUssQ0FBQ0ssSUFBTixDQUNFLElBQUlkLGdCQUFnQixDQUFDZSxJQUFyQixDQUEwQmYsZ0JBQWdCLENBQUNrQixXQUEzQyxFQUF3RGIsQ0FBQyxDQUFDWSxLQUFGLENBQVFULE1BQVIsQ0FBeEQsQ0FERjtBQUdEOztBQUVELFNBQU9DLEtBQVA7QUFDRCxDQXJERDs7QUF1REEsSUFBSVksUUFBUSxHQUFHbEIsV0FBZjtBQUNBVCxPQUFPLENBQUNFLE9BQVIsR0FBa0J5QixRQUFsQiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZGlmZlNlcXVlbmNlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgnZGlmZi1zZXF1ZW5jZXMnKSk7XG5cbnZhciBfY2xlYW51cFNlbWFudGljID0gcmVxdWlyZSgnLi9jbGVhbnVwU2VtYW50aWMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtkZWZhdWx0OiBvYmp9O1xufVxuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5jb25zdCBkaWZmU3RyaW5ncyA9IChhLCBiKSA9PiB7XG4gIGNvbnN0IGlzQ29tbW9uID0gKGFJbmRleCwgYkluZGV4KSA9PiBhW2FJbmRleF0gPT09IGJbYkluZGV4XTtcblxuICBsZXQgYUluZGV4ID0gMDtcbiAgbGV0IGJJbmRleCA9IDA7XG4gIGNvbnN0IGRpZmZzID0gW107XG5cbiAgY29uc3QgZm91bmRTdWJzZXF1ZW5jZSA9IChuQ29tbW9uLCBhQ29tbW9uLCBiQ29tbW9uKSA9PiB7XG4gICAgaWYgKGFJbmRleCAhPT0gYUNvbW1vbikge1xuICAgICAgZGlmZnMucHVzaChcbiAgICAgICAgbmV3IF9jbGVhbnVwU2VtYW50aWMuRGlmZihcbiAgICAgICAgICBfY2xlYW51cFNlbWFudGljLkRJRkZfREVMRVRFLFxuICAgICAgICAgIGEuc2xpY2UoYUluZGV4LCBhQ29tbW9uKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChiSW5kZXggIT09IGJDb21tb24pIHtcbiAgICAgIGRpZmZzLnB1c2goXG4gICAgICAgIG5ldyBfY2xlYW51cFNlbWFudGljLkRpZmYoXG4gICAgICAgICAgX2NsZWFudXBTZW1hbnRpYy5ESUZGX0lOU0VSVCxcbiAgICAgICAgICBiLnNsaWNlKGJJbmRleCwgYkNvbW1vbilcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBhSW5kZXggPSBhQ29tbW9uICsgbkNvbW1vbjsgLy8gbnVtYmVyIG9mIGNoYXJhY3RlcnMgY29tcGFyZWQgaW4gYVxuXG4gICAgYkluZGV4ID0gYkNvbW1vbiArIG5Db21tb247IC8vIG51bWJlciBvZiBjaGFyYWN0ZXJzIGNvbXBhcmVkIGluIGJcblxuICAgIGRpZmZzLnB1c2goXG4gICAgICBuZXcgX2NsZWFudXBTZW1hbnRpYy5EaWZmKFxuICAgICAgICBfY2xlYW51cFNlbWFudGljLkRJRkZfRVFVQUwsXG4gICAgICAgIGIuc2xpY2UoYkNvbW1vbiwgYkluZGV4KVxuICAgICAgKVxuICAgICk7XG4gIH07XG5cbiAgKDAsIF9kaWZmU2VxdWVuY2VzLmRlZmF1bHQpKGEubGVuZ3RoLCBiLmxlbmd0aCwgaXNDb21tb24sIGZvdW5kU3Vic2VxdWVuY2UpOyAvLyBBZnRlciB0aGUgbGFzdCBjb21tb24gc3Vic2VxdWVuY2UsIHB1c2ggcmVtYWluaW5nIGNoYW5nZSBpdGVtcy5cblxuICBpZiAoYUluZGV4ICE9PSBhLmxlbmd0aCkge1xuICAgIGRpZmZzLnB1c2goXG4gICAgICBuZXcgX2NsZWFudXBTZW1hbnRpYy5EaWZmKF9jbGVhbnVwU2VtYW50aWMuRElGRl9ERUxFVEUsIGEuc2xpY2UoYUluZGV4KSlcbiAgICApO1xuICB9XG5cbiAgaWYgKGJJbmRleCAhPT0gYi5sZW5ndGgpIHtcbiAgICBkaWZmcy5wdXNoKFxuICAgICAgbmV3IF9jbGVhbnVwU2VtYW50aWMuRGlmZihfY2xlYW51cFNlbWFudGljLkRJRkZfSU5TRVJULCBiLnNsaWNlKGJJbmRleCkpXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBkaWZmcztcbn07XG5cbnZhciBfZGVmYXVsdCA9IGRpZmZTdHJpbmdzO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG4iXX0=
{"version":3,"sources":["construct.js"],"names":["_curry1","require","constructN","construct","Fn","length","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAAgBC,OAAO,sBAAlC;;AAEA,IAAIC,UAAU,GAAgBD,OAAO,gBAArC;;AAoCA,IAAIE,SAAS,GAAgBH,OAAO,CAAC,SAASG,SAAT,CAAmBC,EAAnB,EAAuB;AAC1D,SAAOF,UAAU,CAACE,EAAE,CAACC,MAAJ,EAAYD,EAAZ,CAAjB;AACD,CAFmC,CAApC;;AAGAE,MAAM,CAACC,OAAP,GAAiBJ,SAAjB","sourcesContent":["var _curry1 = /*#__PURE__*/require('./internal/_curry1');\n\nvar constructN = /*#__PURE__*/require('./constructN');\n\n/**\n * Wraps a constructor function inside a curried function that can be called\n * with the same arguments and returns the same type.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (* -> {*}) -> (* -> {*})\n * @param {Function} fn The constructor function to wrap.\n * @return {Function} A wrapped, curried constructor function.\n * @see R.invoker\n * @example\n *\n *      // Constructor function\n *      function Animal(kind) {\n *        this.kind = kind;\n *      };\n *      Animal.prototype.sighting = function() {\n *        return \"It's a \" + this.kind + \"!\";\n *      }\n *\n *      const AnimalConstructor = R.construct(Animal)\n *\n *      // Notice we no longer need the 'new' keyword:\n *      AnimalConstructor('Pig'); //=> {\"kind\": \"Pig\", \"sighting\": function (){...}};\n *\n *      const animalTypes = [\"Lion\", \"Tiger\", \"Bear\"];\n *      const animalSighting = R.invoker(0, 'sighting');\n *      const sightNewAnimal = R.compose(animalSighting, AnimalConstructor);\n *      R.map(sightNewAnimal, animalTypes); //=> [\"It's a Lion!\", \"It's a Tiger!\", \"It's a Bear!\"]\n */\n\n\nvar construct = /*#__PURE__*/_curry1(function construct(Fn) {\n  return constructN(Fn.length, Fn);\n});\nmodule.exports = construct;"]}
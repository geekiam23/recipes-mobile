{"version":3,"sources":["unionWith.js"],"names":["_concat","require","_curry3","uniqWith","unionWith","pred","list1","list2","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAAgBC,OAAO,sBAAlC;;AAEA,IAAIC,OAAO,GAAgBD,OAAO,sBAAlC;;AAEA,IAAIE,QAAQ,GAAgBF,OAAO,cAAnC;;AA0BA,IAAIG,SAAS,GAAgBF,OAAO,CAAC,SAASE,SAAT,CAAmBC,IAAnB,EAAyBC,KAAzB,EAAgCC,KAAhC,EAAuC;AAC1E,SAAOJ,QAAQ,CAACE,IAAD,EAAOL,OAAO,CAACM,KAAD,EAAQC,KAAR,CAAd,CAAf;AACD,CAFmC,CAApC;;AAGAC,MAAM,CAACC,OAAP,GAAiBL,SAAjB","sourcesContent":["var _concat = /*#__PURE__*/require('./internal/_concat');\n\nvar _curry3 = /*#__PURE__*/require('./internal/_curry3');\n\nvar uniqWith = /*#__PURE__*/require('./uniqWith');\n\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of the elements\n * of each list. Duplication is determined according to the value returned by\n * applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [*] -> [*] -> [*]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The first and second lists concatenated, with\n *         duplicates removed.\n * @see R.union\n * @example\n *\n *      const l1 = [{a: 1}, {a: 2}];\n *      const l2 = [{a: 1}, {a: 4}];\n *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]\n */\n\n\nvar unionWith = /*#__PURE__*/_curry3(function unionWith(pred, list1, list2) {\n  return uniqWith(pred, _concat(list1, list2));\n});\nmodule.exports = unionWith;"]}
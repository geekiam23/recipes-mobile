dc631bee71b8a770f8a0665720d5a80b
'use strict';

var $ = require("../internals/export");

var fails = require("../internals/fails");

var isArray = require("../internals/is-array");

var isObject = require("../internals/is-object");

var toObject = require("../internals/to-object");

var toLength = require("../internals/to-length");

var createProperty = require("../internals/create-property");

var arraySpeciesCreate = require("../internals/array-species-create");

var arrayMethodHasSpeciesSupport = require("../internals/array-method-has-species-support");

var wellKnownSymbol = require("../internals/well-known-symbol");

var V8_VERSION = require("../internals/engine-v8-version");

var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';
var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function () {
  var array = [];
  array[IS_CONCAT_SPREADABLE] = false;
  return array.concat()[0] !== array;
});
var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

var isConcatSpreadable = function isConcatSpreadable(O) {
  if (!isObject(O)) return false;
  var spreadable = O[IS_CONCAT_SPREADABLE];
  return spreadable !== undefined ? !!spreadable : isArray(O);
};

var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;
$({
  target: 'Array',
  proto: true,
  forced: FORCED
}, {
  concat: function concat(arg) {
    var O = toObject(this);
    var A = arraySpeciesCreate(O, 0);
    var n = 0;
    var i, k, length, len, E;

    for (i = -1, length = arguments.length; i < length; i++) {
      E = i === -1 ? O : arguments[i];

      if (isConcatSpreadable(E)) {
        len = toLength(E.length);
        if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);

        for (k = 0; k < len; k++, n++) {
          if (k in E) createProperty(A, n, E[k]);
        }
      } else {
        if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
        createProperty(A, n++, E);
      }
    }

    A.length = n;
    return A;
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVzLmFycmF5LmNvbmNhdC5qcyJdLCJuYW1lcyI6WyIkIiwicmVxdWlyZSIsImZhaWxzIiwiaXNBcnJheSIsImlzT2JqZWN0IiwidG9PYmplY3QiLCJ0b0xlbmd0aCIsImNyZWF0ZVByb3BlcnR5IiwiYXJyYXlTcGVjaWVzQ3JlYXRlIiwiYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCIsIndlbGxLbm93blN5bWJvbCIsIlY4X1ZFUlNJT04iLCJJU19DT05DQVRfU1BSRUFEQUJMRSIsIk1BWF9TQUZFX0lOVEVHRVIiLCJNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQiLCJJU19DT05DQVRfU1BSRUFEQUJMRV9TVVBQT1JUIiwiYXJyYXkiLCJjb25jYXQiLCJTUEVDSUVTX1NVUFBPUlQiLCJpc0NvbmNhdFNwcmVhZGFibGUiLCJPIiwic3ByZWFkYWJsZSIsInVuZGVmaW5lZCIsIkZPUkNFRCIsInRhcmdldCIsInByb3RvIiwiZm9yY2VkIiwiYXJnIiwiQSIsIm4iLCJpIiwiayIsImxlbmd0aCIsImxlbiIsIkUiLCJhcmd1bWVudHMiLCJUeXBlRXJyb3IiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLElBQUlBLENBQUMsR0FBR0MsT0FBTyx1QkFBZjs7QUFDQSxJQUFJQyxLQUFLLEdBQUdELE9BQU8sc0JBQW5COztBQUNBLElBQUlFLE9BQU8sR0FBR0YsT0FBTyx5QkFBckI7O0FBQ0EsSUFBSUcsUUFBUSxHQUFHSCxPQUFPLDBCQUF0Qjs7QUFDQSxJQUFJSSxRQUFRLEdBQUdKLE9BQU8sMEJBQXRCOztBQUNBLElBQUlLLFFBQVEsR0FBR0wsT0FBTywwQkFBdEI7O0FBQ0EsSUFBSU0sY0FBYyxHQUFHTixPQUFPLGdDQUE1Qjs7QUFDQSxJQUFJTyxrQkFBa0IsR0FBR1AsT0FBTyxxQ0FBaEM7O0FBQ0EsSUFBSVEsNEJBQTRCLEdBQUdSLE9BQU8saURBQTFDOztBQUNBLElBQUlTLGVBQWUsR0FBR1QsT0FBTyxrQ0FBN0I7O0FBQ0EsSUFBSVUsVUFBVSxH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RDtBQXBCaUQsQ0FBbkQsQ0FBRCIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG5cbnZhciBJU19DT05DQVRfU1BSRUFEQUJMRSA9IHdlbGxLbm93blN5bWJvbCgnaXNDb25jYXRTcHJlYWRhYmxlJyk7XG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDB4MUZGRkZGRkZGRkZGRkY7XG52YXIgTUFYSU1VTV9BTExPV0VEX0lOREVYX0VYQ0VFREVEID0gJ01heGltdW0gYWxsb3dlZCBpbmRleCBleGNlZWRlZCc7XG5cbi8vIFdlIGNhbid0IHVzZSB0aGlzIGZlYXR1cmUgZGV0ZWN0aW9uIGluIFY4IHNpbmNlIGl0IGNhdXNlc1xuLy8gZGVvcHRpbWl6YXRpb24gYW5kIHNlcmlvdXMgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NzlcbnZhciBJU19DT05DQVRfU1BSRUFEQUJMRV9TVVBQT1JUID0gVjhfVkVSU0lPTiA+PSA1MSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgYXJyYXkgPSBbXTtcbiAgYXJyYXlbSVNfQ09OQ0FUX1NQUkVBREFCTEVdID0gZmFsc2U7XG4gIHJldHVybiBhcnJheS5jb25jYXQoKVswXSAhPT0gYXJyYXk7XG59KTtcblxudmFyIFNQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ2NvbmNhdCcpO1xuXG52YXIgaXNDb25jYXRTcHJlYWRhYmxlID0gZnVuY3Rpb24gKE8pIHtcbiAgaWYgKCFpc09iamVjdChPKSkgcmV0dXJuIGZhbHNlO1xuICB2YXIgc3ByZWFkYWJsZSA9IE9bSVNfQ09OQ0FUX1NQUkVBREFCTEVdO1xuICByZXR1cm4gc3ByZWFkYWJsZSAhPT0gdW5kZWZpbmVkID8gISFzcHJlYWRhYmxlIDogaXNBcnJheShPKTtcbn07XG5cbnZhciBGT1JDRUQgPSAhSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCB8fCAhU1BFQ0lFU19TVVBQT1JUO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmNvbmNhdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5jb25jYXRcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBpc0NvbmNhdFNwcmVhZGFibGUgYW5kIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgY29uY2F0OiBmdW5jdGlvbiBjb25jYXQoYXJnKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICB2YXIgbiA9IDA7XG4gICAgdmFyIGksIGssIGxlbmd0aCwgbGVuLCBFO1xuICAgIGZvciAoaSA9IC0xLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIEUgPSBpID09PSAtMSA/IE8gOiBhcmd1bWVudHNbaV07XG4gICAgICBpZiAoaXNDb25jYXRTcHJlYWRhYmxlKEUpKSB7XG4gICAgICAgIGxlbiA9IHRvTGVuZ3RoKEUubGVuZ3RoKTtcbiAgICAgICAgaWYgKG4gKyBsZW4gPiBNQVhfU0FGRV9JTlRFR0VSKSB0aHJvdyBUeXBlRXJyb3IoTUFYSU1VTV9BTExPV0VEX0lOREVYX0VYQ0VFREVEKTtcbiAgICAgICAgZm9yIChrID0gMDsgayA8IGxlbjsgaysrLCBuKyspIGlmIChrIGluIEUpIGNyZWF0ZVByb3BlcnR5KEEsIG4sIEVba10pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG4gPj0gTUFYX1NBRkVfSU5URUdFUikgdGhyb3cgVHlwZUVycm9yKE1BWElNVU1fQUxMT1dFRF9JTkRFWF9FWENFRURFRCk7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KEEsIG4rKywgRSk7XG4gICAgICB9XG4gICAgfVxuICAgIEEubGVuZ3RoID0gbjtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG4iXX0=
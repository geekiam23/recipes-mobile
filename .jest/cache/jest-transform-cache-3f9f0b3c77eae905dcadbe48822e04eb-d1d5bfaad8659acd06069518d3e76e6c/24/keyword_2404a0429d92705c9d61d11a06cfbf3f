811bb8827b92d4f788fabda62f8f70ba
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isReservedWord = isReservedWord;
exports.isStrictReservedWord = isStrictReservedWord;
exports.isStrictBindOnlyReservedWord = isStrictBindOnlyReservedWord;
exports.isStrictBindReservedWord = isStrictBindReservedWord;
exports.isKeyword = isKeyword;
var reservedWords = {
  keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"],
  strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],
  strictBind: ["eval", "arguments"]
};
var keywords = new Set(reservedWords.keyword);
var reservedWordsStrictSet = new Set(reservedWords.strict);
var reservedWordsStrictBindSet = new Set(reservedWords.strictBind);

function isReservedWord(word, inModule) {
  return inModule && word === "await" || word === "enum";
}

function isStrictReservedWord(word, inModule) {
  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
}

function isStrictBindOnlyReservedWord(word) {
  return reservedWordsStrictBindSet.has(word);
}

function isStrictBindReservedWord(word, inModule) {
  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
}

function isKeyword(word) {
  return keywords.has(word);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImtleXdvcmQuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpc1Jlc2VydmVkV29yZCIsImlzU3RyaWN0UmVzZXJ2ZWRXb3JkIiwiaXNTdHJpY3RCaW5kT25seVJlc2VydmVkV29yZCIsImlzU3RyaWN0QmluZFJlc2VydmVkV29yZCIsImlzS2V5d29yZCIsInJlc2VydmVkV29yZHMiLCJrZXl3b3JkIiwic3RyaWN0Iiwic3RyaWN0QmluZCIsImtleXdvcmRzIiwiU2V0IiwicmVzZXJ2ZWRXb3Jkc1N0cmljdFNldCIsInJlc2VydmVkV29yZHNTdHJpY3RCaW5kU2V0Iiwid29yZCIsImluTW9kdWxlIiwiaGFzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsRUFBQUEsS0FBSyxFQUFFO0FBRG9DLENBQTdDO0FBR0FELE9BQU8sQ0FBQ0UsY0FBUixHQUF5QkEsY0FBekI7QUFDQUYsT0FBTyxDQUFDRyxvQkFBUixHQUErQkEsb0JBQS9CO0FBQ0FILE9BQU8sQ0FBQ0ksNEJBQVIsR0FBdUNBLDRCQUF2QztBQUNBSixPQUFPLENBQUNLLHdCQUFSLEdBQW1DQSx3QkFBbkM7QUFDQUwsT0FBTyxDQUFDTSxTQUFSLEdBQW9CQSxTQUFwQjtBQUNBLElBQU1DLGFBQWEsR0FBRztBQUNwQkMsRUFBQUEsT0FBTyxFQUFFLENBQUMsT0FBRCxFQUFVLE1BQVYsRUFBa0IsT0FBbEIsRUFBMkIsVUFBM0IsRUFBdUMsVUFBdkMsRUFBbUQsU0FBbkQsRUFBOEQsSUFBOUQsRUFBb0UsTUFBcEUsRUFBNEUsU0FBNUUsRUFBdUYsS0FBdkYsRUFBOEYsVUFBOUYsRUFBMEcsSUFBMUcsRUFBZ0gsUUFBaEgsRUFBMEgsUUFBMUgsRUFBb0ksT0FBcEksRUFBNkksS0FBN0ksRUFBb0osS0FBcEosRUFBMkosT0FBM0osRUFBb0ssT0FBcEssRUFBNkssTUFBN0ssRUFBcUwsS0FBckwsRUFBNEwsTUFBNUwsRUFBb00sT0FBcE0sRUFBNk0sT0FBN00sRUFBc04sU0FBdE4sRUFBaU8sUUFBak8sRUFBMk8sUUFBM08sRUFBcVAsTUFBclAsRUFBNlAsTUFBN1AsRUFBcVEsT0FBclEsRUFBOFEsSUFBOVEsRUFBb1IsWUFBcFIsRUFBa1MsUUFBbFMsRUFBNFMsTUFBNVMsRUFBb1QsUUFBcFQsQ0FEVztBQUVwQkMsRUFBQUEsTUFBTSxFQUFFLENBQUMsWUFBRCxFQUFlLFdBQWYsRUFBNEIsS0FBNUIsRUFBbUMsU0FBbkMsRUFBOEMsU0FBOUMsRUFBeUQsV0FBekQsRUFBc0UsUUFBdEUsRUFBZ0YsUUFBaEYsRUFBMEYsT0FBMUYsQ0FGWTtBQUdwQkMsRUFBQUEsVUFBVSxFQUFFLENBQUMsTUFBRCxFQUFTLFdBQVQ7QUFIUSxDQUF0QjtBQUtBLElBQU1DLFFBQVEsR0FBRyxJQUFJQyxHQUFKLENBQVFMLGFBQWEsQ0FBQ0MsT0FBdEIsQ0FBakI7QUFDQSxJQUFNSyxzQkFBc0IsR0FBRyxJQUFJRCxHQUFKLENBQVFMLGFBQWEsQ0FBQ0UsTUFBdEIsQ0FBL0I7QUFDQSxJQUFNSywwQkFBMEIsR0FBRyxJQUFJRixHQUFKLENBQVFMLGFBQWEsQ0FBQ0csVUFBdEIsQ0FBbkM7O0FBRUEsU0FBU1IsY0FBVCxDQUF3QmEsSUFBeEIsRUFBOEJDLFFBQTlCLEVBQXdDO0FBQ3RDLFNBQU9BLFFBQVEsSUFBSUQsSUFBSSxLQUFLLE9BQXJCLElBQWdDQSxJQUFJLEtBQUssTUFBaEQ7QUFDRDs7QUFFRCxTQUFTWixvQkFBVCxDQUE4QlksSUFBOUIsRUFBb0NDLFFBQXBDLEVBQThDO0FBQzVDLFNBQU9kLGNBQWMsQ0FBQ2EsSUFBRCxFQUFPQyxRQUFQLENBQWQsSUFBa0NILHNCQUFzQixDQUFDSSxHQUF2QixDQUEyQkYsSUFBM0IsQ0FBekM7QUFDRDs7QUFFRCxTQUFTWCw0QkFBVCxDQUFzQ1csSUFBdEMsRUFBNEM7QUFDMUMsU0FBT0QsMEJBQTBCLENBQUNHLEdBQTNCLENBQStCRixJQUEvQixDQUFQO0FBQ0Q7O0FBRUQsU0FBU1Ysd0JBQVQsQ0FBa0NVLElBQWxDLEVBQXdDQyxRQUF4QyxFQUFrRDtBQUNoRCxTQUFPYixvQkFBb0IsQ0FBQ1ksSUFBRCxFQUFPQyxRQUFQLENBQXBCLElBQXdDWiw0QkFBNEIsQ0FBQ1csSUFBRCxDQUEzRTtBQUNEOztBQUVELFNBQVNULFNBQVQsQ0FBbUJTLElBQW5CLEVBQXlCO0FBQ3ZCLFNBQU9KLFFBQVEsQ0FBQ00sR0FBVCxDQUFhRixJQUFiLENBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5pc1Jlc2VydmVkV29yZCA9IGlzUmVzZXJ2ZWRXb3JkO1xuZXhwb3J0cy5pc1N0cmljdFJlc2VydmVkV29yZCA9IGlzU3RyaWN0UmVzZXJ2ZWRXb3JkO1xuZXhwb3J0cy5pc1N0cmljdEJpbmRPbmx5UmVzZXJ2ZWRXb3JkID0gaXNTdHJpY3RCaW5kT25seVJlc2VydmVkV29yZDtcbmV4cG9ydHMuaXNTdHJpY3RCaW5kUmVzZXJ2ZWRXb3JkID0gaXNTdHJpY3RCaW5kUmVzZXJ2ZWRXb3JkO1xuZXhwb3J0cy5pc0tleXdvcmQgPSBpc0tleXdvcmQ7XG5jb25zdCByZXNlcnZlZFdvcmRzID0ge1xuICBrZXl3b3JkOiBbXCJicmVha1wiLCBcImNhc2VcIiwgXCJjYXRjaFwiLCBcImNvbnRpbnVlXCIsIFwiZGVidWdnZXJcIiwgXCJkZWZhdWx0XCIsIFwiZG9cIiwgXCJlbHNlXCIsIFwiZmluYWxseVwiLCBcImZvclwiLCBcImZ1bmN0aW9uXCIsIFwiaWZcIiwgXCJyZXR1cm5cIiwgXCJzd2l0Y2hcIiwgXCJ0aHJvd1wiLCBcInRyeVwiLCBcInZhclwiLCBcImNvbnN0XCIsIFwid2hpbGVcIiwgXCJ3aXRoXCIsIFwibmV3XCIsIFwidGhpc1wiLCBcInN1cGVyXCIsIFwiY2xhc3NcIiwgXCJleHRlbmRzXCIsIFwiZXhwb3J0XCIsIFwiaW1wb3J0XCIsIFwibnVsbFwiLCBcInRydWVcIiwgXCJmYWxzZVwiLCBcImluXCIsIFwiaW5zdGFuY2VvZlwiLCBcInR5cGVvZlwiLCBcInZvaWRcIiwgXCJkZWxldGVcIl0sXG4gIHN0cmljdDogW1wiaW1wbGVtZW50c1wiLCBcImludGVyZmFjZVwiLCBcImxldFwiLCBcInBhY2thZ2VcIiwgXCJwcml2YXRlXCIsIFwicHJvdGVjdGVkXCIsIFwicHVibGljXCIsIFwic3RhdGljXCIsIFwieWllbGRcIl0sXG4gIHN0cmljdEJpbmQ6IFtcImV2YWxcIiwgXCJhcmd1bWVudHNcIl1cbn07XG5jb25zdCBrZXl3b3JkcyA9IG5ldyBTZXQocmVzZXJ2ZWRXb3Jkcy5rZXl3b3JkKTtcbmNvbnN0IHJlc2VydmVkV29yZHNTdHJpY3RTZXQgPSBuZXcgU2V0KHJlc2VydmVkV29yZHMuc3RyaWN0KTtcbmNvbnN0IHJlc2VydmVkV29yZHNTdHJpY3RCaW5kU2V0ID0gbmV3IFNldChyZXNlcnZlZFdvcmRzLnN0cmljdEJpbmQpO1xuXG5mdW5jdGlvbiBpc1Jlc2VydmVkV29yZCh3b3JkLCBpbk1vZHVsZSkge1xuICByZXR1cm4gaW5Nb2R1bGUgJiYgd29yZCA9PT0gXCJhd2FpdFwiIHx8IHdvcmQgPT09IFwiZW51bVwiO1xufVxuXG5mdW5jdGlvbiBpc1N0cmljdFJlc2VydmVkV29yZCh3b3JkLCBpbk1vZHVsZSkge1xuICByZXR1cm4gaXNSZXNlcnZlZFdvcmQod29yZCwgaW5Nb2R1bGUpIHx8IHJlc2VydmVkV29yZHNTdHJpY3RTZXQuaGFzKHdvcmQpO1xufVxuXG5mdW5jdGlvbiBpc1N0cmljdEJpbmRPbmx5UmVzZXJ2ZWRXb3JkKHdvcmQpIHtcbiAgcmV0dXJuIHJlc2VydmVkV29yZHNTdHJpY3RCaW5kU2V0Lmhhcyh3b3JkKTtcbn1cblxuZnVuY3Rpb24gaXNTdHJpY3RCaW5kUmVzZXJ2ZWRXb3JkKHdvcmQsIGluTW9kdWxlKSB7XG4gIHJldHVybiBpc1N0cmljdFJlc2VydmVkV29yZCh3b3JkLCBpbk1vZHVsZSkgfHwgaXNTdHJpY3RCaW5kT25seVJlc2VydmVkV29yZCh3b3JkKTtcbn1cblxuZnVuY3Rpb24gaXNLZXl3b3JkKHdvcmQpIHtcbiAgcmV0dXJuIGtleXdvcmRzLmhhcyh3b3JkKTtcbn0iXX0=
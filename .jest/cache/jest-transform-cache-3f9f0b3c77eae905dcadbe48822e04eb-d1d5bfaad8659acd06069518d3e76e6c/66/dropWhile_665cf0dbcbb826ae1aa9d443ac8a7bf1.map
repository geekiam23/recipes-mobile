{"version":3,"sources":["dropWhile.js"],"names":["_curry2","require","_dispatchable","_xdropWhile","slice","dropWhile","pred","xs","idx","len","length","Infinity","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAAgBC,OAAO,sBAAlC;;AAEA,IAAIC,aAAa,GAAgBD,OAAO,4BAAxC;;AAEA,IAAIE,WAAW,GAAgBF,OAAO,0BAAtC;;AAEA,IAAIG,KAAK,GAAgBH,OAAO,WAAhC;;AAgCA,IAAII,SAAS,GAAgBL,OAAO,CAAeE,aAAa,CAAC,CAAC,WAAD,CAAD,EAAgBC,WAAhB,EAA6B,SAASE,SAAT,CAAmBC,IAAnB,EAAyBC,EAAzB,EAA6B;AACxH,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,GAAG,GAAGF,EAAE,CAACG,MAAb;;AACA,SAAOF,GAAG,GAAGC,GAAN,IAAaH,IAAI,CAACC,EAAE,CAACC,GAAD,CAAH,CAAxB,EAAmC;AACjCA,IAAAA,GAAG,IAAI,CAAP;AACD;;AACD,SAAOJ,KAAK,CAACI,GAAD,EAAMG,QAAN,EAAgBJ,EAAhB,CAAZ;AACD,CAP+D,CAA5B,CAApC;;AAQAK,MAAM,CAACC,OAAP,GAAiBR,SAAjB","sourcesContent":["var _curry2 = /*#__PURE__*/require('./internal/_curry2');\n\nvar _dispatchable = /*#__PURE__*/require('./internal/_dispatchable');\n\nvar _xdropWhile = /*#__PURE__*/require('./internal/_xdropWhile');\n\nvar slice = /*#__PURE__*/require('./slice');\n\n/**\n * Returns a new list excluding the leading elements of a given list which\n * satisfy the supplied predicate function. It passes each value to the supplied\n * predicate function, skipping elements while the predicate function returns\n * `true`. The predicate function is applied to one argument: *(value)*.\n *\n * Dispatches to the `dropWhile` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.takeWhile, R.transduce, R.addIndex\n * @example\n *\n *      const lteTwo = x => x <= 2;\n *\n *      R.dropWhile(lteTwo, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]\n *\n *      R.dropWhile(x => x !== 'd' , 'Ramda'); //=> 'da'\n */\n\n\nvar dropWhile = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['dropWhile'], _xdropWhile, function dropWhile(pred, xs) {\n  var idx = 0;\n  var len = xs.length;\n  while (idx < len && pred(xs[idx])) {\n    idx += 1;\n  }\n  return slice(idx, Infinity, xs);\n}));\nmodule.exports = dropWhile;"]}
b27d079cfc37b950de361426feca35c9
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _extends3 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));

var _excluded = ["initialRouteName", "children", "screenOptions"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _native = require("@react-navigation/native");

var _StackView = _interopRequireDefault(require("../views/Stack/StackView"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function StackNavigator(_ref) {
  var initialRouteName = _ref.initialRouteName,
      children = _ref.children,
      screenOptions = _ref.screenOptions,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var defaultOptions = {
    gestureEnabled: _reactNative.Platform.OS === 'ios',
    animationEnabled: _reactNative.Platform.OS !== 'web' && _reactNative.Platform.OS !== 'windows' && _reactNative.Platform.OS !== 'macos'
  };

  var _ref2 = (0, _native.useNavigationBuilder)(_native.StackRouter, {
    initialRouteName: initialRouteName,
    children: children,
    screenOptions: typeof screenOptions === 'function' ? function () {
      return (0, _extends3.default)({}, defaultOptions, screenOptions.apply(void 0, arguments));
    } : (0, _extends3.default)({}, defaultOptions, screenOptions)
  }),
      state = _ref2.state,
      descriptors = _ref2.descriptors,
      navigation = _ref2.navigation;

  React.useEffect(function () {
    var _navigation$addListen;

    return (_navigation$addListen = navigation.addListener) === null || _navigation$addListen === void 0 ? void 0 : _navigation$addListen.call(navigation, 'tabPress', function (e) {
      var isFocused = navigation.isFocused();
      requestAnimationFrame(function () {
        if (state.index > 0 && isFocused && !e.defaultPrevented) {
          navigation.dispatch((0, _extends3.default)({}, _native.StackActions.popToTop(), {
            target: state.key
          }));
        }
      });
    });
  }, [navigation, state.index, state.key]);
  return React.createElement(_StackView.default, _extends({}, rest, {
    state: state,
    descriptors: descriptors,
    navigation: navigation
  }));
}

var _default = (0, _native.createNavigatorFactory)(StackNavigator);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNyZWF0ZVN0YWNrTmF2aWdhdG9yLnRzeCJdLCJuYW1lcyI6WyJyZXN0IiwiZGVmYXVsdE9wdGlvbnMiLCJnZXN0dXJlRW5hYmxlZCIsIlBsYXRmb3JtIiwiYW5pbWF0aW9uRW5hYmxlZCIsIm5hdmlnYXRpb24iLCJTdGFja1JvdXRlciIsImluaXRpYWxSb3V0ZU5hbWUiLCJjaGlsZHJlbiIsInNjcmVlbk9wdGlvbnMiLCJSZWFjdCIsImUiLCJpc0ZvY3VzZWQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzdGF0ZSIsIlN0YWNrQWN0aW9ucyIsInRhcmdldCIsImtleSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBLEtBQUEsR0FBQSx1QkFBQSxDQUFBLE9BQUEsQ0FBQSxPQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLFlBQUEsR0FBQSxPQUFBLENBQUEsY0FBQSxDQUFBOztBQUNBLElBQUEsT0FBQSxHQUFBLE9BQUEsQ0FBQSwwQkFBQSxDQUFBOztBQVlBLElBQUEsVUFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSw0QkFBQSxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFXQSxTQUFBLGNBQUEsT0FLVTtBQUFBLE1BTGMsZ0JBS2QsUUFMYyxnQkFLZDtBQUFBLE1BTGMsUUFLZCxRQUxjLFFBS2Q7QUFBQSxNQUxjLGFBS2QsUUFMYyxhQUtkO0FBQUEsTUFETEEsSUFDSztBQUNSLE1BQU1DLGNBQWMsR0FBRztBQUNyQkMsSUFBQUEsY0FBYyxFQUFFQyxZQUFBQSxDQUFBQSxRQUFBQSxDQUFBQSxFQUFBQSxLQURLLEtBQUE7QUFFckJDLElBQUFBLGdCQUFnQixFQUNkRCxZQUFBQSxDQUFBQSxRQUFBQSxDQUFBQSxFQUFBQSxLQUFBQSxLQUFBQSxJQUNBQSxZQUFBQSxDQUFBQSxRQUFBQSxDQUFBQSxFQUFBQSxLQURBQSxTQUFBQSxJQUVBQSxZQUFBQSxDQUFBQSxRQUFBQSxDQUFBQSxFQUFBQSxLQUFnQjtBQUxHLEdBQXZCOztBQVFBLGNBQTJDLENBQUEsR0FBQSxPQUFBLENBQUEsb0JBQUEsRUFNekNHLE9BQUFBLENBTnlDLFdBQUEsRUFNNUI7QUFDYkMsSUFBQUEsZ0JBRGEsRUFDYkEsZ0JBRGE7QUFFYkMsSUFBQUEsUUFGYSxFQUViQSxRQUZhO0FBR2JDLElBQUFBLGFBQWEsRUFDWCxPQUFBLGFBQUEsS0FBQSxVQUFBLEdBQ0k7QUFBQSx3Q0FBYyxjQUFkLEVBRUtBLGFBQWEsTUFBYkEsbUJBRkw7QUFBQSxLQURKLDhCQUtJLGNBTEosRUFPU0EsYUFQVDtBQUpXLEdBTjRCLENBQTNDO0FBQUEsTUFBTSxLQUFOLFNBQU0sS0FBTjtBQUFBLE1BQU0sV0FBTixTQUFNLFdBQU47QUFBQSxNQUE0QkosVUFBNUIsU0FBNEJBLFVBQTVCOztBQXFCQUssRUFBQUEsS0FBSyxDQUFMQSxTQUFBQSxDQUNFLFlBQUE7QUFBQSxRQUFBLHFCQUFBOztBQUFBLFdBQUEsQ0FBQSxxQkFBQSxHQUNFTCxVQUFVLENBRFosV0FBQSxNQUFBLElBQUEsSUFBQSxxQkFBQSxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUNFQSxxQkFBQUEsQ0FBQUEsSUFBQUEsQ0FBQUEsVUFBQUEsRUFBVSxVQUFWQSxFQUFzQ00sVUFBQUEsQ0FBRCxFQUFPO0FBQzFDLFVBQU1DLFNBQVMsR0FBR1AsVUFBVSxDQURjLFNBQ3hCQSxFQUFsQjtBQUlBUSxNQUFBQSxxQkFBcUIsQ0FBQyxZQUFNO0FBQzFCLFlBQ0VDLEtBQUssQ0FBTEEsS0FBQUEsR0FBQUEsQ0FBQUEsSUFBQUEsU0FBQUEsSUFFQSxDQUFFSCxDQUFELENBSEgsZ0JBQUEsRUFJRTtBQUdBTixVQUFBQSxVQUFVLENBQVZBLFFBQUFBLDRCQUNLVSxPQUFBQSxDQUFBQSxZQUFBQSxDQURlLFFBQ2ZBLEVBRExWO0FBRUVXLFlBQUFBLE1BQU0sRUFBRUYsS0FBSyxDQUFDRztBQUZoQlo7QUFJRDtBQVpIUSxPQUFxQixDQUFyQkE7QUFOSixLQUNFUixDQURGO0FBREZLLEdBQUFBLEVBc0JFLENBQUEsVUFBQSxFQUFhSSxLQUFLLENBQWxCLEtBQUEsRUFBMEJBLEtBQUssQ0F0QmpDSixHQXNCRSxDQXRCRkE7QUF5QkEsU0FDRSxLQUFBLENBQUEsYUFBQSxDQUFDLFVBQUEsQ0FBRCxPQUFBLEVBQUEsUUFBQSxDQUFBLEVBQUEsRUFBQSxJQUFBLEVBQUE7QUFFRSxJQUFBLEtBQUssRUFGUCxLQUFBO0FBR0UsSUFBQSxXQUFXLEVBSGIsV0FBQTtBQUlFLElBQUEsVUFBVSxFQUFFTDtBQUpkLEdBQUEsQ0FBQSxDQURGO0FBUUQ7O2VBRWMsQ0FBQSxHQUFBLE9BQUEsQ0FBQSxzQkFBQSxFQUFBLGNBQUEsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFBsYXRmb3JtIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCB7XG4gIHVzZU5hdmlnYXRpb25CdWlsZGVyLFxuICBjcmVhdGVOYXZpZ2F0b3JGYWN0b3J5LFxuICBEZWZhdWx0TmF2aWdhdG9yT3B0aW9ucyxcbiAgRXZlbnRBcmcsXG4gIFN0YWNrUm91dGVyLFxuICBTdGFja1JvdXRlck9wdGlvbnMsXG4gIFN0YWNrTmF2aWdhdGlvblN0YXRlLFxuICBTdGFja0FjdGlvbnMsXG4gIFBhcmFtTGlzdEJhc2UsXG4gIFN0YWNrQWN0aW9uSGVscGVycyxcbn0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJztcbmltcG9ydCBTdGFja1ZpZXcgZnJvbSAnLi4vdmlld3MvU3RhY2svU3RhY2tWaWV3JztcbmltcG9ydCB0eXBlIHtcbiAgU3RhY2tOYXZpZ2F0aW9uQ29uZmlnLFxuICBTdGFja05hdmlnYXRpb25PcHRpb25zLFxuICBTdGFja05hdmlnYXRpb25FdmVudE1hcCxcbn0gZnJvbSAnLi4vdHlwZXMnO1xuXG50eXBlIFByb3BzID0gRGVmYXVsdE5hdmlnYXRvck9wdGlvbnM8U3RhY2tOYXZpZ2F0aW9uT3B0aW9ucz4gJlxuICBTdGFja1JvdXRlck9wdGlvbnMgJlxuICBTdGFja05hdmlnYXRpb25Db25maWc7XG5cbmZ1bmN0aW9uIFN0YWNrTmF2aWdhdG9yKHtcbiAgaW5pdGlhbFJvdXRlTmFtZSxcbiAgY2hpbGRyZW4sXG4gIHNjcmVlbk9wdGlvbnMsXG4gIC4uLnJlc3Rcbn06IFByb3BzKSB7XG4gIGNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICAgIGdlc3R1cmVFbmFibGVkOiBQbGF0Zm9ybS5PUyA9PT0gJ2lvcycsXG4gICAgYW5pbWF0aW9uRW5hYmxlZDpcbiAgICAgIFBsYXRmb3JtLk9TICE9PSAnd2ViJyAmJlxuICAgICAgUGxhdGZvcm0uT1MgIT09ICd3aW5kb3dzJyAmJlxuICAgICAgUGxhdGZvcm0uT1MgIT09ICdtYWNvcycsXG4gIH07XG5cbiAgY29uc3QgeyBzdGF0ZSwgZGVzY3JpcHRvcnMsIG5hdmlnYXRpb24gfSA9IHVzZU5hdmlnYXRpb25CdWlsZGVyPFxuICAgIFN0YWNrTmF2aWdhdGlvblN0YXRlPFBhcmFtTGlzdEJhc2U+LFxuICAgIFN0YWNrUm91dGVyT3B0aW9ucyxcbiAgICBTdGFja0FjdGlvbkhlbHBlcnM8UGFyYW1MaXN0QmFzZT4sXG4gICAgU3RhY2tOYXZpZ2F0aW9uT3B0aW9ucyxcbiAgICBTdGFja05hdmlnYXRpb25FdmVudE1hcFxuICA+KFN0YWNrUm91dGVyLCB7XG4gICAgaW5pdGlhbFJvdXRlTmFtZSxcbiAgICBjaGlsZHJlbixcbiAgICBzY3JlZW5PcHRpb25zOlxuICAgICAgdHlwZW9mIHNjcmVlbk9wdGlvbnMgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyAoLi4uYXJncykgPT4gKHtcbiAgICAgICAgICAgIC4uLmRlZmF1bHRPcHRpb25zLFxuICAgICAgICAgICAgLi4uc2NyZWVuT3B0aW9ucyguLi5hcmdzKSxcbiAgICAgICAgICB9KVxuICAgICAgICA6IHtcbiAgICAgICAgICAgIC4uLmRlZmF1bHRPcHRpb25zLFxuICAgICAgICAgICAgLi4uc2NyZWVuT3B0aW9ucyxcbiAgICAgICAgICB9LFxuICB9KTtcblxuICBSZWFjdC51c2VFZmZlY3QoXG4gICAgKCkgPT5cbiAgICAgIG5hdmlnYXRpb24uYWRkTGlzdGVuZXI/LigndGFiUHJlc3MnLCAoZSkgPT4ge1xuICAgICAgICBjb25zdCBpc0ZvY3VzZWQgPSBuYXZpZ2F0aW9uLmlzRm9jdXNlZCgpO1xuXG4gICAgICAgIC8vIFJ1biB0aGUgb3BlcmF0aW9uIGluIHRoZSBuZXh0IGZyYW1lIHNvIHdlJ3JlIHN1cmUgYWxsIGxpc3RlbmVycyBoYXZlIGJlZW4gcnVuXG4gICAgICAgIC8vIFRoaXMgaXMgbmVjZXNzYXJ5IHRvIGtub3cgaWYgcHJldmVudERlZmF1bHQoKSBoYXMgYmVlbiBjYWxsZWRcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBzdGF0ZS5pbmRleCA+IDAgJiZcbiAgICAgICAgICAgIGlzRm9jdXNlZCAmJlxuICAgICAgICAgICAgIShlIGFzIEV2ZW50QXJnPCd0YWJQcmVzcycsIHRydWU+KS5kZWZhdWx0UHJldmVudGVkXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICAvLyBXaGVuIHVzZXIgdGFwcyBvbiBhbHJlYWR5IGZvY3VzZWQgdGFiIGFuZCB3ZSdyZSBpbnNpZGUgdGhlIHRhYixcbiAgICAgICAgICAgIC8vIHJlc2V0IHRoZSBzdGFjayB0byByZXBsaWNhdGUgbmF0aXZlIGJlaGF2aW91clxuICAgICAgICAgICAgbmF2aWdhdGlvbi5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgIC4uLlN0YWNrQWN0aW9ucy5wb3BUb1RvcCgpLFxuICAgICAgICAgICAgICB0YXJnZXQ6IHN0YXRlLmtleSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KSxcbiAgICBbbmF2aWdhdGlvbiwgc3RhdGUuaW5kZXgsIHN0YXRlLmtleV1cbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxTdGFja1ZpZXdcbiAgICAgIHsuLi5yZXN0fVxuICAgICAgc3RhdGU9e3N0YXRlfVxuICAgICAgZGVzY3JpcHRvcnM9e2Rlc2NyaXB0b3JzfVxuICAgICAgbmF2aWdhdGlvbj17bmF2aWdhdGlvbn1cbiAgICAvPlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVOYXZpZ2F0b3JGYWN0b3J5PFxuICBTdGFja05hdmlnYXRpb25TdGF0ZTxQYXJhbUxpc3RCYXNlPixcbiAgU3RhY2tOYXZpZ2F0aW9uT3B0aW9ucyxcbiAgU3RhY2tOYXZpZ2F0aW9uRXZlbnRNYXAsXG4gIHR5cGVvZiBTdGFja05hdmlnYXRvclxuPihTdGFja05hdmlnYXRvcik7XG4iXX0=
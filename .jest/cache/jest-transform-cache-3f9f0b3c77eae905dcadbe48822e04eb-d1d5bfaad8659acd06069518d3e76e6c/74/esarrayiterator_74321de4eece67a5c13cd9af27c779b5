981a8c24266790c124062c09e2db9a03
'use strict';

var toIndexedObject = require("../internals/to-indexed-object");

var addToUnscopables = require("../internals/add-to-unscopables");

var Iterators = require("../internals/iterators");

var InternalStateModule = require("../internals/internal-state");

var defineIterator = require("../internals/define-iterator");

var ARRAY_ITERATOR = 'Array Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);
module.exports = defineIterator(Array, 'Array', function (iterated, kind) {
  setInternalState(this, {
    type: ARRAY_ITERATOR,
    target: toIndexedObject(iterated),
    index: 0,
    kind: kind
  });
}, function () {
  var state = getInternalState(this);
  var target = state.target;
  var kind = state.kind;
  var index = state.index++;

  if (!target || index >= target.length) {
    state.target = undefined;
    return {
      value: undefined,
      done: true
    };
  }

  if (kind == 'keys') return {
    value: index,
    done: false
  };
  if (kind == 'values') return {
    value: target[index],
    done: false
  };
  return {
    value: [index, target[index]],
    done: false
  };
}, 'values');
Iterators.Arguments = Iterators.Array;
addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVzLmFycmF5Lml0ZXJhdG9yLmpzIl0sIm5hbWVzIjpbInRvSW5kZXhlZE9iamVjdCIsInJlcXVpcmUiLCJhZGRUb1Vuc2NvcGFibGVzIiwiSXRlcmF0b3JzIiwiSW50ZXJuYWxTdGF0ZU1vZHVsZSIsImRlZmluZUl0ZXJhdG9yIiwiQVJSQVlfSVRFUkFUT1IiLCJzZXRJbnRlcm5hbFN0YXRlIiwic2V0IiwiZ2V0SW50ZXJuYWxTdGF0ZSIsImdldHRlckZvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJBcnJheSIsIml0ZXJhdGVkIiwia2luZCIsInR5cGUiLCJ0YXJnZXQiLCJpbmRleCIsInN0YXRlIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwidmFsdWUiLCJkb25lIiwiQXJndW1lbnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxJQUFJQSxlQUFlLEdBQUdDLE9BQU8sa0NBQTdCOztBQUNBLElBQUlDLGdCQUFnQixHQUFHRCxPQUFPLG1DQUE5Qjs7QUFDQSxJQUFJRSxTQUFTLEdBQUdGLE9BQU8sMEJBQXZCOztBQUNBLElBQUlHLG1CQUFtQixHQUFHSCxPQUFPLCtCQUFqQzs7QUFDQSxJQUFJSSxjQUFjLEdBQUdKLE9BQU8sZ0NBQTVCOztBQUVBLElBQUlLLGNBQWMsR0FBRyxnQkFBckI7QUFDQSxJQUFJQyxnQkFBZ0IsR0FBR0gsbUJBQW1CLENBQUNJLEdBQTNDO0FBQ0EsSUFBSUMsZ0JBQWdCLEdBQUdMLG1CQUFtQixDQUFDTSxTQUFwQixDQUE4QkosY0FBOUIsQ0FBdkI7QUFZQUssTUFBTSxDQUFDQyxPQUFQLEdBQWlCUCxjQUFjLENBQUNRLEtBQUQsRUFBUSxPQUFSLEVBQWlCLFVBQVVDLFFBQVYsRUFBb0JDLElBQXBCLEVBQTBCO0FBQ3hFUixFQUFBQSxnQkFBZ0IsQ0FBQyxJQUFELEVBQU87QUFDckJTLElBQUFBLElBQUksRUFBRVYsY0FEZTtBQUVyQlcsSUFBQUEsTUFBTSxFQUFFakIsZUFBZSxDQUFDYyxRQUFELENBRkY7QUFHckJJLElBQUFBLEtBQUssRUFBRSxDQUhjO0FBSXJCSCxJQUFBQSxJQUFJLEVBQUVBO0FBSmUsR0FBUCxDQUFoQjtBQVFELENBVDhCLEVBUzVCLFlBQVk7QUFDYixNQUFJSSxLQUFLLEdBQUdWLGdCQUFnQixDQUFDLElBQUQsQ0FBNUI7QUFDQSxNQUFJUSxNQUFNLEdBQUdFLEtBQUssQ0FBQ0YsTUFBbkI7QUFDQSxNQUFJRixJQUFJLEdBQUdJLEtBQUssQ0FBQ0osSUFBakI7QUFDQSxNQUFJRyxLQUFLLEdBQUdDLEtBQUssQ0FBQ0QsS0FBTixFQUFaOztBQUNBLE1BQUksQ0FBQ0QsTUFBRCxJQUFXQyxLQUFLLElBQUlELE1BQU0sQ0FBQ0csTUFBL0IsRUFBdUM7QUFDckNELElBQUFBLEtBQUssQ0FBQ0YsTUFBTixHQUFlSSxTQUFmO0FBQ0EsV0FBTztBQUFFQyxNQUFBQSxLQUFLLEVBQUVELFNBQVQ7QUFBb0JFLE1BQUFBLElBQUksRUFBRTtBQUExQixLQUFQO0FBQ0Q7O0FBQ0QsTUFBSVIsSUFBSSxJQUFJLE1BQVosRUFBb0IsT0FBTztBQUFFTyxJQUFBQSxLQUFLLEVBQUVKLEtBQVQ7QUFBZ0JLLElBQUFBLElBQUksRUFBRTtBQUF0QixHQUFQO0FBQ3BCLE1BQUlSLElBQUksSUFBSSxRQUFaLEVBQXNCLE9BQU87QUFBRU8sSUFBQUEsS0FBSyxFQUFFTCxNQUFNLENBQUNDLEtBQUQsQ0FBZjtBQUF3QkssSUFBQUEsSUFBSSxFQUFFO0FBQTlCLEdBQVA7QUFDdEIsU0FBTztBQUFFRCxJQUFBQSxLQUFLLEVBQUUsQ0FBQ0osS0FBRCxFQUFRRCxNQUFNLENBQUNDLEtBQUQsQ0FBZCxDQUFUO0FBQWlDSyxJQUFBQSxJQUFJLEVBQUU7QUFBdkMsR0FBUDtBQUNELENBckI4QixFQXFCNUIsUUFyQjRCLENBQS9CO0FBMEJBcEIsU0FBUyxDQUFDcUIsU0FBVixHQUFzQnJCLFNBQVMsQ0FBQ1UsS0FBaEM7QUFHQVgsZ0JBQWdCLENBQUMsTUFBRCxDQUFoQjtBQUNBQSxnQkFBZ0IsQ0FBQyxRQUFELENBQWhCO0FBQ0FBLGdCQUFnQixDQUFDLFNBQUQsQ0FBaEIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvcicpO1xuXG52YXIgQVJSQVlfSVRFUkFUT1IgPSAnQXJyYXkgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoQVJSQVlfSVRFUkFUT1IpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmVudHJpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZW50cmllc1xuLy8gYEFycmF5LnByb3RvdHlwZS5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmtleXNcbi8vIGBBcnJheS5wcm90b3R5cGUudmFsdWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnZhbHVlc1xuLy8gYEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQGl0ZXJhdG9yXG4vLyBgQ3JlYXRlQXJyYXlJdGVyYXRvcmAgaW50ZXJuYWwgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWNyZWF0ZWFycmF5aXRlcmF0b3Jcbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lSXRlcmF0b3IoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBBUlJBWV9JVEVSQVRPUixcbiAgICB0YXJnZXQ6IHRvSW5kZXhlZE9iamVjdChpdGVyYXRlZCksIC8vIHRhcmdldFxuICAgIGluZGV4OiAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICAgIGtpbmQ6IGtpbmQgICAgICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxuICB9KTtcbi8vIGAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSVhcnJheWl0ZXJhdG9ycHJvdG90eXBlJS5uZXh0XG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gIHZhciB0YXJnZXQgPSBzdGF0ZS50YXJnZXQ7XG4gIHZhciBraW5kID0gc3RhdGUua2luZDtcbiAgdmFyIGluZGV4ID0gc3RhdGUuaW5kZXgrKztcbiAgaWYgKCF0YXJnZXQgfHwgaW5kZXggPj0gdGFyZ2V0Lmxlbmd0aCkge1xuICAgIHN0YXRlLnRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4geyB2YWx1ZTogaW5kZXgsIGRvbmU6IGZhbHNlIH07XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4geyB2YWx1ZTogdGFyZ2V0W2luZGV4XSwgZG9uZTogZmFsc2UgfTtcbiAgcmV0dXJuIHsgdmFsdWU6IFtpbmRleCwgdGFyZ2V0W2luZGV4XV0sIGRvbmU6IGZhbHNlIH07XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1jcmVhdGV1bm1hcHBlZGFyZ3VtZW50c29iamVjdFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1jcmVhdGVtYXBwZWRhcmd1bWVudHNvYmplY3Rcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuIl19
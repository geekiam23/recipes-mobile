{"version":3,"sources":["differenceWith.js"],"names":["_includesWith","require","_curry3","differenceWith","pred","first","second","out","idx","firstLen","length","push","module","exports"],"mappings":"AAAA,IAAIA,aAAa,GAAgBC,OAAO,4BAAxC;;AAEA,IAAIC,OAAO,GAAgBD,OAAO,sBAAlC;;AA0BA,IAAIE,cAAc,GAAgBD,OAAO,CAAC,SAASC,cAAT,CAAwBC,IAAxB,EAA8BC,KAA9B,EAAqCC,MAArC,EAA6C;AACrF,MAAIC,GAAG,GAAG,EAAV;AACA,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,QAAQ,GAAGJ,KAAK,CAACK,MAArB;;AACA,SAAOF,GAAG,GAAGC,QAAb,EAAuB;AACrB,QAAI,CAACT,aAAa,CAACI,IAAD,EAAOC,KAAK,CAACG,GAAD,CAAZ,EAAmBF,MAAnB,CAAd,IAA4C,CAACN,aAAa,CAACI,IAAD,EAAOC,KAAK,CAACG,GAAD,CAAZ,EAAmBD,GAAnB,CAA9D,EAAuF;AACrFA,MAAAA,GAAG,CAACI,IAAJ,CAASN,KAAK,CAACG,GAAD,CAAd;AACD;;AACDA,IAAAA,GAAG,IAAI,CAAP;AACD;;AACD,SAAOD,GAAP;AACD,CAXwC,CAAzC;;AAYAK,MAAM,CAACC,OAAP,GAAiBV,cAAjB","sourcesContent":["var _includesWith = /*#__PURE__*/require('./internal/_includesWith');\n\nvar _curry3 = /*#__PURE__*/require('./internal/_curry3');\n\n/**\n * Finds the set (i.e. no duplicates) of all elements in the first list not\n * contained in the second list. Duplication is determined according to the\n * value returned by applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` that are not in `list2`.\n * @see R.difference, R.symmetricDifference, R.symmetricDifferenceWith\n * @example\n *\n *      const cmp = (x, y) => x.a === y.a;\n *      const l1 = [{a: 1}, {a: 2}, {a: 3}];\n *      const l2 = [{a: 3}, {a: 4}];\n *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]\n */\n\n\nvar differenceWith = /*#__PURE__*/_curry3(function differenceWith(pred, first, second) {\n  var out = [];\n  var idx = 0;\n  var firstLen = first.length;\n  while (idx < firstLen) {\n    if (!_includesWith(pred, first[idx], second) && !_includesWith(pred, first[idx], out)) {\n      out.push(first[idx]);\n    }\n    idx += 1;\n  }\n  return out;\n});\nmodule.exports = differenceWith;"]}
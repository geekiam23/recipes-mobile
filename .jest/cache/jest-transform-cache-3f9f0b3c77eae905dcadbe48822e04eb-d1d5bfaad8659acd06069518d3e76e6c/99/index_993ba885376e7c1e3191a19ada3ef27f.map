{"version":3,"sources":["index.js"],"names":["ansiStyles","require","stdoutColor","stdout","stderrColor","stderr","stringReplaceAll","stringEncaseCRLFWithFirstIndex","isArray","Array","levelMapping","styles","Object","create","applyOptions","object","options","level","Number","isInteger","Error","colorLevel","undefined","ChalkClass","chalkFactory","chalk","template","arguments_","chalkTag","setPrototypeOf","Chalk","prototype","constructor","Instance","styleName","style","get","builder","createBuilder","createStyler","open","close","_styler","_isEmpty","defineProperty","value","entries","visible","usedModels","model","styler","color","bgModel","toUpperCase","slice","bgColor","proto","defineProperties","enumerable","_generator","set","parent","openAll","closeAll","self","raw","applyStyle","length","join","string","indexOf","lfIndex","strings","firstString","parts","i","push","String","replace","supportsColor","module","exports"],"mappings":"AAAA;;;;;;;;;;AACA,IAAMA,UAAU,GAAGC,OAAO,CAAC,aAAD,CAA1B;;AACA,eAAmDA,OAAO,CAAC,gBAAD,CAA1D;AAAA,IAAeC,WAAf,YAAOC,MAAP;AAAA,IAAoCC,WAApC,YAA4BC,MAA5B;;AACA,gBAGIJ,OAAO,UAHX;AAAA,IACCK,gBADD,aACCA,gBADD;AAAA,IAECC,8BAFD,aAECA,8BAFD;;AAKA,IAAOC,OAAP,GAAkBC,KAAlB,CAAOD,OAAP;AAGA,IAAME,YAAY,GAAG,CACpB,MADoB,EAEpB,MAFoB,EAGpB,SAHoB,EAIpB,SAJoB,CAArB;AAOA,IAAMC,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAf;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,MAAD,EAA0B;AAAA,MAAjBC,OAAiB,uEAAP,EAAO;;AAC9C,MAAIA,OAAO,CAACC,KAAR,IAAiB,EAAEC,MAAM,CAACC,SAAP,CAAiBH,OAAO,CAACC,KAAzB,KAAmCD,OAAO,CAACC,KAAR,IAAiB,CAApD,IAAyDD,OAAO,CAACC,KAAR,IAAiB,CAA5E,CAArB,EAAqG;AACpG,UAAM,IAAIG,KAAJ,CAAU,qDAAV,CAAN;AACA;;AAGD,MAAMC,UAAU,GAAGnB,WAAW,GAAGA,WAAW,CAACe,KAAf,GAAuB,CAArD;AACAF,EAAAA,MAAM,CAACE,KAAP,GAAeD,OAAO,CAACC,KAAR,KAAkBK,SAAlB,GAA8BD,UAA9B,GAA2CL,OAAO,CAACC,KAAlE;AACA,CARD;;IAUMM,U,GACL,oBAAYP,OAAZ,EAAqB;AAAA;AAEpB,SAAOQ,YAAY,CAACR,OAAD,CAAnB;AACA,C;;AAGF,IAAMQ,YAAY,GAAG,SAAfA,YAAe,CAAAR,OAAO,EAAI;AAC/B,MAAMS,KAAK,GAAG,EAAd;AACAX,EAAAA,YAAY,CAACW,KAAD,EAAQT,OAAR,CAAZ;;AAEAS,EAAAA,KAAK,CAACC,QAAN,GAAiB;AAAA,sCAAIC,UAAJ;AAAIA,MAAAA,UAAJ;AAAA;;AAAA,WAAmBC,QAAQ,MAAR,UAASH,KAAK,CAACC,QAAf,SAA4BC,UAA5B,EAAnB;AAAA,GAAjB;;AAEAf,EAAAA,MAAM,CAACiB,cAAP,CAAsBJ,KAAtB,EAA6BK,KAAK,CAACC,SAAnC;AACAnB,EAAAA,MAAM,CAACiB,cAAP,CAAsBJ,KAAK,CAACC,QAA5B,EAAsCD,KAAtC;;AAEAA,EAAAA,KAAK,CAACC,QAAN,CAAeM,WAAf,GAA6B,YAAM;AAClC,UAAM,IAAIZ,KAAJ,CAAU,0EAAV,CAAN;AACA,GAFD;;AAIAK,EAAAA,KAAK,CAACC,QAAN,CAAeO,QAAf,GAA0BV,UAA1B;AAEA,SAAOE,KAAK,CAACC,QAAb;AACA,CAhBD;;AAkBA,SAASI,KAAT,CAAed,OAAf,EAAwB;AACvB,SAAOQ,YAAY,CAACR,OAAD,CAAnB;AACA;;2BAEWkB,S,EAAWC,K;AACtBxB,EAAAA,MAAM,CAACuB,SAAD,CAAN,GAAoB;AACnBE,IAAAA,GADmB,iBACb;AACL,UAAMC,OAAO,GAAGC,aAAa,CAAC,IAAD,EAAOC,YAAY,CAACJ,KAAK,CAACK,IAAP,EAAaL,KAAK,CAACM,KAAnB,EAA0B,KAAKC,OAA/B,CAAnB,EAA4D,KAAKC,QAAjE,CAA7B;AACA/B,MAAAA,MAAM,CAACgC,cAAP,CAAsB,IAAtB,EAA4BV,SAA5B,EAAuC;AAACW,QAAAA,KAAK,EAAER;AAAR,OAAvC;AACA,aAAOA,OAAP;AACA;AALkB,GAApB;;;AADD,mCAAiCzB,MAAM,CAACkC,OAAP,CAAe9C,UAAf,CAAjC,qCAA6D;AAAA;;AAAA;;AAAA,MAAjDkC,SAAiD;AAAA,MAAtCC,KAAsC;;AAAA,QAAjDD,SAAiD,EAAtCC,KAAsC;AAQ5D;;AAEDxB,MAAM,CAACoC,OAAP,GAAiB;AAChBX,EAAAA,GADgB,iBACV;AACL,QAAMC,OAAO,GAAGC,aAAa,CAAC,IAAD,EAAO,KAAKI,OAAZ,EAAqB,IAArB,CAA7B;AACA9B,IAAAA,MAAM,CAACgC,cAAP,CAAsB,IAAtB,EAA4B,SAA5B,EAAuC;AAACC,MAAAA,KAAK,EAAER;AAAR,KAAvC;AACA,WAAOA,OAAP;AACA;AALe,CAAjB;AAQA,IAAMW,UAAU,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,SAAf,EAA0B,KAA1B,EAAiC,KAAjC,EAAwC,KAAxC,EAA+C,MAA/C,EAAuD,SAAvD,CAAnB;;6BAEWC,K;AACVtC,EAAAA,MAAM,CAACsC,KAAD,CAAN,GAAgB;AACfb,IAAAA,GADe,iBACT;AACL,UAAOnB,KAAP,GAAgB,IAAhB,CAAOA,KAAP;AACA,aAAO,YAAyB;AAAA;;AAC/B,YAAMiC,MAAM,GAAGX,YAAY,CAAC,yBAAAvC,UAAU,CAACmD,KAAX,CAAiBzC,YAAY,CAACO,KAAD,CAA7B,GAAsCgC,KAAtC,yCAAD,EAA8DjD,UAAU,CAACmD,KAAX,CAAiBV,KAA/E,EAAsF,KAAKC,OAA3F,CAA3B;AACA,eAAOJ,aAAa,CAAC,IAAD,EAAOY,MAAP,EAAe,KAAKP,QAApB,CAApB;AACA,OAHD;AAIA;AAPc,GAAhB;;;AADD,gCAAoBK,UAApB,mCAAgC;AAA3B,MAAMC,KAAK,mBAAX;;AAA2B,SAArBA,KAAqB;AAU/B;;6BAEUA,M;AACV,MAAMG,OAAO,GAAG,OAAOH,MAAK,CAAC,CAAD,CAAL,CAASI,WAAT,EAAP,GAAgCJ,MAAK,CAACK,KAAN,CAAY,CAAZ,CAAhD;;AACA3C,EAAAA,MAAM,CAACyC,OAAD,CAAN,GAAkB;AACjBhB,IAAAA,GADiB,iBACX;AACL,UAAOnB,KAAP,GAAgB,IAAhB,CAAOA,KAAP;AACA,aAAO,YAAyB;AAAA;;AAC/B,YAAMiC,MAAM,GAAGX,YAAY,CAAC,yBAAAvC,UAAU,CAACuD,OAAX,CAAmB7C,YAAY,CAACO,KAAD,CAA/B,GAAwCgC,MAAxC,yCAAD,EAAgEjD,UAAU,CAACuD,OAAX,CAAmBd,KAAnF,EAA0F,KAAKC,OAA/F,CAA3B;AACA,eAAOJ,aAAa,CAAC,IAAD,EAAOY,MAAP,EAAe,KAAKP,QAApB,CAApB;AACA,OAHD;AAIA;AAPgB,GAAlB;;;AAFD,iCAAoBK,UAApB,oCAAgC;AAA3B,MAAMC,MAAK,oBAAX;;AAA2B,SAArBA,MAAqB;AAW/B;;AAED,IAAMO,KAAK,GAAG5C,MAAM,CAAC6C,gBAAP,CAAwB,YAAM,CAAE,CAAhC,6BACV9C,MADU;AAEbM,EAAAA,KAAK,EAAE;AACNyC,IAAAA,UAAU,EAAE,IADN;AAENtB,IAAAA,GAFM,iBAEA;AACL,aAAO,KAAKuB,UAAL,CAAgB1C,KAAvB;AACA,KAJK;AAKN2C,IAAAA,GALM,eAKF3C,KALE,EAKK;AACV,WAAK0C,UAAL,CAAgB1C,KAAhB,GAAwBA,KAAxB;AACA;AAPK;AAFM,GAAd;;AAaA,IAAMsB,YAAY,GAAG,SAAfA,YAAe,CAACC,IAAD,EAAOC,KAAP,EAAcoB,MAAd,EAAyB;AAC7C,MAAIC,OAAJ;AACA,MAAIC,QAAJ;;AACA,MAAIF,MAAM,KAAKvC,SAAf,EAA0B;AACzBwC,IAAAA,OAAO,GAAGtB,IAAV;AACAuB,IAAAA,QAAQ,GAAGtB,KAAX;AACA,GAHD,MAGO;AACNqB,IAAAA,OAAO,GAAGD,MAAM,CAACC,OAAP,GAAiBtB,IAA3B;AACAuB,IAAAA,QAAQ,GAAGtB,KAAK,GAAGoB,MAAM,CAACE,QAA1B;AACA;;AAED,SAAO;AACNvB,IAAAA,IAAI,EAAJA,IADM;AAENC,IAAAA,KAAK,EAALA,KAFM;AAGNqB,IAAAA,OAAO,EAAPA,OAHM;AAINC,IAAAA,QAAQ,EAARA,QAJM;AAKNF,IAAAA,MAAM,EAANA;AALM,GAAP;AAOA,CAlBD;;AAoBA,IAAMvB,aAAa,GAAG,SAAhBA,aAAgB,CAAC0B,IAAD,EAAOtB,OAAP,EAAgBC,QAAhB,EAA6B;AAClD,MAAMN,OAAO,GAAG,SAAVA,OAAU,GAAmB;AAAA,uCAAfV,UAAe;AAAfA,MAAAA,UAAe;AAAA;;AAClC,QAAInB,OAAO,CAACmB,UAAU,CAAC,CAAD,CAAX,CAAP,IAA0BnB,OAAO,CAACmB,UAAU,CAAC,CAAD,CAAV,CAAcsC,GAAf,CAArC,EAA0D;AAEzD,aAAOC,UAAU,CAAC7B,OAAD,EAAUT,QAAQ,MAAR,UAASS,OAAT,SAAqBV,UAArB,EAAV,CAAjB;AACA;;AAID,WAAOuC,UAAU,CAAC7B,OAAD,EAAWV,UAAU,CAACwC,MAAX,KAAsB,CAAvB,GAA6B,KAAKxC,UAAU,CAAC,CAAD,CAA5C,GAAmDA,UAAU,CAACyC,IAAX,CAAgB,GAAhB,CAA7D,CAAjB;AACA,GATD;;AAaAxD,EAAAA,MAAM,CAACiB,cAAP,CAAsBQ,OAAtB,EAA+BmB,KAA/B;AAEAnB,EAAAA,OAAO,CAACsB,UAAR,GAAqBK,IAArB;AACA3B,EAAAA,OAAO,CAACK,OAAR,GAAkBA,OAAlB;AACAL,EAAAA,OAAO,CAACM,QAAR,GAAmBA,QAAnB;AAEA,SAAON,OAAP;AACA,CArBD;;AAuBA,IAAM6B,UAAU,GAAG,SAAbA,UAAa,CAACF,IAAD,EAAOK,MAAP,EAAkB;AACpC,MAAIL,IAAI,CAAC/C,KAAL,IAAc,CAAd,IAAmB,CAACoD,MAAxB,EAAgC;AAC/B,WAAOL,IAAI,CAACrB,QAAL,GAAgB,EAAhB,GAAqB0B,MAA5B;AACA;;AAED,MAAInB,MAAM,GAAGc,IAAI,CAACtB,OAAlB;;AAEA,MAAIQ,MAAM,KAAK5B,SAAf,EAA0B;AACzB,WAAO+C,MAAP;AACA;;AAED,iBAA4BnB,MAA5B;AAAA,MAAOY,OAAP,YAAOA,OAAP;AAAA,MAAgBC,QAAhB,YAAgBA,QAAhB;;AACA,MAAIM,MAAM,CAACC,OAAP,CAAe,MAAf,MAA6B,CAAC,CAAlC,EAAqC;AACpC,WAAOpB,MAAM,KAAK5B,SAAlB,EAA6B;AAI5B+C,MAAAA,MAAM,GAAG/D,gBAAgB,CAAC+D,MAAD,EAASnB,MAAM,CAACT,KAAhB,EAAuBS,MAAM,CAACV,IAA9B,CAAzB;AAEAU,MAAAA,MAAM,GAAGA,MAAM,CAACW,MAAhB;AACA;AACD;;AAKD,MAAMU,OAAO,GAAGF,MAAM,CAACC,OAAP,CAAe,IAAf,CAAhB;;AACA,MAAIC,OAAO,KAAK,CAAC,CAAjB,EAAoB;AACnBF,IAAAA,MAAM,GAAG9D,8BAA8B,CAAC8D,MAAD,EAASN,QAAT,EAAmBD,OAAnB,EAA4BS,OAA5B,CAAvC;AACA;;AAED,SAAOT,OAAO,GAAGO,MAAV,GAAmBN,QAA1B;AACA,CAhCD;;AAkCA,IAAIrC,QAAJ;;AACA,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAACH,KAAD,EAAuB;AAAA,qCAAZ+C,OAAY;AAAZA,IAAAA,OAAY;AAAA;;AACvC,MAAOC,WAAP,GAAsBD,OAAtB;;AAEA,MAAI,CAAChE,OAAO,CAACiE,WAAD,CAAR,IAAyB,CAACjE,OAAO,CAACiE,WAAW,CAACR,GAAb,CAArC,EAAwD;AAGvD,WAAOO,OAAO,CAACJ,IAAR,CAAa,GAAb,CAAP;AACA;;AAED,MAAMzC,UAAU,GAAG6C,OAAO,CAAClB,KAAR,CAAc,CAAd,CAAnB;AACA,MAAMoB,KAAK,GAAG,CAACD,WAAW,CAACR,GAAZ,CAAgB,CAAhB,CAAD,CAAd;;AAEA,OAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,WAAW,CAACN,MAAhC,EAAwCQ,CAAC,EAAzC,EAA6C;AAC5CD,IAAAA,KAAK,CAACE,IAAN,CACCC,MAAM,CAAClD,UAAU,CAACgD,CAAC,GAAG,CAAL,CAAX,CAAN,CAA0BG,OAA1B,CAAkC,SAAlC,EAA6C,MAA7C,CADD,EAECD,MAAM,CAACJ,WAAW,CAACR,GAAZ,CAAgBU,CAAhB,CAAD,CAFP;AAIA;;AAED,MAAIjD,QAAQ,KAAKJ,SAAjB,EAA4B;AAC3BI,IAAAA,QAAQ,GAAGzB,OAAO,eAAlB;AACA;;AAED,SAAOyB,QAAQ,CAACD,KAAD,EAAQiD,KAAK,CAACN,IAAN,CAAW,EAAX,CAAR,CAAf;AACA,CAxBD;;AA0BAxD,MAAM,CAAC6C,gBAAP,CAAwB3B,KAAK,CAACC,SAA9B,EAAyCpB,MAAzC;AAEA,IAAMc,KAAK,GAAGK,KAAK,EAAnB;AACAL,KAAK,CAACsD,aAAN,GAAsB7E,WAAtB;AACAuB,KAAK,CAACpB,MAAN,GAAeyB,KAAK,CAAC;AAACb,EAAAA,KAAK,EAAEb,WAAW,GAAGA,WAAW,CAACa,KAAf,GAAuB;AAA1C,CAAD,CAApB;AACAQ,KAAK,CAACpB,MAAN,CAAa0E,aAAb,GAA6B3E,WAA7B;AAEA4E,MAAM,CAACC,OAAP,GAAiBxD,KAAjB","sourcesContent":["'use strict';\nconst ansiStyles = require('ansi-styles');\nconst {stdout: stdoutColor, stderr: stderrColor} = require('supports-color');\nconst {\n\tstringReplaceAll,\n\tstringEncaseCRLFWithFirstIndex\n} = require('./util');\n\nconst {isArray} = Array;\n\n// `supportsColor.level` â†’ `ansiStyles.color[name]` mapping\nconst levelMapping = [\n\t'ansi',\n\t'ansi',\n\t'ansi256',\n\t'ansi16m'\n];\n\nconst styles = Object.create(null);\n\nconst applyOptions = (object, options = {}) => {\n\tif (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {\n\t\tthrow new Error('The `level` option should be an integer from 0 to 3');\n\t}\n\n\t// Detect level if not set manually\n\tconst colorLevel = stdoutColor ? stdoutColor.level : 0;\n\tobject.level = options.level === undefined ? colorLevel : options.level;\n};\n\nclass ChalkClass {\n\tconstructor(options) {\n\t\t// eslint-disable-next-line no-constructor-return\n\t\treturn chalkFactory(options);\n\t}\n}\n\nconst chalkFactory = options => {\n\tconst chalk = {};\n\tapplyOptions(chalk, options);\n\n\tchalk.template = (...arguments_) => chalkTag(chalk.template, ...arguments_);\n\n\tObject.setPrototypeOf(chalk, Chalk.prototype);\n\tObject.setPrototypeOf(chalk.template, chalk);\n\n\tchalk.template.constructor = () => {\n\t\tthrow new Error('`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.');\n\t};\n\n\tchalk.template.Instance = ChalkClass;\n\n\treturn chalk.template;\n};\n\nfunction Chalk(options) {\n\treturn chalkFactory(options);\n}\n\nfor (const [styleName, style] of Object.entries(ansiStyles)) {\n\tstyles[styleName] = {\n\t\tget() {\n\t\t\tconst builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);\n\t\t\tObject.defineProperty(this, styleName, {value: builder});\n\t\t\treturn builder;\n\t\t}\n\t};\n}\n\nstyles.visible = {\n\tget() {\n\t\tconst builder = createBuilder(this, this._styler, true);\n\t\tObject.defineProperty(this, 'visible', {value: builder});\n\t\treturn builder;\n\t}\n};\n\nconst usedModels = ['rgb', 'hex', 'keyword', 'hsl', 'hsv', 'hwb', 'ansi', 'ansi256'];\n\nfor (const model of usedModels) {\n\tstyles[model] = {\n\t\tget() {\n\t\t\tconst {level} = this;\n\t\t\treturn function (...arguments_) {\n\t\t\t\tconst styler = createStyler(ansiStyles.color[levelMapping[level]][model](...arguments_), ansiStyles.color.close, this._styler);\n\t\t\t\treturn createBuilder(this, styler, this._isEmpty);\n\t\t\t};\n\t\t}\n\t};\n}\n\nfor (const model of usedModels) {\n\tconst bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);\n\tstyles[bgModel] = {\n\t\tget() {\n\t\t\tconst {level} = this;\n\t\t\treturn function (...arguments_) {\n\t\t\t\tconst styler = createStyler(ansiStyles.bgColor[levelMapping[level]][model](...arguments_), ansiStyles.bgColor.close, this._styler);\n\t\t\t\treturn createBuilder(this, styler, this._isEmpty);\n\t\t\t};\n\t\t}\n\t};\n}\n\nconst proto = Object.defineProperties(() => {}, {\n\t...styles,\n\tlevel: {\n\t\tenumerable: true,\n\t\tget() {\n\t\t\treturn this._generator.level;\n\t\t},\n\t\tset(level) {\n\t\t\tthis._generator.level = level;\n\t\t}\n\t}\n});\n\nconst createStyler = (open, close, parent) => {\n\tlet openAll;\n\tlet closeAll;\n\tif (parent === undefined) {\n\t\topenAll = open;\n\t\tcloseAll = close;\n\t} else {\n\t\topenAll = parent.openAll + open;\n\t\tcloseAll = close + parent.closeAll;\n\t}\n\n\treturn {\n\t\topen,\n\t\tclose,\n\t\topenAll,\n\t\tcloseAll,\n\t\tparent\n\t};\n};\n\nconst createBuilder = (self, _styler, _isEmpty) => {\n\tconst builder = (...arguments_) => {\n\t\tif (isArray(arguments_[0]) && isArray(arguments_[0].raw)) {\n\t\t\t// Called as a template literal, for example: chalk.red`2 + 3 = {bold ${2+3}}`\n\t\t\treturn applyStyle(builder, chalkTag(builder, ...arguments_));\n\t\t}\n\n\t\t// Single argument is hot path, implicit coercion is faster than anything\n\t\t// eslint-disable-next-line no-implicit-coercion\n\t\treturn applyStyle(builder, (arguments_.length === 1) ? ('' + arguments_[0]) : arguments_.join(' '));\n\t};\n\n\t// We alter the prototype because we must return a function, but there is\n\t// no way to create a function with a different prototype\n\tObject.setPrototypeOf(builder, proto);\n\n\tbuilder._generator = self;\n\tbuilder._styler = _styler;\n\tbuilder._isEmpty = _isEmpty;\n\n\treturn builder;\n};\n\nconst applyStyle = (self, string) => {\n\tif (self.level <= 0 || !string) {\n\t\treturn self._isEmpty ? '' : string;\n\t}\n\n\tlet styler = self._styler;\n\n\tif (styler === undefined) {\n\t\treturn string;\n\t}\n\n\tconst {openAll, closeAll} = styler;\n\tif (string.indexOf('\\u001B') !== -1) {\n\t\twhile (styler !== undefined) {\n\t\t\t// Replace any instances already present with a re-opening code\n\t\t\t// otherwise only the part of the string until said closing code\n\t\t\t// will be colored, and the rest will simply be 'plain'.\n\t\t\tstring = stringReplaceAll(string, styler.close, styler.open);\n\n\t\t\tstyler = styler.parent;\n\t\t}\n\t}\n\n\t// We can move both next actions out of loop, because remaining actions in loop won't have\n\t// any/visible effect on parts we add here. Close the styling before a linebreak and reopen\n\t// after next line to fix a bleed issue on macOS: https://github.com/chalk/chalk/pull/92\n\tconst lfIndex = string.indexOf('\\n');\n\tif (lfIndex !== -1) {\n\t\tstring = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);\n\t}\n\n\treturn openAll + string + closeAll;\n};\n\nlet template;\nconst chalkTag = (chalk, ...strings) => {\n\tconst [firstString] = strings;\n\n\tif (!isArray(firstString) || !isArray(firstString.raw)) {\n\t\t// If chalk() was called by itself or with a string,\n\t\t// return the string itself as a string.\n\t\treturn strings.join(' ');\n\t}\n\n\tconst arguments_ = strings.slice(1);\n\tconst parts = [firstString.raw[0]];\n\n\tfor (let i = 1; i < firstString.length; i++) {\n\t\tparts.push(\n\t\t\tString(arguments_[i - 1]).replace(/[{}\\\\]/g, '\\\\$&'),\n\t\t\tString(firstString.raw[i])\n\t\t);\n\t}\n\n\tif (template === undefined) {\n\t\ttemplate = require('./templates');\n\t}\n\n\treturn template(chalk, parts.join(''));\n};\n\nObject.defineProperties(Chalk.prototype, styles);\n\nconst chalk = Chalk(); // eslint-disable-line new-cap\nchalk.supportsColor = stdoutColor;\nchalk.stderr = Chalk({level: stderrColor ? stderrColor.level : 0}); // eslint-disable-line new-cap\nchalk.stderr.supportsColor = stderrColor;\n\nmodule.exports = chalk;\n"]}
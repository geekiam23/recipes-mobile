{"version":3,"sources":["index.js"],"names":["Object","defineProperty","exports","value","_pure","require","keys","forEach","key","enumerable","get","_process$env","process","env","RTL_SKIP_AUTO_CLEANUP","afterEach","cleanup","teardown"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;;AAIA,IAAIC,KAAK,GAAGC,OAAO,UAAnB;;AAEAL,MAAM,CAACM,IAAP,CAAYF,KAAZ,EAAmBG,OAAnB,CAA2B,UAAUC,GAAV,EAAe;AACxC,MAAIA,GAAG,KAAK,SAAR,IAAqBA,GAAG,KAAK,YAAjC,EAA+C;AAC/C,MAAIA,GAAG,IAAIN,OAAP,IAAkBA,OAAO,CAACM,GAAD,CAAP,KAAiBJ,KAAK,CAACI,GAAD,CAA5C,EAAmD;AACnDR,EAAAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+BM,GAA/B,EAAoC;AAClCC,IAAAA,UAAU,EAAE,IADsB;AAElCC,IAAAA,GAAG,EAAE,eAAY;AACf,aAAON,KAAK,CAACI,GAAD,CAAZ;AACD;AAJiC,GAApC;AAMD,CATD;;AAWA,IAAIG,YAAJ;;AAOA,IAAI,OAAOC,OAAP,KAAmB,WAAnB,IAAkC,EAAE,CAACD,YAAY,GAAGC,OAAO,CAACC,GAAxB,KAAgC,IAAhC,IAAwCF,YAAY,CAACG,qBAAvD,CAAtC,EAAqH;AAInH,MAAI,OAAOC,SAAP,KAAqB,UAAzB,EAAqC;AACnCA,IAAAA,SAAS,CAAC,YAAM;AACd,OAAC,GAAGX,KAAK,CAACY,OAAV;AACD,KAFQ,CAAT;AAGD,GAJD,MAIO,IAAI,OAAOC,QAAP,KAAoB,UAAxB,EAAoC;AAIzCA,IAAAA,QAAQ,CAAC,YAAM;AACb,OAAC,GAAGb,KAAK,CAACY,OAAV;AACD,KAFO,CAAR;AAGD;AACF","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _pure = require(\"./pure\");\n\nObject.keys(_pure).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _pure[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function () {\n      return _pure[key];\n    }\n  });\n});\n\nvar _process$env;\n\n// if we're running in a test runner that supports afterEach\n// or teardown then we'll automatically run cleanup afterEach test\n// this ensures that tests run in isolation from each other\n// if you don't like this then either import the `pure` module\n// or set the RTL_SKIP_AUTO_CLEANUP env variable to 'true'.\nif (typeof process === \"undefined\" || !((_process$env = process.env) != null && _process$env.RTL_SKIP_AUTO_CLEANUP)) {\n  // ignore teardown() in code coverage because Jest does not support it\n\n  /* istanbul ignore else */\n  if (typeof afterEach === 'function') {\n    afterEach(() => {\n      (0, _pure.cleanup)();\n    });\n  } else if (typeof teardown === 'function') {\n    // Block is guarded by `typeof` check.\n    // eslint does not support `typeof` guards.\n    // eslint-disable-next-line no-undef\n    teardown(() => {\n      (0, _pure.cleanup)();\n    });\n  }\n}"]}
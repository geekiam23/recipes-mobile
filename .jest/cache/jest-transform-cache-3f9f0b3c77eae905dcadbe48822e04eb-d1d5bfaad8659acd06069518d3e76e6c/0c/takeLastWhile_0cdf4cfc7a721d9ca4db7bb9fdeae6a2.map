{"version":3,"sources":["takeLastWhile.js"],"names":["_curry2","require","slice","takeLastWhile","fn","xs","idx","length","Infinity","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAAgBC,OAAO,sBAAlC;;AAEA,IAAIC,KAAK,GAAgBD,OAAO,WAAhC;;AA6BA,IAAIE,aAAa,GAAgBH,OAAO,CAAC,SAASG,aAAT,CAAuBC,EAAvB,EAA2BC,EAA3B,EAA+B;AACtE,MAAIC,GAAG,GAAGD,EAAE,CAACE,MAAH,GAAY,CAAtB;;AACA,SAAOD,GAAG,IAAI,CAAP,IAAYF,EAAE,CAACC,EAAE,CAACC,GAAD,CAAH,CAArB,EAAgC;AAC9BA,IAAAA,GAAG,IAAI,CAAP;AACD;;AACD,SAAOJ,KAAK,CAACI,GAAG,GAAG,CAAP,EAAUE,QAAV,EAAoBH,EAApB,CAAZ;AACD,CANuC,CAAxC;;AAOAI,MAAM,CAACC,OAAP,GAAiBP,aAAjB","sourcesContent":["var _curry2 = /*#__PURE__*/require('./internal/_curry2');\n\nvar slice = /*#__PURE__*/require('./slice');\n\n/**\n * Returns a new list containing the last `n` elements of a given list, passing\n * each value to the supplied predicate function, and terminating when the\n * predicate function returns `false`. Excludes the element that caused the\n * predicate function to fail. The predicate function is passed one argument:\n * *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.dropLastWhile, R.addIndex\n * @example\n *\n *      const isNotOne = x => x !== 1;\n *\n *      R.takeLastWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]\n *\n *      R.takeLastWhile(x => x !== 'R' , 'Ramda'); //=> 'amda'\n */\n\n\nvar takeLastWhile = /*#__PURE__*/_curry2(function takeLastWhile(fn, xs) {\n  var idx = xs.length - 1;\n  while (idx >= 0 && fn(xs[idx])) {\n    idx -= 1;\n  }\n  return slice(idx + 1, Infinity, xs);\n});\nmodule.exports = takeLastWhile;"]}
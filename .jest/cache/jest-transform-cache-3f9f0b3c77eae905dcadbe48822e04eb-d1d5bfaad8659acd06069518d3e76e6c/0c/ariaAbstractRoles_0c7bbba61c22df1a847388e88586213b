810c411aa63da710a1cc2d712d2f1310
"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/map"));

var _commandRole = _interopRequireDefault(require("./abstract/commandRole"));

var _compositeRole = _interopRequireDefault(require("./abstract/compositeRole"));

var _inputRole = _interopRequireDefault(require("./abstract/inputRole"));

var _landmarkRole = _interopRequireDefault(require("./abstract/landmarkRole"));

var _rangeRole = _interopRequireDefault(require("./abstract/rangeRole"));

var _roletypeRole = _interopRequireDefault(require("./abstract/roletypeRole"));

var _sectionRole = _interopRequireDefault(require("./abstract/sectionRole"));

var _sectionheadRole = _interopRequireDefault(require("./abstract/sectionheadRole"));

var _selectRole = _interopRequireDefault(require("./abstract/selectRole"));

var _structureRole = _interopRequireDefault(require("./abstract/structureRole"));

var _widgetRole = _interopRequireDefault(require("./abstract/widgetRole"));

var _windowRole = _interopRequireDefault(require("./abstract/windowRole"));

var ariaAbstractRoles = new _map.default([['command', _commandRole.default], ['composite', _compositeRole.default], ['input', _inputRole.default], ['landmark', _landmarkRole.default], ['range', _rangeRole.default], ['roletype', _roletypeRole.default], ['section', _sectionRole.default], ['sectionhead', _sectionheadRole.default], ['select', _selectRole.default], ['structure', _structureRole.default], ['widget', _widgetRole.default], ['window', _windowRole.default]]);
var _default = ariaAbstractRoles;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFyaWFBYnN0cmFjdFJvbGVzLmpzIl0sIm5hbWVzIjpbIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX09iamVjdCRkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfbWFwIiwiX2NvbW1hbmRSb2xlIiwiX2NvbXBvc2l0ZVJvbGUiLCJfaW5wdXRSb2xlIiwiX2xhbmRtYXJrUm9sZSIsIl9yYW5nZVJvbGUiLCJfcm9sZXR5cGVSb2xlIiwiX3NlY3Rpb25Sb2xlIiwiX3NlY3Rpb25oZWFkUm9sZSIsIl9zZWxlY3RSb2xlIiwiX3N0cnVjdHVyZVJvbGUiLCJfd2lkZ2V0Um9sZSIsIl93aW5kb3dSb2xlIiwiYXJpYUFic3RyYWN0Um9sZXMiLCJfZGVmYXVsdCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsc0JBQXNCLEdBQUdDLE9BQU8sQ0FBQyxzREFBRCxDQUFwQzs7QUFFQSxJQUFJQyxzQkFBc0IsR0FBR0QsT0FBTyxDQUFDLDhEQUFELENBQXBDOztBQUVBQyxzQkFBc0IsQ0FBQ0MsT0FBRCxFQUFVLFlBQVYsRUFBd0I7QUFDNUNDLEVBQUFBLEtBQUssRUFBRTtBQURxQyxDQUF4QixDQUF0Qjs7QUFJQUQsT0FBTyxDQUFDRSxPQUFSLEdBQWtCLEtBQUssQ0FBdkI7O0FBRUEsSUFBSUMsSUFBSSxHQUFHTixzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLDJDQUFELENBQVIsQ0FBakM7O0FBRUEsSUFBSU0sWUFBWSxHQUFHUCxzQkFBc0IsQ0FBQ0MsT0FBTywwQkFBUixDQUF6Qzs7QUFFQSxJQUFJTyxjQUFjLEdBQUdSLHNCQUFzQixDQUFDQyxPQUFPLDRCQUFSLENBQTNDOztBQUVBLElBQUlRLFVBQVUsR0FBR1Qsc0JBQXNCLENBQUNDLE9BQU8sd0JBQVIsQ0FBdkM7O0FBRUEsSUFBSVMsYUFBYSxHQUFHVixzQkFBc0IsQ0FBQ0MsT0FBTywyQkFBUixDQUExQzs7QUFFQSxJQUFJVSxVQUFVLEdBQUdYLHNCQUFzQixDQUFDQyxPQUFPLHdCQUFSLENBQXZDOztBQUVBLElBQUlXLGFBQWEsR0FBR1osc0JBQXNCLENBQUNDLE9BQU8sMkJBQVIsQ0FBMUM7O0FBRUEsSUFBSVksWUFBWSxHQUFHYixzQkFBc0IsQ0FBQ0MsT0FBTywwQkFBUixDQUF6Qzs7QUFFQSxJQUFJYSxnQkFBZ0IsR0FBR2Qsc0JBQXNCLENBQUNDLE9BQU8sOEJBQVIsQ0FBN0M7O0FBRUEsSUFBSWMsV0FBVyxHQUFHZixzQkFBc0IsQ0FBQ0MsT0FBTyx5QkFBUixDQUF4Qzs7QUFFQSxJQUFJZSxjQUFjLEdBQUdoQixzQkFBc0IsQ0FBQ0MsT0FBTyw0QkFBUixDQUEzQzs7QUFFQSxJQUFJZ0IsV0FBVyxHQUFHakIsc0JBQXNCLENBQUNDLE9BQU8seUJBQVIsQ0FBeEM7O0FBRUEsSUFBSWlCLFdBQVcsR0FBR2xCLHNCQUFzQixDQUFDQyxPQUFPLHlCQUFSLENBQXhDOztBQUVBLElBQUlrQixpQkFBaUIsR0FBRyxJQUFJYixJQUFJLENBQUNELE9BQVQsQ0FBaUIsQ0FBQyxDQUFDLFNBQUQsRUFBWUUsWUFBWSxDQUFDRixPQUF6QixDQUFELEVBQW9DLENBQUMsV0FBRCxFQUFjRyxjQUFjLENBQUNILE9BQTdCLENBQXBDLEVBQTJFLENBQUMsT0FBRCxFQUFVSSxVQUFVLENBQUNKLE9BQXJCLENBQTNFLEVBQTBHLENBQUMsVUFBRCxFQUFhSyxhQUFhLENBQUNMLE9BQTNCLENBQTFHLEVBQStJLENBQUMsT0FBRCxFQUFVTSxVQUFVLENBQUNOLE9BQXJCLENBQS9JLEVBQThLLENBQUMsVUFBRCxFQUFhTyxhQUFhLENBQUNQLE9BQTNCLENBQTlLLEVBQW1OLENBQUMsU0FBRCxFQUFZUSxZQUFZLENBQUNSLE9BQXpCLENBQW5OLEVBQXNQLENBQUMsYUFBRCxFQUFnQlMsZ0JBQWdCLENBQUNULE9BQWpDLENBQXRQLEVBQWlTLENBQUMsUUFBRCxFQUFXVSxXQUFXLENBQUNWLE9BQXZCLENBQWpTLEVBQWtVLENBQUMsV0FBRCxFQUFjVyxjQUFjLENBQUNYLE9BQTdCLENBQWxVLEVBQXlXLENBQUMsUUFBRCxFQUFXWSxXQUFXLENBQUNaLE9BQXZCLENBQXpXLEVBQTBZLENBQUMsUUFBRCxFQUFXYSxXQUFXLENBQUNiLE9BQXZCLENBQTFZLENBQWpCLENBQXhCO0FBQ0EsSUFBSWUsUUFBUSxHQUFHRCxpQkFBZjtBQUNBaEIsT0FBTyxDQUFDRSxPQUFSLEdBQWtCZSxRQUFsQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMzL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX09iamVjdCRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMtc3RhYmxlL29iamVjdC9kZWZpbmUtcHJvcGVydHlcIik7XG5cbl9PYmplY3QkZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfbWFwID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9jb3JlLWpzLXN0YWJsZS9tYXBcIikpO1xuXG52YXIgX2NvbW1hbmRSb2xlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9hYnN0cmFjdC9jb21tYW5kUm9sZVwiKSk7XG5cbnZhciBfY29tcG9zaXRlUm9sZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vYWJzdHJhY3QvY29tcG9zaXRlUm9sZVwiKSk7XG5cbnZhciBfaW5wdXRSb2xlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9hYnN0cmFjdC9pbnB1dFJvbGVcIikpO1xuXG52YXIgX2xhbmRtYXJrUm9sZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vYWJzdHJhY3QvbGFuZG1hcmtSb2xlXCIpKTtcblxudmFyIF9yYW5nZVJvbGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2Fic3RyYWN0L3JhbmdlUm9sZVwiKSk7XG5cbnZhciBfcm9sZXR5cGVSb2xlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9hYnN0cmFjdC9yb2xldHlwZVJvbGVcIikpO1xuXG52YXIgX3NlY3Rpb25Sb2xlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9hYnN0cmFjdC9zZWN0aW9uUm9sZVwiKSk7XG5cbnZhciBfc2VjdGlvbmhlYWRSb2xlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9hYnN0cmFjdC9zZWN0aW9uaGVhZFJvbGVcIikpO1xuXG52YXIgX3NlbGVjdFJvbGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2Fic3RyYWN0L3NlbGVjdFJvbGVcIikpO1xuXG52YXIgX3N0cnVjdHVyZVJvbGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2Fic3RyYWN0L3N0cnVjdHVyZVJvbGVcIikpO1xuXG52YXIgX3dpZGdldFJvbGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2Fic3RyYWN0L3dpZGdldFJvbGVcIikpO1xuXG52YXIgX3dpbmRvd1JvbGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2Fic3RyYWN0L3dpbmRvd1JvbGVcIikpO1xuXG52YXIgYXJpYUFic3RyYWN0Um9sZXMgPSBuZXcgX21hcC5kZWZhdWx0KFtbJ2NvbW1hbmQnLCBfY29tbWFuZFJvbGUuZGVmYXVsdF0sIFsnY29tcG9zaXRlJywgX2NvbXBvc2l0ZVJvbGUuZGVmYXVsdF0sIFsnaW5wdXQnLCBfaW5wdXRSb2xlLmRlZmF1bHRdLCBbJ2xhbmRtYXJrJywgX2xhbmRtYXJrUm9sZS5kZWZhdWx0XSwgWydyYW5nZScsIF9yYW5nZVJvbGUuZGVmYXVsdF0sIFsncm9sZXR5cGUnLCBfcm9sZXR5cGVSb2xlLmRlZmF1bHRdLCBbJ3NlY3Rpb24nLCBfc2VjdGlvblJvbGUuZGVmYXVsdF0sIFsnc2VjdGlvbmhlYWQnLCBfc2VjdGlvbmhlYWRSb2xlLmRlZmF1bHRdLCBbJ3NlbGVjdCcsIF9zZWxlY3RSb2xlLmRlZmF1bHRdLCBbJ3N0cnVjdHVyZScsIF9zdHJ1Y3R1cmVSb2xlLmRlZmF1bHRdLCBbJ3dpZGdldCcsIF93aWRnZXRSb2xlLmRlZmF1bHRdLCBbJ3dpbmRvdycsIF93aW5kb3dSb2xlLmRlZmF1bHRdXSk7XG52YXIgX2RlZmF1bHQgPSBhcmlhQWJzdHJhY3RSb2xlcztcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdfQ==
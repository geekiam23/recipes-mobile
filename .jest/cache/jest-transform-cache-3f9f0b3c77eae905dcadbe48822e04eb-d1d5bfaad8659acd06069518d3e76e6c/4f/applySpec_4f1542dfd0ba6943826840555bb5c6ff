61bf3fd9718d5e2383100048214f012e
var _curry1 = require("./internal/_curry1");

var apply = require("./apply");

var curryN = require("./curryN");

var max = require("./max");

var pluck = require("./pluck");

var reduce = require("./reduce");

var keys = require("./keys");

var values = require("./values");

function mapValues(fn, obj) {
  return keys(obj).reduce(function (acc, key) {
    acc[key] = fn(obj[key]);
    return acc;
  }, {});
}

var applySpec = _curry1(function applySpec(spec) {
  spec = mapValues(function (v) {
    return typeof v == 'function' ? v : applySpec(v);
  }, spec);
  return curryN(reduce(max, 0, pluck('length', values(spec))), function () {
    var args = arguments;
    return mapValues(function (f) {
      return apply(f, args);
    }, spec);
  });
});

module.exports = applySpec;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcGx5U3BlYy5qcyJdLCJuYW1lcyI6WyJfY3VycnkxIiwicmVxdWlyZSIsImFwcGx5IiwiY3VycnlOIiwibWF4IiwicGx1Y2siLCJyZWR1Y2UiLCJrZXlzIiwidmFsdWVzIiwibWFwVmFsdWVzIiwiZm4iLCJvYmoiLCJhY2MiLCJrZXkiLCJhcHBseVNwZWMiLCJzcGVjIiwidiIsImFyZ3MiLCJhcmd1bWVudHMiLCJmIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsT0FBTyxHQUFnQkMsT0FBTyxzQkFBbEM7O0FBRUEsSUFBSUMsS0FBSyxHQUFnQkQsT0FBTyxXQUFoQzs7QUFFQSxJQUFJRSxNQUFNLEdBQWdCRixPQUFPLFlBQWpDOztBQUVBLElBQUlHLEdBQUcsR0FBZ0JILE9BQU8sU0FBOUI7O0FBRUEsSUFBSUksS0FBSyxHQUFnQkosT0FBTyxXQUFoQzs7QUFFQSxJQUFJSyxNQUFNLEdBQWdCTCxPQUFPLFlBQWpDOztBQUVBLElBQUlNLElBQUksR0FBZ0JOLE9BQU8sVUFBL0I7O0FBRUEsSUFBSU8sTUFBTSxHQUFnQlAsT0FBTyxZQUFqQzs7QUFNQSxTQUFTUSxTQUFULENBQW1CQyxFQUFuQixFQUF1QkMsR0FBdkIsRUFBNEI7QUFDMUIsU0FBT0osSUFBSSxDQUFDSSxHQUFELENBQUosQ0FBVUwsTUFBVixDQUFpQixVQUFVTSxHQUFWLEVBQWVDLEdBQWYsRUFBb0I7QUFDMUNELElBQUFBLEdBQUcsQ0FBQ0MsR0FBRCxDQUFILEdBQVdILEVBQUUsQ0FBQ0MsR0FBRyxDQUFDRSxHQUFELENBQUosQ0FBYjtBQUNBLFdBQU9ELEdBQVA7QUFDRCxHQUhNLEVBR0osRUFISSxDQUFQO0FBSUQ7O0FBMkJELElBQUlFLFNBQVMsR0FBZ0JkLE9BQU8sQ0FBQyxTQUFTYyxTQUFULENBQW1CQyxJQUFuQixFQUF5QjtBQUM1REEsRUFBQUEsSUFBSSxHQUFHTixTQUFTLENBQUMsVUFBVU8sQ0FBVixFQUFhO0FBQzVCLFdBQU8sT0FBT0EsQ0FBUCxJQUFZLFVBQVosR0FBeUJBLENBQXpCLEdBQTZCRixTQUFTLENBQUNFLENBQUQsQ0FBN0M7QUFDRCxHQUZlLEVBRWJELElBRmEsQ0FBaEI7QUFJQSxTQUFPWixNQUFNLENBQUNHLE1BQU0sQ0FBQ0YsR0FBRCxFQUFNLENBQU4sRUFBU0MsS0FBSyxDQUFDLFFBQUQsRUFBV0csTUFBTSxDQUFDTyxJQUFELENBQWpCLENBQWQsQ0FBUCxFQUFnRCxZQUFZO0FBQ3ZFLFFBQUlFLElBQUksR0FBR0MsU0FBWDtBQUNBLFdBQU9ULFNBQVMsQ0FBQyxVQUFVVSxDQUFWLEVBQWE7QUFDNUIsYUFBT2pCLEtBQUssQ0FBQ2lCLENBQUQsRUFBSUYsSUFBSixDQUFaO0FBQ0QsS0FGZSxFQUViRixJQUZhLENBQWhCO0FBR0QsR0FMWSxDQUFiO0FBTUQsQ0FYbUMsQ0FBcEM7O0FBWUFLLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlAsU0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MSA9IC8qI19fUFVSRV9fKi9yZXF1aXJlKCcuL2ludGVybmFsL19jdXJyeTEnKTtcblxudmFyIGFwcGx5ID0gLyojX19QVVJFX18qL3JlcXVpcmUoJy4vYXBwbHknKTtcblxudmFyIGN1cnJ5TiA9IC8qI19fUFVSRV9fKi9yZXF1aXJlKCcuL2N1cnJ5TicpO1xuXG52YXIgbWF4ID0gLyojX19QVVJFX18qL3JlcXVpcmUoJy4vbWF4Jyk7XG5cbnZhciBwbHVjayA9IC8qI19fUFVSRV9fKi9yZXF1aXJlKCcuL3BsdWNrJyk7XG5cbnZhciByZWR1Y2UgPSAvKiNfX1BVUkVfXyovcmVxdWlyZSgnLi9yZWR1Y2UnKTtcblxudmFyIGtleXMgPSAvKiNfX1BVUkVfXyovcmVxdWlyZSgnLi9rZXlzJyk7XG5cbnZhciB2YWx1ZXMgPSAvKiNfX1BVUkVfXyovcmVxdWlyZSgnLi92YWx1ZXMnKTtcblxuLy8gVXNlIGN1c3RvbSBtYXBWYWx1ZXMgZnVuY3Rpb24gdG8gYXZvaWQgaXNzdWVzIHdpdGggc3BlY3MgdGhhdCBpbmNsdWRlIGEgXCJtYXBcIiBrZXkgYW5kIFIubWFwXG4vLyBkZWxlZ2F0aW5nIGNhbGxzIHRvIC5tYXBcblxuXG5mdW5jdGlvbiBtYXBWYWx1ZXMoZm4sIG9iaikge1xuICByZXR1cm4ga2V5cyhvYmopLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICBhY2Nba2V5XSA9IGZuKG9ialtrZXldKTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59XG5cbi8qKlxuICogR2l2ZW4gYSBzcGVjIG9iamVjdCByZWN1cnNpdmVseSBtYXBwaW5nIHByb3BlcnRpZXMgdG8gZnVuY3Rpb25zLCBjcmVhdGVzIGFcbiAqIGZ1bmN0aW9uIHByb2R1Y2luZyBhbiBvYmplY3Qgb2YgdGhlIHNhbWUgc3RydWN0dXJlLCBieSBtYXBwaW5nIGVhY2ggcHJvcGVydHlcbiAqIHRvIHRoZSByZXN1bHQgb2YgY2FsbGluZyBpdHMgYXNzb2NpYXRlZCBmdW5jdGlvbiB3aXRoIHRoZSBzdXBwbGllZCBhcmd1bWVudHMuXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuMjAuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAc2lnIHtrOiAoKGEsIGIsIC4uLiwgbSkgLT4gdil9IC0+ICgoYSwgYiwgLi4uLCBtKSAtPiB7azogdn0pXG4gKiBAcGFyYW0ge09iamVjdH0gc3BlYyBhbiBvYmplY3QgcmVjdXJzaXZlbHkgbWFwcGluZyBwcm9wZXJ0aWVzIHRvIGZ1bmN0aW9ucyBmb3JcbiAqICAgICAgICBwcm9kdWNpbmcgdGhlIHZhbHVlcyBmb3IgdGhlc2UgcHJvcGVydGllcy5cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBvYmplY3Qgb2YgdGhlIHNhbWUgc3RydWN0dXJlXG4gKiBhcyBgc3BlYycsIHdpdGggZWFjaCBwcm9wZXJ0eSBzZXQgdG8gdGhlIHZhbHVlIHJldHVybmVkIGJ5IGNhbGxpbmcgaXRzXG4gKiBhc3NvY2lhdGVkIGZ1bmN0aW9uIHdpdGggdGhlIHN1cHBsaWVkIGFyZ3VtZW50cy5cbiAqIEBzZWUgUi5jb252ZXJnZSwgUi5qdXh0XG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgY29uc3QgZ2V0TWV0cmljcyA9IFIuYXBwbHlTcGVjKHtcbiAqICAgICAgICBzdW06IFIuYWRkLFxuICogICAgICAgIG5lc3RlZDogeyBtdWw6IFIubXVsdGlwbHkgfVxuICogICAgICB9KTtcbiAqICAgICAgZ2V0TWV0cmljcygyLCA0KTsgLy8gPT4geyBzdW06IDYsIG5lc3RlZDogeyBtdWw6IDggfSB9XG4gKiBAc3ltYiBSLmFwcGx5U3BlYyh7IHg6IGYsIHk6IHsgejogZyB9IH0pKGEsIGIpID0geyB4OiBmKGEsIGIpLCB5OiB7IHo6IGcoYSwgYikgfSB9XG4gKi9cbnZhciBhcHBseVNwZWMgPSAvKiNfX1BVUkVfXyovX2N1cnJ5MShmdW5jdGlvbiBhcHBseVNwZWMoc3BlYykge1xuICBzcGVjID0gbWFwVmFsdWVzKGZ1bmN0aW9uICh2KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2ID09ICdmdW5jdGlvbicgPyB2IDogYXBwbHlTcGVjKHYpO1xuICB9LCBzcGVjKTtcblxuICByZXR1cm4gY3VycnlOKHJlZHVjZShtYXgsIDAsIHBsdWNrKCdsZW5ndGgnLCB2YWx1ZXMoc3BlYykpKSwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgIHJldHVybiBtYXBWYWx1ZXMoZnVuY3Rpb24gKGYpIHtcbiAgICAgIHJldHVybiBhcHBseShmLCBhcmdzKTtcbiAgICB9LCBzcGVjKTtcbiAgfSk7XG59KTtcbm1vZHVsZS5leHBvcnRzID0gYXBwbHlTcGVjOyJdfQ==
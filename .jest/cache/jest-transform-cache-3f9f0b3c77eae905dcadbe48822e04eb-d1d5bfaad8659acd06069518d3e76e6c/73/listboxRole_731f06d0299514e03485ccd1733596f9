2db623f2f0a06fe26373d94f89bf3496
"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;
var listboxRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ['author'],
  prohibitedProps: [],
  props: {
    'aria-errormessage': null,
    'aria-expanded': null,
    'aria-invalid': null,
    'aria-multiselectable': null,
    'aria-readonly': null,
    'aria-required': null,
    'aria-orientation': 'vertical'
  },
  relatedConcepts: [{
    concept: {
      attributes: [{
        constraints: ['>1'],
        name: 'size'
      }, {
        name: 'multiple'
      }],
      name: 'select'
    },
    module: 'HTML'
  }, {
    concept: {
      attributes: [{
        constraints: ['>1'],
        name: 'size'
      }],
      name: 'select'
    },
    module: 'HTML'
  }, {
    concept: {
      attributes: [{
        name: 'multiple'
      }],
      name: 'select'
    },
    module: 'HTML'
  }, {
    concept: {
      name: 'datalist'
    },
    module: 'HTML'
  }, {
    concept: {
      name: 'list'
    },
    module: 'ARIA'
  }, {
    concept: {
      name: 'select'
    },
    module: 'XForms'
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [['option', 'group'], ['option']],
  requiredProps: {},
  superClass: [['roletype', 'widget', 'composite', 'select'], ['roletype', 'structure', 'section', 'group', 'select']]
};
var _default = listboxRole;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpc3Rib3hSb2xlLmpzIl0sIm5hbWVzIjpbIl9PYmplY3QkZGVmaW5lUHJvcGVydHkiLCJyZXF1aXJlIiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsImxpc3Rib3hSb2xlIiwiYWJzdHJhY3QiLCJhY2Nlc3NpYmxlTmFtZVJlcXVpcmVkIiwiYmFzZUNvbmNlcHRzIiwiY2hpbGRyZW5QcmVzZW50YXRpb25hbCIsIm5hbWVGcm9tIiwicHJvaGliaXRlZFByb3BzIiwicHJvcHMiLCJyZWxhdGVkQ29uY2VwdHMiLCJjb25jZXB0IiwiYXR0cmlidXRlcyIsImNvbnN0cmFpbnRzIiwibmFtZSIsIm1vZHVsZSIsInJlcXVpcmVDb250ZXh0Um9sZSIsInJlcXVpcmVkQ29udGV4dFJvbGUiLCJyZXF1aXJlZE93bmVkRWxlbWVudHMiLCJyZXF1aXJlZFByb3BzIiwic3VwZXJDbGFzcyIsIl9kZWZhdWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxzQkFBc0IsR0FBR0MsT0FBTyxDQUFDLDhEQUFELENBQXBDOztBQUVBRCxzQkFBc0IsQ0FBQ0UsT0FBRCxFQUFVLFlBQVYsRUFBd0I7QUFDNUNDLEVBQUFBLEtBQUssRUFBRTtBQURxQyxDQUF4QixDQUF0Qjs7QUFJQUQsT0FBTyxDQUFDRSxPQUFSLEdBQWtCLEtBQUssQ0FBdkI7QUFDQSxJQUFJQyxXQUFXLEdBQUc7QUFDaEJDLEVBQUFBLFFBQVEsRUFBRSxLQURNO0FBRWhCQyxFQUFBQSxzQkFBc0IsRUFBRSxJQUZSO0FBR2hCQyxFQUFBQSxZQUFZLEVBQUUsRUFIRTtBQUloQkMsRUFBQUEsc0JBQXNCLEVBQUUsS0FKUjtBQUtoQkMsRUFBQUEsUUFBUSxFQUFFLENBQUMsUUFBRCxDQUxNO0FBTWhCQyxFQUFBQSxlQUFlLEVBQUUsRUFORDtBQU9oQkMsRUFBQUEsS0FBSyxFQUFFO0FBQ0wseUJBQXFCLElBRGhCO0FBRUwscUJBQWlCLElBRlo7QUFHTCxvQkFBZ0IsSUFIWDtBQUlMLDRCQUF3QixJQUpuQjtBQUtMLHFCQUFpQixJQUxaO0FBTUwscUJBQWlCLElBTlo7QUFPTCx3QkFBb0I7QUFQZixHQVBTO0FBZ0JoQkMsRUFBQUEsZUFBZSxFQUFFLENBQUM7QUFDaEJDLElBQUFBLE9BQU8sRUFBRTtBQUNQQyxNQUFBQSxVQUFVLEVBQUUsQ0FBQztBQUNYQyxRQUFBQSxXQUFXLEVBQUUsQ0FBQyxJQUFELENBREY7QUFFWEMsUUFBQUEsSUFBSSxFQUFFO0FBRkssT0FBRCxFQUdUO0FBQ0RBLFFBQUFBLElBQUksRUFBRTtBQURMLE9BSFMsQ0FETDtBQU9QQSxNQUFBQSxJQUFJLEVBQUU7QUFQQyxLQURPO0FBVWhCQyxJQUFBQSxNQUFNLEVBQUU7QUFWUSxHQUFELEVBV2Q7QUFDREosSUFBQUEsT0FBTyxFQUFFO0FBQ1BDLE1BQUFBLFVBQVUsRUFBRSxDQUFDO0FBQ1hDLFFBQUFBLFdBQVcsRUFBRSxDQUFDLElBQUQsQ0FERjtBQUVYQyxRQUFBQSxJQUFJLEVBQUU7QUFGSyxPQUFELENBREw7QUFLUEEsTUFBQUEsSUFBSSxFQUFFO0FBTEMsS0FEUjtBQVFEQyxJQUFBQSxNQUFNLEVBQUU7QUFSUCxHQVhjLEVBb0JkO0FBQ0RKLElBQUFBLE9BQU8sRUFBRTtBQUNQQyxNQUFBQSxVQUFVLEVBQUUsQ0FBQztBQUNYRSxRQUFBQSxJQUFJLEVBQUU7QUFESyxPQUFELENBREw7QUFJUEEsTUFBQUEsSUFBSSxFQUFFO0FBSkMsS0FEUjtBQU9EQyxJQUFBQSxNQUFNLEVBQUU7QUFQUCxHQXBCYyxFQTRCZDtBQUNESixJQUFBQSxPQUFPLEVBQUU7QUFDUEcsTUFBQUEsSUFBSSxFQUFFO0FBREMsS0FEUjtBQUlEQyxJQUFBQSxNQUFNLEVBQUU7QUFKUCxHQTVCYyxFQWlDZDtBQUNESixJQUFBQSxPQUFPLEVBQUU7QUFDUEcsTUFBQUEsSUFBSSxFQUFFO0FBREMsS0FEUjtBQUlEQyxJQUFBQSxNQUFNLEVBQUU7QUFKUCxHQWpDYyxFQXNDZDtBQUNESixJQUFBQSxPQUFPLEVBQUU7QUFDUEcsTUFBQUEsSUFBSSxFQUFFO0FBREMsS0FEUjtBQUlEQyxJQUFBQSxNQUFNLEVBQUU7QUFKUCxHQXRDYyxDQWhCRDtBQTREaEJDLEVBQUFBLGtCQUFrQixFQUFFLEVBNURKO0FBNkRoQkMsRUFBQUEsbUJBQW1CLEVBQUUsRUE3REw7QUE4RGhCQyxFQUFBQSxxQkFBcUIsRUFBRSxDQUFDLENBQUMsUUFBRCxFQUFXLE9BQVgsQ0FBRCxFQUFzQixDQUFDLFFBQUQsQ0FBdEIsQ0E5RFA7QUErRGhCQyxFQUFBQSxhQUFhLEVBQUUsRUEvREM7QUFnRWhCQyxFQUFBQSxVQUFVLEVBQUUsQ0FBQyxDQUFDLFVBQUQsRUFBYSxRQUFiLEVBQXVCLFdBQXZCLEVBQW9DLFFBQXBDLENBQUQsRUFBZ0QsQ0FBQyxVQUFELEVBQWEsV0FBYixFQUEwQixTQUExQixFQUFxQyxPQUFyQyxFQUE4QyxRQUE5QyxDQUFoRDtBQWhFSSxDQUFsQjtBQWtFQSxJQUFJQyxRQUFRLEdBQUduQixXQUFmO0FBQ0FILE9BQU8sQ0FBQ0UsT0FBUixHQUFrQm9CLFFBQWxCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfT2JqZWN0JGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy1zdGFibGUvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eVwiKTtcblxuX09iamVjdCRkZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBsaXN0Ym94Um9sZSA9IHtcbiAgYWJzdHJhY3Q6IGZhbHNlLFxuICBhY2Nlc3NpYmxlTmFtZVJlcXVpcmVkOiB0cnVlLFxuICBiYXNlQ29uY2VwdHM6IFtdLFxuICBjaGlsZHJlblByZXNlbnRhdGlvbmFsOiBmYWxzZSxcbiAgbmFtZUZyb206IFsnYXV0aG9yJ10sXG4gIHByb2hpYml0ZWRQcm9wczogW10sXG4gIHByb3BzOiB7XG4gICAgJ2FyaWEtZXJyb3JtZXNzYWdlJzogbnVsbCxcbiAgICAnYXJpYS1leHBhbmRlZCc6IG51bGwsXG4gICAgJ2FyaWEtaW52YWxpZCc6IG51bGwsXG4gICAgJ2FyaWEtbXVsdGlzZWxlY3RhYmxlJzogbnVsbCxcbiAgICAnYXJpYS1yZWFkb25seSc6IG51bGwsXG4gICAgJ2FyaWEtcmVxdWlyZWQnOiBudWxsLFxuICAgICdhcmlhLW9yaWVudGF0aW9uJzogJ3ZlcnRpY2FsJ1xuICB9LFxuICByZWxhdGVkQ29uY2VwdHM6IFt7XG4gICAgY29uY2VwdDoge1xuICAgICAgYXR0cmlidXRlczogW3tcbiAgICAgICAgY29uc3RyYWludHM6IFsnPjEnXSxcbiAgICAgICAgbmFtZTogJ3NpemUnXG4gICAgICB9LCB7XG4gICAgICAgIG5hbWU6ICdtdWx0aXBsZSdcbiAgICAgIH1dLFxuICAgICAgbmFtZTogJ3NlbGVjdCdcbiAgICB9LFxuICAgIG1vZHVsZTogJ0hUTUwnXG4gIH0sIHtcbiAgICBjb25jZXB0OiB7XG4gICAgICBhdHRyaWJ1dGVzOiBbe1xuICAgICAgICBjb25zdHJhaW50czogWyc+MSddLFxuICAgICAgICBuYW1lOiAnc2l6ZSdcbiAgICAgIH1dLFxuICAgICAgbmFtZTogJ3NlbGVjdCdcbiAgICB9LFxuICAgIG1vZHVsZTogJ0hUTUwnXG4gIH0sIHtcbiAgICBjb25jZXB0OiB7XG4gICAgICBhdHRyaWJ1dGVzOiBbe1xuICAgICAgICBuYW1lOiAnbXVsdGlwbGUnXG4gICAgICB9XSxcbiAgICAgIG5hbWU6ICdzZWxlY3QnXG4gICAgfSxcbiAgICBtb2R1bGU6ICdIVE1MJ1xuICB9LCB7XG4gICAgY29uY2VwdDoge1xuICAgICAgbmFtZTogJ2RhdGFsaXN0J1xuICAgIH0sXG4gICAgbW9kdWxlOiAnSFRNTCdcbiAgfSwge1xuICAgIGNvbmNlcHQ6IHtcbiAgICAgIG5hbWU6ICdsaXN0J1xuICAgIH0sXG4gICAgbW9kdWxlOiAnQVJJQSdcbiAgfSwge1xuICAgIGNvbmNlcHQ6IHtcbiAgICAgIG5hbWU6ICdzZWxlY3QnXG4gICAgfSxcbiAgICBtb2R1bGU6ICdYRm9ybXMnXG4gIH1dLFxuICByZXF1aXJlQ29udGV4dFJvbGU6IFtdLFxuICByZXF1aXJlZENvbnRleHRSb2xlOiBbXSxcbiAgcmVxdWlyZWRPd25lZEVsZW1lbnRzOiBbWydvcHRpb24nLCAnZ3JvdXAnXSwgWydvcHRpb24nXV0sXG4gIHJlcXVpcmVkUHJvcHM6IHt9LFxuICBzdXBlckNsYXNzOiBbWydyb2xldHlwZScsICd3aWRnZXQnLCAnY29tcG9zaXRlJywgJ3NlbGVjdCddLCBbJ3JvbGV0eXBlJywgJ3N0cnVjdHVyZScsICdzZWN0aW9uJywgJ2dyb3VwJywgJ3NlbGVjdCddXVxufTtcbnZhciBfZGVmYXVsdCA9IGxpc3Rib3hSb2xlO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7Il19
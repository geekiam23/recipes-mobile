5ea133fcb562e220f7e409fc04650dd3
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toHaveStyle = toHaveStyle;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends3 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _jestMatcherUtils = require("jest-matcher-utils");

var _jestDiff = _interopRequireDefault(require("jest-diff"));

var _chalk = _interopRequireDefault(require("chalk"));

var _ramda = require("ramda");

var _utils = require("./utils");

function isSubset(expected, received) {
  return (0, _ramda.compose)((0, _ramda.all)(function (_ref) {
    var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
        prop = _ref2[0],
        value = _ref2[1];

    return Array.isArray(value) ? isSubset((0, _ramda.mergeAll)(value), (0, _ramda.mergeAll)(received[prop])) : received[prop] === value;
  }), _ramda.toPairs)(expected);
}

function mergeAllStyles(styles) {
  return (0, _ramda.compose)(_ramda.mergeAll, _ramda.flatten)(styles);
}

function printoutStyles(styles) {
  return Object.keys(styles).sort().map(function (prop) {
    return Array.isArray(styles[prop]) ? prop + ": " + JSON.stringify(styles[prop], null, 2) + ";" : prop + ": " + styles[prop] + ";";
  }).join('\n');
}

function narrow(expected, received) {
  return Object.keys(received).filter(function (prop) {
    return expected[prop];
  }).reduce(function (obj, prop) {
    return (0, _extends3.default)(obj, (0, _defineProperty2.default)({}, prop, Array.isArray(expected[prop]) && Array.isArray(received[prop]) ? expected[prop].map(function (_, i) {
      return narrow(expected[prop][i], received[prop][i]);
    }) : received[prop]));
  }, {});
}

function expectedDiff(expected, elementStyles) {
  var received = narrow(expected, elementStyles);
  var diffOutput = (0, _jestDiff.default)(printoutStyles(expected), printoutStyles(received));
  return diffOutput.replace(_chalk.default.red('+ Received') + "\n", '');
}

function toHaveStyle(element, style) {
  var _element$props$style,
      _this = this;

  (0, _utils.checkReactElement)(element, toHaveStyle, this);
  var elementStyle = (_element$props$style = element.props.style) != null ? _element$props$style : {};
  var expected = Array.isArray(style) ? mergeAllStyles(style) : style;
  var received = Array.isArray(elementStyle) ? mergeAllStyles(elementStyle) : elementStyle;
  return {
    pass: isSubset(expected, received),
    message: function message() {
      var matcher = (_this.isNot ? '.not' : '') + ".toHaveStyle";
      return [(0, _jestMatcherUtils.matcherHint)(matcher, 'element', ''), expectedDiff(expected, received)].join('\n\n');
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
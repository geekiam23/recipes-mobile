705ba03b7b8b214f0be69c0216455a4e
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useLinkBuilder;

var React = _interopRequireWildcard(require("react"));

var _core = require("@react-navigation/core");

var _LinkingContext = _interopRequireDefault(require("./LinkingContext"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var getRootStateForNavigate = function getRootStateForNavigate(navigation, state) {
  var parent = navigation.dangerouslyGetParent();

  if (parent) {
    var parentState = parent.dangerouslyGetState();
    return getRootStateForNavigate(parent, {
      index: 0,
      routes: [(0, _extends2.default)({}, parentState.routes[parentState.index], {
        state: state
      })]
    });
  }

  return state;
};

function useLinkBuilder() {
  var navigation = React.useContext(_core.NavigationHelpersContext);
  var linking = React.useContext(_LinkingContext.default);
  var buildLink = React.useCallback(function (name, params) {
    var options = linking.options;

    if ((options === null || options === void 0 ? void 0 : options.enabled) === false) {
      return undefined;
    }

    var state = navigation ? getRootStateForNavigate(navigation, {
      index: 0,
      routes: [{
        name: name,
        params: params
      }]
    }) : {
      index: 0,
      routes: [{
        name: name,
        params: params
      }]
    };
    var path = options !== null && options !== void 0 && options.getPathFromState ? options.getPathFromState(state, options === null || options === void 0 ? void 0 : options.config) : (0, _core.getPathFromState)(state, options === null || options === void 0 ? void 0 : options.config);
    return path;
  }, [linking, navigation]);
  return buildLink;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZUxpbmtCdWlsZGVyLnRzeCJdLCJuYW1lcyI6WyJnZXRSb290U3RhdGVGb3JOYXZpZ2F0ZSIsInBhcmVudCIsIm5hdmlnYXRpb24iLCJwYXJlbnRTdGF0ZSIsImluZGV4Iiwicm91dGVzIiwic3RhdGUiLCJSZWFjdCIsIk5hdmlnYXRpb25IZWxwZXJzQ29udGV4dCIsImxpbmtpbmciLCJMaW5raW5nQ29udGV4dCIsImJ1aWxkTGluayIsIm9wdGlvbnMiLCJuYW1lIiwicGFyYW1zIiwicGF0aCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxJQUFBLEtBQUEsR0FBQSx1QkFBQSxDQUFBLE9BQUEsQ0FBQSxPQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLEtBQUEsR0FBQSxPQUFBLENBQUEsd0JBQUEsQ0FBQTs7QUFPQSxJQUFBLGVBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsb0JBQUEsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBV0EsSUFBTUEsdUJBQXVCLEdBQUcsU0FBMUJBLHVCQUEwQixDQUFBLFVBQUEsRUFBQSxLQUFBLEVBR2I7QUFDakIsTUFBTUMsTUFBTSxHQUFHQyxVQUFVLENBQXpCLG9CQUFlQSxFQUFmOztBQUVBLE1BQUEsTUFBQSxFQUFZO0FBQ1YsUUFBTUMsV0FBVyxHQUFHRixNQUFNLENBQTFCLG1CQUFvQkEsRUFBcEI7QUFFQSxXQUFPRCx1QkFBdUIsQ0FBQSxNQUFBLEVBQVM7QUFDckNJLE1BQUFBLEtBQUssRUFEZ0MsQ0FBQTtBQUVyQ0MsTUFBQUEsTUFBTSxFQUFFLDRCQUVERixXQUFXLENBQVhBLE1BQUFBLENBQW1CQSxXQUFXLENBRG5DLEtBQ0tBLENBRkM7QUFHSkcsUUFBQUEsS0FBSyxFQUFFQTtBQUhIO0FBRjZCLEtBQVQsQ0FBOUI7QUFTRDs7QUFFRCxTQUFBLEtBQUE7QUFwQkYsQ0FBQTs7QUEyQmUsU0FBQSxjQUFBLEdBQTBCO0FBQ3ZDLE1BQU1KLFVBQVUsR0FBR0ssS0FBSyxDQUFMQSxVQUFBQSxDQUFpQkMsS0FBQUEsQ0FBcEMsd0JBQW1CRCxDQUFuQjtBQUNBLE1BQU1FLE9BQU8sR0FBR0YsS0FBSyxDQUFMQSxVQUFBQSxDQUFpQkcsZUFBQUEsQ0FBakMsT0FBZ0JILENBQWhCO0FBRUEsTUFBTUksU0FBUyxHQUFHLEtBQUssQ0FBTCxXQUFBLENBQ2hCLFVBQUEsSUFBQSxFQUFBLE1BQUEsRUFBbUM7QUFDakMsUUFBUUMsT0FBUixHQUFBLE9BQUEsQ0FBUUEsT0FBUjs7QUFFQSxRQUFJLENBQUEsT0FBTyxLQUFQLElBQUEsSUFBQSxPQUFPLEtBQUEsS0FBUCxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUEsT0FBTyxDQUFQLE9BQUEsTUFBSixLQUFBLEVBQWdDO0FBQzlCLGFBQUEsU0FBQTtBQUNEOztBQUVELFFBQU1OLEtBQUssR0FBR0osVUFBVSxHQUNwQkYsdUJBQXVCLENBQUEsVUFBQSxFQUFhO0FBQ2xDSSxNQUFBQSxLQUFLLEVBRDZCLENBQUE7QUFFbENDLE1BQUFBLE1BQU0sRUFBRSxDQUFDO0FBQUVRLFFBQUFBLElBQUYsRUFBRUEsSUFBRjtBQUFRQyxRQUFBQSxNQUFBQSxFQUFBQTtBQUFSLE9BQUQ7QUFGMEIsS0FBYixDQURILEdBT3BCO0FBQ0VWLE1BQUFBLEtBQUssRUFEUCxDQUFBO0FBRUVDLE1BQUFBLE1BQU0sRUFBRSxDQUFDO0FBQUVRLFFBQUFBLElBQUYsRUFBRUEsSUFBRjtBQUFRQyxRQUFBQSxNQUFBQSxFQUFBQTtBQUFSLE9BQUQ7QUFGVixLQVBKO0FBWUEsUUFBTUMsSUFBSSxHQUFHSCxPQUFPLEtBQVBBLElBQUFBLElBQUFBLE9BQU8sS0FBQSxLQUFQQSxDQUFBQSxJQUFBQSxPQUFPLENBQVBBLGdCQUFBQSxHQUNUQSxPQUFPLENBQVBBLGdCQUFBQSxDQUFBQSxLQUFBQSxFQUFnQ0EsT0FBaENBLEtBQUFBLElBQWdDQSxJQUFBQSxPQUFoQ0EsS0FBQUEsS0FBQUEsQ0FBZ0NBLEdBQWhDQSxLQUFBQSxDQUFnQ0EsR0FBQUEsT0FBTyxDQUQ5QkEsTUFDVEEsQ0FEU0EsR0FFVCxDQUFBLEdBQUEsS0FBQSxDQUFBLGdCQUFBLEVBQUEsS0FBQSxFQUF3QkEsT0FBeEIsS0FBQSxJQUF3QkEsSUFBQUEsT0FBeEIsS0FBQSxLQUFBLENBQXdCQSxHQUF4QixLQUFBLENBQXdCQSxHQUFBQSxPQUFPLENBRm5DLE1BRUksQ0FGSjtBQUlBLFdBQUEsSUFBQTtBQXhCYyxHQUFBLEVBMEJoQixDQUFBLE9BQUEsRUExQkYsVUEwQkUsQ0ExQmdCLENBQWxCO0FBNkJBLFNBQUEsU0FBQTtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgTmF2aWdhdGlvbkhlbHBlcnMsXG4gIE5hdmlnYXRpb25IZWxwZXJzQ29udGV4dCxcbiAgTmF2aWdhdGlvblByb3AsXG4gIFBhcmFtTGlzdEJhc2UsXG4gIGdldFBhdGhGcm9tU3RhdGUsXG59IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL2NvcmUnO1xuaW1wb3J0IExpbmtpbmdDb250ZXh0IGZyb20gJy4vTGlua2luZ0NvbnRleHQnO1xuXG50eXBlIE5hdmlnYXRpb25PYmplY3QgPVxuICB8IE5hdmlnYXRpb25IZWxwZXJzPFBhcmFtTGlzdEJhc2U+XG4gIHwgTmF2aWdhdGlvblByb3A8UGFyYW1MaXN0QmFzZT47XG5cbnR5cGUgTWluaW1hbFN0YXRlID0ge1xuICBpbmRleDogbnVtYmVyO1xuICByb3V0ZXM6IHsgbmFtZTogc3RyaW5nOyBwYXJhbXM/OiBvYmplY3Q7IHN0YXRlPzogTWluaW1hbFN0YXRlIH1bXTtcbn07XG5cbmNvbnN0IGdldFJvb3RTdGF0ZUZvck5hdmlnYXRlID0gKFxuICBuYXZpZ2F0aW9uOiBOYXZpZ2F0aW9uT2JqZWN0LFxuICBzdGF0ZTogTWluaW1hbFN0YXRlXG4pOiBNaW5pbWFsU3RhdGUgPT4ge1xuICBjb25zdCBwYXJlbnQgPSBuYXZpZ2F0aW9uLmRhbmdlcm91c2x5R2V0UGFyZW50KCk7XG5cbiAgaWYgKHBhcmVudCkge1xuICAgIGNvbnN0IHBhcmVudFN0YXRlID0gcGFyZW50LmRhbmdlcm91c2x5R2V0U3RhdGUoKTtcblxuICAgIHJldHVybiBnZXRSb290U3RhdGVGb3JOYXZpZ2F0ZShwYXJlbnQsIHtcbiAgICAgIGluZGV4OiAwLFxuICAgICAgcm91dGVzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAuLi5wYXJlbnRTdGF0ZS5yb3V0ZXNbcGFyZW50U3RhdGUuaW5kZXhdLFxuICAgICAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gc3RhdGU7XG59O1xuXG4vKipcbiAqIEJ1aWxkIGRlc3RpbmF0aW9uIGxpbmsgZm9yIGEgbmF2aWdhdGUgYWN0aW9uLlxuICogVXNlZnVsIGZvciBzaG93aW5nIGFuY2hvciB0YWdzIG9uIHRoZSB3ZWIgZm9yIGJ1dHRvbnMgdGhhdCBwZXJmb3JtIG5hdmlnYXRpb24uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUxpbmtCdWlsZGVyKCkge1xuICBjb25zdCBuYXZpZ2F0aW9uID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uSGVscGVyc0NvbnRleHQpO1xuICBjb25zdCBsaW5raW5nID0gUmVhY3QudXNlQ29udGV4dChMaW5raW5nQ29udGV4dCk7XG5cbiAgY29uc3QgYnVpbGRMaW5rID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKG5hbWU6IHN0cmluZywgcGFyYW1zPzogb2JqZWN0KSA9PiB7XG4gICAgICBjb25zdCB7IG9wdGlvbnMgfSA9IGxpbmtpbmc7XG5cbiAgICAgIGlmIChvcHRpb25zPy5lbmFibGVkID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBzdGF0ZSA9IG5hdmlnYXRpb25cbiAgICAgICAgPyBnZXRSb290U3RhdGVGb3JOYXZpZ2F0ZShuYXZpZ2F0aW9uLCB7XG4gICAgICAgICAgICBpbmRleDogMCxcbiAgICAgICAgICAgIHJvdXRlczogW3sgbmFtZSwgcGFyYW1zIH1dLFxuICAgICAgICAgIH0pXG4gICAgICAgIDogLy8gSWYgd2UgY291bGRuJ3QgZmluZCBhIG5hdmlnYXRpb24gb2JqZWN0IGluIGNvbnRleHQsIHdlJ3JlIGF0IHJvb3RcbiAgICAgICAgICAvLyBTbyB3ZSdsbCBjb25zdHJ1Y3QgYSBiYXNpYyBzdGF0ZSBvYmplY3QgdG8gdXNlXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW5kZXg6IDAsXG4gICAgICAgICAgICByb3V0ZXM6IFt7IG5hbWUsIHBhcmFtcyB9XSxcbiAgICAgICAgICB9O1xuXG4gICAgICBjb25zdCBwYXRoID0gb3B0aW9ucz8uZ2V0UGF0aEZyb21TdGF0ZVxuICAgICAgICA/IG9wdGlvbnMuZ2V0UGF0aEZyb21TdGF0ZShzdGF0ZSwgb3B0aW9ucz8uY29uZmlnKVxuICAgICAgICA6IGdldFBhdGhGcm9tU3RhdGUoc3RhdGUsIG9wdGlvbnM/LmNvbmZpZyk7XG5cbiAgICAgIHJldHVybiBwYXRoO1xuICAgIH0sXG4gICAgW2xpbmtpbmcsIG5hdmlnYXRpb25dXG4gICk7XG5cbiAgcmV0dXJuIGJ1aWxkTGluaztcbn1cbiJdfQ==
3420ff4953b9697b620050f8b7be687a
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findByTestId = exports.findAllByTestId = exports.getAllByTestId = exports.getByTestId = exports.queryAllByTestId = exports.queryByTestId = void 0;

var _helpers = require("../helpers");

var _queryHelpers = require("../query-helpers");

var _allUtils = require("./all-utils");

var getTestIdAttribute = function getTestIdAttribute() {
  return (0, _allUtils.getConfig)().testIdAttribute;
};

var queryAllByTestId = function queryAllByTestId() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  (0, _helpers.checkContainerType)(args[0]);
  return (0, _allUtils.queryAllByAttribute).apply(void 0, [getTestIdAttribute()].concat(args));
};

var getMultipleError = function getMultipleError(c, id) {
  return "Found multiple elements by: [" + getTestIdAttribute() + "=\"" + id + "\"]";
};

var getMissingError = function getMissingError(c, id) {
  return "Unable to find an element by: [" + getTestIdAttribute() + "=\"" + id + "\"]";
};

var queryAllByTestIdWithSuggestions = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByTestId, queryAllByTestId.name, 'queryAll');
exports.queryAllByTestId = queryAllByTestIdWithSuggestions;

var _ref = (0, _allUtils.buildQueries)(queryAllByTestId, getMultipleError, getMissingError),
    _ref2 = (0, _slicedToArray2.default)(_ref, 5),
    queryByTestId = _ref2[0],
    getAllByTestId = _ref2[1],
    getByTestId = _ref2[2],
    findAllByTestId = _ref2[3],
    findByTestId = _ref2[4];

exports.findByTestId = findByTestId;
exports.findAllByTestId = findAllByTestId;
exports.getByTestId = getByTestId;
exports.getAllByTestId = getAllByTestId;
exports.queryByTestId = queryByTestId;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QtaWQuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJmaW5kQnlUZXN0SWQiLCJmaW5kQWxsQnlUZXN0SWQiLCJnZXRBbGxCeVRlc3RJZCIsImdldEJ5VGVzdElkIiwicXVlcnlBbGxCeVRlc3RJZCIsInF1ZXJ5QnlUZXN0SWQiLCJfaGVscGVycyIsInJlcXVpcmUiLCJfcXVlcnlIZWxwZXJzIiwiX2FsbFV0aWxzIiwiZ2V0VGVzdElkQXR0cmlidXRlIiwiZ2V0Q29uZmlnIiwidGVzdElkQXR0cmlidXRlIiwiYXJncyIsImNoZWNrQ29udGFpbmVyVHlwZSIsInF1ZXJ5QWxsQnlBdHRyaWJ1dGUiLCJnZXRNdWx0aXBsZUVycm9yIiwiYyIsImlkIiwiZ2V0TWlzc2luZ0Vycm9yIiwicXVlcnlBbGxCeVRlc3RJZFdpdGhTdWdnZXN0aW9ucyIsIndyYXBBbGxCeVF1ZXJ5V2l0aFN1Z2dlc3Rpb24iLCJuYW1lIiwiYnVpbGRRdWVyaWVzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBRUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLEVBQUFBLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLFlBQVIsR0FBdUJGLE9BQU8sQ0FBQ0csZUFBUixHQUEwQkgsT0FBTyxDQUFDSSxjQUFSLEdBQXlCSixPQUFPLENBQUNLLFdBQVIsR0FBc0JMLE9BQU8sQ0FBQ00sZ0JBQVIsR0FBMkJOLE9BQU8sQ0FBQ08sYUFBUixHQUF3QixLQUFLLENBQXhKOztBQUVBLElBQUlDLFFBQVEsR0FBR0MsT0FBTyxjQUF0Qjs7QUFFQSxJQUFJQyxhQUFhLEdBQUdELE9BQU8sb0JBQTNCOztBQUVBLElBQUlFLFNBQVMsR0FBR0YsT0FBTyxlQUF2Qjs7QUFFQSxJQUFNRyxrQkFBa0IsR0FBRyxTQUFyQkEsa0JBQXFCO0FBQUEsU0FBTSxDQUFDLEdBQUdELFNBQVMsQ0FBQ0UsU0FBZCxJQUEyQkMsZUFBakM7QUFBQSxDQUEzQjs7QUFFQSxJQUFNUixnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQW1CLEdBQWE7QUFBQSxvQ0FBVFMsSUFBUztBQUFUQSxJQUFBQSxJQUFTO0FBQUE7O0FBQ3BDLEdBQUMsR0FBR1AsUUFBUSxDQUFDUSxrQkFBYixFQUFpQ0QsSUFBSSxDQUFDLENBQUQsQ0FBckM7QUFJQSxTQUFPLENBQUMsR0FBR0osU0FBUyxDQUFDTSxtQkFBZCxpQkFBbUNMLGtCQUFrQixFQUFyRCxTQUE0REcsSUFBNUQsRUFBUDtBQUNELENBTkQ7O0FBUUEsSUFBTUcsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFtQixDQUFDQyxDQUFELEVBQUlDLEVBQUo7QUFBQSwyQ0FBMkNSLGtCQUFrQixFQUE3RCxXQUFvRVEsRUFBcEU7QUFBQSxDQUF6Qjs7QUFFQSxJQUFNQyxlQUFlLEdBQUcsU0FBbEJBLGVBQWtCLENBQUNGLENBQUQsRUFBSUMsRUFBSjtBQUFBLDZDQUE2Q1Isa0JBQWtCLEVBQS9ELFdBQXNFUSxFQUF0RTtBQUFBLENBQXhCOztBQUVBLElBQU1FLCtCQUErQixHQUFHLENBQUMsR0FBR1osYUFBYSxDQUFDYSw0QkFBbEIsRUFBZ0RqQixnQkFBaEQsRUFBa0VBLGdCQUFnQixDQUFDa0IsSUFBbkYsRUFBeUYsVUFBekYsQ0FBeEM7QUFDQXhCLE9BQU8sQ0FBQ00sZ0JBQVIsR0FBMkJnQiwrQkFBM0I7O0FBQ0EsV0FBb0YsQ0FBQyxHQUFHWCxTQUFTLENBQUNjLFlBQWQsRUFBNEJuQixnQkFBNUIsRUFBOENZLGdCQUE5QyxFQUFnRUcsZUFBaEUsQ0FBcEY7QUFBQTtBQUFBLElBQU9kLGFBQVA7QUFBQSxJQUFzQkgsY0FBdEI7QUFBQSxJQUFzQ0MsV0FBdEM7QUFBQSxJQUFtREYsZUFBbkQ7QUFBQSxJQUFvRUQsWUFBcEU7O0FBQ0FGLE9BQU8sQ0FBQ0UsWUFBUixHQUF1QkEsWUFBdkI7QUFDQUYsT0FBTyxDQUFDRyxlQUFSLEdBQTBCQSxlQUExQjtBQUNBSCxPQUFPLENBQUNLLFdBQVIsR0FBc0JBLFdBQXRCO0FBQ0FMLE9BQU8sQ0FBQ0ksY0FBUixHQUF5QkEsY0FBekI7QUFDQUosT0FBTyxDQUFDTyxhQUFSLEdBQXdCQSxhQUF4QiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5maW5kQnlUZXN0SWQgPSBleHBvcnRzLmZpbmRBbGxCeVRlc3RJZCA9IGV4cG9ydHMuZ2V0QWxsQnlUZXN0SWQgPSBleHBvcnRzLmdldEJ5VGVzdElkID0gZXhwb3J0cy5xdWVyeUFsbEJ5VGVzdElkID0gZXhwb3J0cy5xdWVyeUJ5VGVzdElkID0gdm9pZCAwO1xuXG52YXIgX2hlbHBlcnMgPSByZXF1aXJlKFwiLi4vaGVscGVyc1wiKTtcblxudmFyIF9xdWVyeUhlbHBlcnMgPSByZXF1aXJlKFwiLi4vcXVlcnktaGVscGVyc1wiKTtcblxudmFyIF9hbGxVdGlscyA9IHJlcXVpcmUoXCIuL2FsbC11dGlsc1wiKTtcblxuY29uc3QgZ2V0VGVzdElkQXR0cmlidXRlID0gKCkgPT4gKDAsIF9hbGxVdGlscy5nZXRDb25maWcpKCkudGVzdElkQXR0cmlidXRlO1xuXG5jb25zdCBxdWVyeUFsbEJ5VGVzdElkID0gKC4uLmFyZ3MpID0+IHtcbiAgKDAsIF9oZWxwZXJzLmNoZWNrQ29udGFpbmVyVHlwZSkoYXJnc1swXSk7IC8vIFRPRE86IFJlbW92ZSBpZ25vcmUgYWZ0ZXIgYHF1ZXJ5QWxsQnlBdHRyaWJ1dGVgIHdpbGwgYmUgbW92ZWQgdG8gVFNcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuICAvLyBAdHMtZXhwZWN0LWVycm9yXG5cbiAgcmV0dXJuICgwLCBfYWxsVXRpbHMucXVlcnlBbGxCeUF0dHJpYnV0ZSkoZ2V0VGVzdElkQXR0cmlidXRlKCksIC4uLmFyZ3MpO1xufTtcblxuY29uc3QgZ2V0TXVsdGlwbGVFcnJvciA9IChjLCBpZCkgPT4gYEZvdW5kIG11bHRpcGxlIGVsZW1lbnRzIGJ5OiBbJHtnZXRUZXN0SWRBdHRyaWJ1dGUoKX09XCIke2lkfVwiXWA7XG5cbmNvbnN0IGdldE1pc3NpbmdFcnJvciA9IChjLCBpZCkgPT4gYFVuYWJsZSB0byBmaW5kIGFuIGVsZW1lbnQgYnk6IFske2dldFRlc3RJZEF0dHJpYnV0ZSgpfT1cIiR7aWR9XCJdYDtcblxuY29uc3QgcXVlcnlBbGxCeVRlc3RJZFdpdGhTdWdnZXN0aW9ucyA9ICgwLCBfcXVlcnlIZWxwZXJzLndyYXBBbGxCeVF1ZXJ5V2l0aFN1Z2dlc3Rpb24pKHF1ZXJ5QWxsQnlUZXN0SWQsIHF1ZXJ5QWxsQnlUZXN0SWQubmFtZSwgJ3F1ZXJ5QWxsJyk7XG5leHBvcnRzLnF1ZXJ5QWxsQnlUZXN0SWQgPSBxdWVyeUFsbEJ5VGVzdElkV2l0aFN1Z2dlc3Rpb25zO1xuY29uc3QgW3F1ZXJ5QnlUZXN0SWQsIGdldEFsbEJ5VGVzdElkLCBnZXRCeVRlc3RJZCwgZmluZEFsbEJ5VGVzdElkLCBmaW5kQnlUZXN0SWRdID0gKDAsIF9hbGxVdGlscy5idWlsZFF1ZXJpZXMpKHF1ZXJ5QWxsQnlUZXN0SWQsIGdldE11bHRpcGxlRXJyb3IsIGdldE1pc3NpbmdFcnJvcik7XG5leHBvcnRzLmZpbmRCeVRlc3RJZCA9IGZpbmRCeVRlc3RJZDtcbmV4cG9ydHMuZmluZEFsbEJ5VGVzdElkID0gZmluZEFsbEJ5VGVzdElkO1xuZXhwb3J0cy5nZXRCeVRlc3RJZCA9IGdldEJ5VGVzdElkO1xuZXhwb3J0cy5nZXRBbGxCeVRlc3RJZCA9IGdldEFsbEJ5VGVzdElkO1xuZXhwb3J0cy5xdWVyeUJ5VGVzdElkID0gcXVlcnlCeVRlc3RJZDsiXX0=
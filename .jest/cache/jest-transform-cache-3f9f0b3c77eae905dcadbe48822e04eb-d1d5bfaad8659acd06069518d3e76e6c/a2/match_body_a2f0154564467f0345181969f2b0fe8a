220e39ec559a5de0c6ab231e558c09e4
'use strict';

var querystring = require('querystring');

var common = require("./common");

module.exports = function matchBody(options, spec, body) {
  if (spec instanceof RegExp) {
    return spec.test(body);
  }

  if (Buffer.isBuffer(spec)) {
    var encoding = common.isUtf8Representable(spec) ? 'utf8' : 'hex';
    spec = spec.toString(encoding);
  }

  var contentType = (options.headers && (options.headers['Content-Type'] || options.headers['content-type']) || '').toString();
  var isMultipart = contentType.includes('multipart');
  var isUrlencoded = contentType.includes('application/x-www-form-urlencoded');
  var json;

  if (typeof spec === 'object' || typeof spec === 'function') {
    try {
      json = JSON.parse(body);
    } catch (err) {}

    if (json !== undefined) {
      body = json;
    } else if (isUrlencoded) {
      body = querystring.parse(body);
    }
  }

  if (typeof spec === 'function') {
    return spec.call(options, body);
  }

  if (!isMultipart && typeof body === 'string') {
    body = body.replace(/\r?\n|\r/g, '');
  }

  if (!isMultipart && typeof spec === 'string') {
    spec = spec.replace(/\r?\n|\r/g, '');
  }

  if (isUrlencoded) {
    spec = mapValuesDeep(spec, function (val) {
      return val instanceof RegExp ? val : "" + val;
    });
  }

  return common.dataEqual(spec, body);
};

function mapValuesDeep(obj, cb) {
  if (Array.isArray(obj)) {
    return obj.map(function (v) {
      return mapValuesDeep(v, cb);
    });
  }

  if (common.isPlainObject(obj)) {
    return common.mapValue(obj, function (v) {
      return mapValuesDeep(v, cb);
    });
  }

  return cb(obj);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hdGNoX2JvZHkuanMiXSwibmFtZXMiOlsicXVlcnlzdHJpbmciLCJyZXF1aXJlIiwiY29tbW9uIiwibW9kdWxlIiwiZXhwb3J0cyIsIm1hdGNoQm9keSIsIm9wdGlvbnMiLCJzcGVjIiwiYm9keSIsIlJlZ0V4cCIsInRlc3QiLCJCdWZmZXIiLCJpc0J1ZmZlciIsImVuY29kaW5nIiwiaXNVdGY4UmVwcmVzZW50YWJsZSIsInRvU3RyaW5nIiwiY29udGVudFR5cGUiLCJoZWFkZXJzIiwiaXNNdWx0aXBhcnQiLCJpbmNsdWRlcyIsImlzVXJsZW5jb2RlZCIsImpzb24iLCJKU09OIiwicGFyc2UiLCJlcnIiLCJ1bmRlZmluZWQiLCJjYWxsIiwicmVwbGFjZSIsIm1hcFZhbHVlc0RlZXAiLCJ2YWwiLCJkYXRhRXF1YWwiLCJvYmoiLCJjYiIsIkFycmF5IiwiaXNBcnJheSIsIm1hcCIsInYiLCJpc1BsYWluT2JqZWN0IiwibWFwVmFsdWUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLFdBQVcsR0FBR0MsT0FBTyxDQUFDLGFBQUQsQ0FBM0I7O0FBRUEsSUFBTUMsTUFBTSxHQUFHRCxPQUFPLFlBQXRCOztBQUVBRSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsU0FBU0MsU0FBVCxDQUFtQkMsT0FBbkIsRUFBNEJDLElBQTVCLEVBQWtDQyxJQUFsQyxFQUF3QztBQUN2RCxNQUFJRCxJQUFJLFlBQVlFLE1BQXBCLEVBQTRCO0FBQzFCLFdBQU9GLElBQUksQ0FBQ0csSUFBTCxDQUFVRixJQUFWLENBQVA7QUFDRDs7QUFFRCxNQUFJRyxNQUFNLENBQUNDLFFBQVAsQ0FBZ0JMLElBQWhCLENBQUosRUFBMkI7QUFDekIsUUFBTU0sUUFBUSxHQUFHWCxNQUFNLENBQUNZLG1CQUFQLENBQTJCUCxJQUEzQixJQUFtQyxNQUFuQyxHQUE0QyxLQUE3RDtBQUNBQSxJQUFBQSxJQUFJLEdBQUdBLElBQUksQ0FBQ1EsUUFBTCxDQUFjRixRQUFkLENBQVA7QUFDRDs7QUFFRCxNQUFNRyxXQUFXLEdBQUcsQ0FDakJWLE9BQU8sQ0FBQ1csT0FBUixLQUNFWCxPQUFPLENBQUNXLE9BQVIsQ0FBZ0IsY0FBaEIsS0FBbUNYLE9BQU8sQ0FBQ1csT0FBUixDQUFnQixjQUFoQixDQURyQyxDQUFELElBRUEsRUFIa0IsRUFJbEJGLFFBSmtCLEVBQXBCO0FBTUEsTUFBTUcsV0FBVyxHQUFHRixXQUFXLENBQUNHLFFBQVosQ0FBcUIsV0FBckIsQ0FBcEI7QUFDQSxNQUFNQyxZQUFZLEdBQUdKLFdBQVcsQ0FBQ0csUUFBWixDQUFxQixtQ0FBckIsQ0FBckI7QUFHQSxNQUFJRSxJQUFKOztBQUNBLE1BQUksT0FBT2QsSUFBUCxLQUFnQixRQUFoQixJQUE0QixPQUFPQSxJQUFQLEtBQWdCLFVBQWhELEVBQTREO0FBQzFELFFBQUk7QUFDRmMsTUFBQUEsSUFBSSxHQUFHQyxJQUFJLENBQUNDLEtBQUwsQ0FBV2YsSUFBWCxDQUFQO0FBQ0QsS0FGRCxDQUVFLE9BQU9nQixHQUFQLEVBQVksQ0FFYjs7QUFDRCxRQUFJSCxJQUFJLEtBQUtJLFNBQWIsRUFBd0I7QUFDdEJqQixNQUFBQSxJQUFJLEdBQUdhLElBQVA7QUFDRCxLQUZELE1BRU8sSUFBSUQsWUFBSixFQUFrQjtBQUN2QlosTUFBQUEsSUFBSSxHQUFHUixXQUFXLENBQUN1QixLQUFaLENBQWtCZixJQUFsQixDQUFQO0FBQ0Q7QUFDRjs7QUFFRCxNQUFJLE9BQU9ELElBQVAsS0FBZ0IsVUFBcEIsRUFBZ0M7QUFDOUIsV0FBT0EsSUFBSSxDQUFDbUIsSUFBTCxDQUFVcEIsT0FBVixFQUFtQkUsSUFBbkIsQ0FBUDtBQUNEOztBQUlELE1BQUksQ0FBQ1UsV0FBRCxJQUFnQixPQUFPVixJQUFQLEtBQWdCLFFBQXBDLEVBQThDO0FBQzVDQSxJQUFBQSxJQUFJLEdBQUdBLElBQUksQ0FBQ21CLE9BQUwsQ0FBYSxXQUFiLEVBQTBCLEVBQTFCLENBQVA7QUFDRDs7QUFFRCxNQUFJLENBQUNULFdBQUQsSUFBZ0IsT0FBT1gsSUFBUCxLQUFnQixRQUFwQyxFQUE4QztBQUM1Q0EsSUFBQUEsSUFBSSxHQUFHQSxJQUFJLENBQUNvQixPQUFMLENBQWEsV0FBYixFQUEwQixFQUExQixDQUFQO0FBQ0Q7O0FBSUQsTUFBSVAsWUFBSixFQUFrQjtBQUNoQmIsSUFBQUEsSUFBSSxHQUFHcUIsYUFBYSxDQUFDckIsSUFBRCxFQUFPLFVBQUFzQixHQUFHO0FBQUEsYUFBS0EsR0FBRyxZQUFZcEIsTUFBZixHQUF3Qm9CLEdBQXhCLFFBQWlDQSxHQUF0QztBQUFBLEtBQVYsQ0FBcEI7QUFDRDs7QUFFRCxTQUFPM0IsTUFBTSxDQUFDNEIsU0FBUCxDQUFpQnZCLElBQWpCLEVBQXVCQyxJQUF2QixDQUFQO0FBQ0QsQ0F2REQ7O0FBNkRBLFNBQVNvQixhQUFULENBQXVCRyxHQUF2QixFQUE0QkMsRUFBNUIsRUFBZ0M7QUFDOUIsTUFBSUMsS0FBSyxDQUFDQyxPQUFOLENBQWNILEdBQWQsQ0FBSixFQUF3QjtBQUN0QixXQUFPQSxHQUFHLENBQUNJLEdBQUosQ0FBUSxVQUFBQyxDQUFDO0FBQUEsYUFBSVIsYUFBYSxDQUFDUSxDQUFELEVBQUlKLEVBQUosQ0FBakI7QUFBQSxLQUFULENBQVA7QUFDRDs7QUFDRCxNQUFJOUIsTUFBTSxDQUFDbUMsYUFBUCxDQUFxQk4sR0FBckIsQ0FBSixFQUErQjtBQUM3QixXQUFPN0IsTUFBTSxDQUFDb0MsUUFBUCxDQUFnQlAsR0FBaEIsRUFBcUIsVUFBQUssQ0FBQztBQUFBLGFBQUlSLGFBQWEsQ0FBQ1EsQ0FBRCxFQUFJSixFQUFKLENBQWpCO0FBQUEsS0FBdEIsQ0FBUDtBQUNEOztBQUNELFNBQU9BLEVBQUUsQ0FBQ0QsR0FBRCxDQUFUO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgcXVlcnlzdHJpbmcgPSByZXF1aXJlKCdxdWVyeXN0cmluZycpXG5cbmNvbnN0IGNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uJylcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtYXRjaEJvZHkob3B0aW9ucywgc3BlYywgYm9keSkge1xuICBpZiAoc3BlYyBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiBzcGVjLnRlc3QoYm9keSlcbiAgfVxuXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoc3BlYykpIHtcbiAgICBjb25zdCBlbmNvZGluZyA9IGNvbW1vbi5pc1V0ZjhSZXByZXNlbnRhYmxlKHNwZWMpID8gJ3V0ZjgnIDogJ2hleCdcbiAgICBzcGVjID0gc3BlYy50b1N0cmluZyhlbmNvZGluZylcbiAgfVxuXG4gIGNvbnN0IGNvbnRlbnRUeXBlID0gKFxuICAgIChvcHRpb25zLmhlYWRlcnMgJiZcbiAgICAgIChvcHRpb25zLmhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddIHx8IG9wdGlvbnMuaGVhZGVyc1snY29udGVudC10eXBlJ10pKSB8fFxuICAgICcnXG4gICkudG9TdHJpbmcoKVxuXG4gIGNvbnN0IGlzTXVsdGlwYXJ0ID0gY29udGVudFR5cGUuaW5jbHVkZXMoJ211bHRpcGFydCcpXG4gIGNvbnN0IGlzVXJsZW5jb2RlZCA9IGNvbnRlbnRUeXBlLmluY2x1ZGVzKCdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnKVxuXG4gIC8vIHRyeSB0byB0cmFuc2Zvcm0gYm9keSB0byBqc29uXG4gIGxldCBqc29uXG4gIGlmICh0eXBlb2Ygc3BlYyA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIHNwZWMgPT09ICdmdW5jdGlvbicpIHtcbiAgICB0cnkge1xuICAgICAganNvbiA9IEpTT04ucGFyc2UoYm9keSlcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIC8vIG5vdCBhIHZhbGlkIEpTT04gc3RyaW5nXG4gICAgfVxuICAgIGlmIChqc29uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGJvZHkgPSBqc29uXG4gICAgfSBlbHNlIGlmIChpc1VybGVuY29kZWQpIHtcbiAgICAgIGJvZHkgPSBxdWVyeXN0cmluZy5wYXJzZShib2R5KVxuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2Ygc3BlYyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBzcGVjLmNhbGwob3B0aW9ucywgYm9keSlcbiAgfVxuXG4gIC8vIHN0cmlwIGxpbmUgZW5kaW5ncyBmcm9tIGJvdGggc28gdGhhdCB3ZSBnZXQgYSBtYXRjaCBubyBtYXR0ZXIgd2hhdCBPUyB3ZSBhcmUgcnVubmluZyBvblxuICAvLyBpZiBDb250ZW50LVR5cGUgZG9lcyBub3QgY29udGFpbnMgJ211bHRpcGFydCdcbiAgaWYgKCFpc011bHRpcGFydCAmJiB0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICBib2R5ID0gYm9keS5yZXBsYWNlKC9cXHI/XFxufFxcci9nLCAnJylcbiAgfVxuXG4gIGlmICghaXNNdWx0aXBhcnQgJiYgdHlwZW9mIHNwZWMgPT09ICdzdHJpbmcnKSB7XG4gICAgc3BlYyA9IHNwZWMucmVwbGFjZSgvXFxyP1xcbnxcXHIvZywgJycpXG4gIH1cblxuICAvLyBCZWNhdXNlIHRoZSBuYXR1cmUgb2YgVVJMIGVuY29kaW5nLCBhbGwgdGhlIHZhbHVlcyBpbiB0aGUgYm9keSBoYXZlIGJlZW4gY2FzdCB0byBzdHJpbmdzLlxuICAvLyBkYXRhRXF1YWwgZG9lcyBzdHJpY3QgY2hlY2tpbmcgc28gd2Ugd2UgaGF2ZSB0byBjYXN0IHRoZSBub24tcmVnZXhwIHZhbHVlcyBpbiB0aGUgc3BlYyB0b28uXG4gIGlmIChpc1VybGVuY29kZWQpIHtcbiAgICBzcGVjID0gbWFwVmFsdWVzRGVlcChzcGVjLCB2YWwgPT4gKHZhbCBpbnN0YW5jZW9mIFJlZ0V4cCA/IHZhbCA6IGAke3ZhbH1gKSlcbiAgfVxuXG4gIHJldHVybiBjb21tb24uZGF0YUVxdWFsKHNwZWMsIGJvZHkpXG59XG5cbi8qKlxuICogQmFzZWQgb24gbG9kYXNoIGlzc3VlIGRpc2N1c3Npb25cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9sb2Rhc2gvbG9kYXNoL2lzc3Vlcy8xMjQ0XG4gKi9cbmZ1bmN0aW9uIG1hcFZhbHVlc0RlZXAob2JqLCBjYikge1xuICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgcmV0dXJuIG9iai5tYXAodiA9PiBtYXBWYWx1ZXNEZWVwKHYsIGNiKSlcbiAgfVxuICBpZiAoY29tbW9uLmlzUGxhaW5PYmplY3Qob2JqKSkge1xuICAgIHJldHVybiBjb21tb24ubWFwVmFsdWUob2JqLCB2ID0+IG1hcFZhbHVlc0RlZXAodiwgY2IpKVxuICB9XG4gIHJldHVybiBjYihvYmopXG59XG4iXX0=
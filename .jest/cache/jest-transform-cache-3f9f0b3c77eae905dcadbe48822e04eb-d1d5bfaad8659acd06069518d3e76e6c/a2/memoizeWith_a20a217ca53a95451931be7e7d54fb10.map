{"version":3,"sources":["memoizeWith.js"],"names":["_arity","require","_curry2","_has","memoizeWith","mFn","fn","cache","length","key","apply","arguments","module","exports"],"mappings":"AAAA,IAAIA,MAAM,GAAgBC,OAAO,qBAAjC;;AAEA,IAAIC,OAAO,GAAgBD,OAAO,sBAAlC;;AAEA,IAAIE,IAAI,GAAgBF,OAAO,mBAA/B;;AAgCA,IAAIG,WAAW,GAAgBF,OAAO,CAAC,SAASE,WAAT,CAAqBC,GAArB,EAA0BC,EAA1B,EAA8B;AACnE,MAAIC,KAAK,GAAG,EAAZ;AACA,SAAOP,MAAM,CAACM,EAAE,CAACE,MAAJ,EAAY,YAAY;AACnC,QAAIC,GAAG,GAAGJ,GAAG,CAACK,KAAJ,CAAU,IAAV,EAAgBC,SAAhB,CAAV;;AACA,QAAI,CAACR,IAAI,CAACM,GAAD,EAAMF,KAAN,CAAT,EAAuB;AACrBA,MAAAA,KAAK,CAACE,GAAD,CAAL,GAAaH,EAAE,CAACI,KAAH,CAAS,IAAT,EAAeC,SAAf,CAAb;AACD;;AACD,WAAOJ,KAAK,CAACE,GAAD,CAAZ;AACD,GANY,CAAb;AAOD,CATqC,CAAtC;;AAUAG,MAAM,CAACC,OAAP,GAAiBT,WAAjB","sourcesContent":["var _arity = /*#__PURE__*/require('./internal/_arity');\n\nvar _curry2 = /*#__PURE__*/require('./internal/_curry2');\n\nvar _has = /*#__PURE__*/require('./internal/_has');\n\n/**\n * Creates a new function that, when invoked, caches the result of calling `fn`\n * for a given argument set and returns the result. Subsequent calls to the\n * memoized `fn` with the same argument set will not result in an additional\n * call to `fn`; instead, the cached result for that set of arguments will be\n * returned.\n *\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Function\n * @sig (*... -> String) -> (*... -> a) -> (*... -> a)\n * @param {Function} fn The function to generate the cache key.\n * @param {Function} fn The function to memoize.\n * @return {Function} Memoized version of `fn`.\n * @example\n *\n *      let count = 0;\n *      const factorial = R.memoizeWith(R.identity, n => {\n *        count += 1;\n *        return R.product(R.range(1, n + 1));\n *      });\n *      factorial(5); //=> 120\n *      factorial(5); //=> 120\n *      factorial(5); //=> 120\n *      count; //=> 1\n */\n\n\nvar memoizeWith = /*#__PURE__*/_curry2(function memoizeWith(mFn, fn) {\n  var cache = {};\n  return _arity(fn.length, function () {\n    var key = mFn.apply(this, arguments);\n    if (!_has(key, cache)) {\n      cache[key] = fn.apply(this, arguments);\n    }\n    return cache[key];\n  });\n});\nmodule.exports = memoizeWith;"]}
{"version":3,"sources":["mergeLeft.js"],"names":["_objectAssign","require","_curry2","mergeLeft","l","r","module","exports"],"mappings":"AAAA,IAAIA,aAAa,GAAgBC,OAAO,4BAAxC;;AAEA,IAAIC,OAAO,GAAgBD,OAAO,sBAAlC;;AA0BA,IAAIE,SAAS,GAAgBD,OAAO,CAAC,SAASC,SAAT,CAAmBC,CAAnB,EAAsBC,CAAtB,EAAyB;AAC5D,SAAOL,aAAa,CAAC,EAAD,EAAKK,CAAL,EAAQD,CAAR,CAApB;AACD,CAFmC,CAApC;;AAGAE,MAAM,CAACC,OAAP,GAAiBJ,SAAjB","sourcesContent":["var _objectAssign = /*#__PURE__*/require('./internal/_objectAssign');\n\nvar _curry2 = /*#__PURE__*/require('./internal/_curry2');\n\n/**\n * Create a new object with the own properties of the first object merged with\n * the own properties of the second object. If a key exists in both objects,\n * the value from the first object will be used.\n *\n * @func\n * @memberOf R\n * @category Object\n * @sig {k: v} -> {k: v} -> {k: v}\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.mergeRight, R.mergeDeepLeft, R.mergeWith, R.mergeWithKey\n * @example\n *\n *      R.mergeLeft({ 'age': 40 }, { 'name': 'fred', 'age': 10 });\n *      //=> { 'name': 'fred', 'age': 40 }\n *\n *      const resetToDefault = R.mergeLeft({x: 0});\n *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}\n * @symb R.mergeLeft(a, b) = {...b, ...a}\n */\n\n\nvar mergeLeft = /*#__PURE__*/_curry2(function mergeLeft(l, r) {\n  return _objectAssign({}, r, l);\n});\nmodule.exports = mergeLeft;"]}
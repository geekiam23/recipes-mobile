ba900021e9a2b1d2502d001ecaca04ea
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var debug = require('debug')('nock.request_overrider');

var _require = require('http'),
    IncomingMessage = _require.IncomingMessage,
    ClientRequest = _require.ClientRequest,
    originalHttpRequest = _require.request;

var _require2 = require('https'),
    originalHttpsRequest = _require2.request;

var propagate = require('propagate');

var common = require("./common");

var globalEmitter = require("./global_emitter");

var Socket = require("./socket");

var _require3 = require("./playback_interceptor"),
    playbackInterceptor = _require3.playbackInterceptor;

function socketOnClose(req) {
  debug('socket close');

  if (!req.res && !req.socket._hadError) {
    req.socket._hadError = true;
    var err = new Error('socket hang up');
    err.code = 'ECONNRESET';
    req.emit('error', err);
  }

  req.emit('close');
}

var InterceptedRequestRouter = function () {
  function InterceptedRequestRouter(_ref) {
    var _this = this;

    var req = _ref.req,
        options = _ref.options,
        interceptors = _ref.interceptors;
    (0, _classCallCheck2.default)(this, InterceptedRequestRouter);
    this.req = req;
    this.options = (0, _extends2.default)({}, options, {
      headers: common.headersFieldNamesToLowerCase(options.headers || {})
    });
    this.interceptors = interceptors;
    this.socket = new Socket(options);

    if (options.timeout) {
      this.socket.setTimeout(options.timeout);
    }

    this.response = new IncomingMessage(this.socket);
    this.requestBodyBuffers = [];
    this.playbackStarted = false;
    this.readyToStartPlaybackOnSocketEvent = false;
    this.attachToReq();
    process.nextTick(function () {
      return _this.connectSocket();
    });
  }

  (0, _createClass2.default)(InterceptedRequestRouter, [{
    key: "attachToReq",
    value: function attachToReq() {
      var _this2 = this;

      var req = this.req,
          options = this.options;

      for (var _i = 0, _Object$entries = Object.entries(options.headers); _i < _Object$entries.length; _i++) {
        var _ref2 = _Object$entries[_i];

        var _ref3 = (0, _slicedToArray2.default)(_ref2, 2);

        var name = _ref3[0];
        var val = _ref3[1];
        req.setHeader(name.toLowerCase(), val);
      }

      if (options.auth && !options.headers.authorization) {
        req.setHeader('authorization', "Basic " + Buffer.from(options.auth).toString('base64'));
      }

      req.path = options.path;
      req.method = options.method;

      req.write = function () {
        return _this2.handleWrite.apply(_this2, arguments);
      };

      req.end = function () {
        return _this2.handleEnd.apply(_this2, arguments);
      };

      req.flushHeaders = function () {
        return _this2.handleFlushHeaders.apply(_this2, arguments);
      };

      if (options.headers.expect === '100-continue') {
        common.setImmediate(function () {
          debug('continue');
          req.emit('continue');
        });
      }
    }
  }, {
    key: "connectSocket",
    value: function connectSocket() {
      var req = this.req,
          socket = this.socket;

      if (common.isRequestDestroyed(req)) {
        return;
      }

      req.socket = req.connection = socket;
      propagate(['error', 'timeout'], socket, req);
      socket.on('close', function () {
        return socketOnClose(req);
      });
      socket.connecting = false;
      req.emit('socket', socket);
      socket.emit('connect');

      if (socket.authorized) {
        socket.emit('secureConnect');
      }

      if (this.readyToStartPlaybackOnSocketEvent) {
        this.maybeStartPlayback();
      }
    }
  }, {
    key: "handleWrite",
    value: function handleWrite(buffer, encoding, callback) {
      debug('request write');
      var req = this.req;

      if (req.finished) {
        var err = new Error('write after end');
        err.code = 'ERR_STREAM_WRITE_AFTER_END';
        process.nextTick(function () {
          return req.emit('error', err);
        });
        return true;
      }

      if (req.socket && req.socket.destroyed) {
        return false;
      }

      if (!buffer || buffer.length === 0) {
        return true;
      }

      if (!Buffer.isBuffer(buffer)) {
        buffer = Buffer.from(buffer, encoding);
      }

      this.requestBodyBuffers.push(buffer);

      if (typeof callback === 'function') {
        callback();
      }

      common.setImmediate(function () {
        req.emit('drain');
      });
      return false;
    }
  }, {
    key: "handleEnd",
    value: function handleEnd(chunk, encoding, callback) {
      debug('request end');
      var req = this.req;

      if (typeof chunk === 'function') {
        callback = chunk;
        chunk = null;
      } else if (typeof encoding === 'function') {
        callback = encoding;
        encoding = null;
      }

      if (typeof callback === 'function') {
        req.once('finish', callback);
      }

      if (chunk) {
        req.write(chunk, encoding);
      }

      req.finished = true;
      this.maybeStartPlayback();
      return req;
    }
  }, {
    key: "handleFlushHeaders",
    value: function handleFlushHeaders() {
      debug('request flushHeaders');
      this.maybeStartPlayback();
    }
  }, {
    key: "setHostHeaderUsingInterceptor",
    value: function setHostHeaderUsingInterceptor(interceptor) {
      var req = this.req,
          options = this.options;
      var HOST_HEADER = 'host';

      if (interceptor.__nock_filteredScope && interceptor.__nock_scopeHost) {
        options.headers[HOST_HEADER] = interceptor.__nock_scopeHost;
        req.setHeader(HOST_HEADER, interceptor.__nock_scopeHost);
      } else {
        if (options.host && !req.getHeader(HOST_HEADER)) {
          var hostHeader = options.host;

          if (options.port === 80 || options.port === 443) {
            hostHeader = hostHeader.split(':')[0];
          }

          req.setHeader(HOST_HEADER, hostHeader);
        }
      }
    }
  }, {
    key: "maybeStartPlayback",
    value: function maybeStartPlayback() {
      var req = this.req,
          socket = this.socket,
          playbackStarted = this.playbackStarted;

      if (socket.connecting) {
        this.readyToStartPlaybackOnSocketEvent = true;
        return;
      }

      if (!common.isRequestDestroyed(req) && !playbackStarted) {
        this.startPlayback();
      }
    }
  }, {
    key: "startPlayback",
    value: function startPlayback() {
      var _this3 = this;

      debug('ending');
      this.playbackStarted = true;
      var req = this.req,
          response = this.response,
          socket = this.socket,
          options = this.options,
          interceptors = this.interceptors;
      (0, _extends2.default)(options, {
        path: req.path,
        headers: req.getHeaders(),
        protocol: options.proto + ":"
      });
      interceptors.forEach(function (interceptor) {
        _this3.setHostHeaderUsingInterceptor(interceptor);
      });
      var requestBodyBuffer = Buffer.concat(this.requestBodyBuffers);
      var requestBodyIsUtf8Representable = common.isUtf8Representable(requestBodyBuffer);
      var requestBodyString = requestBodyBuffer.toString(requestBodyIsUtf8Representable ? 'utf8' : 'hex');
      var matchedInterceptor = interceptors.find(function (i) {
        return i.match(req, options, requestBodyString);
      });

      if (matchedInterceptor) {
        matchedInterceptor.scope.logger('interceptor identified, starting mocking');
        matchedInterceptor.markConsumed();
        req.emit('finish');
        playbackInterceptor({
          req: req,
          socket: socket,
          options: options,
          requestBodyString: requestBodyString,
          requestBodyIsUtf8Representable: requestBodyIsUtf8Representable,
          response: response,
          interceptor: matchedInterceptor
        });
      } else {
        globalEmitter.emit('no match', req, options, requestBodyString);
        var allowUnmocked = interceptors.some(function (i) {
          return i.matchHostName(options) && i.options.allowUnmocked;
        });

        if (allowUnmocked && req instanceof ClientRequest) {
          var newReq = options.proto === 'https' ? originalHttpsRequest(options) : originalHttpRequest(options);
          propagate(newReq, req);
          newReq.end(requestBodyBuffer);
        } else {
          var reqStr = common.stringifyRequest(options, requestBodyString);
          var err = new Error("Nock: No match for request " + reqStr);
          err.code = 'ERR_NOCK_NO_MATCH';
          err.statusCode = err.status = 404;
          req.destroy(err);
        }
      }
    }
  }]);
  return InterceptedRequestRouter;
}();

module.exports = {
  InterceptedRequestRouter: InterceptedRequestRouter
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
250ec67697c628f6a7d610089718d3d8
'use strict';

function propagate(events, source, dest) {
  if (arguments.length < 3) {
    dest = source;
    source = events;
    events = undefined;
  }

  var eventsIsObject = typeof events === 'object';
  if (events && !eventsIsObject) events = [events];

  if (eventsIsObject) {
    return explicitPropagate(events, source, dest);
  }

  var shouldPropagate = function shouldPropagate(eventName) {
    return events === undefined || events.includes(eventName);
  };

  var oldEmit = source.emit;

  source.emit = function (eventName) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var oldEmitHadListeners = oldEmit.call.apply(oldEmit, [source, eventName].concat(args));
    var destEmitHadListeners = false;

    if (shouldPropagate(eventName)) {
      var _dest;

      destEmitHadListeners = (_dest = dest).emit.apply(_dest, [eventName].concat(args));
    }

    return oldEmitHadListeners || destEmitHadListeners;
  };

  function end() {
    source.emit = oldEmit;
  }

  return {
    end: end
  };
}

module.exports = propagate;

function explicitPropagate(events, source, dest) {
  var eventsIn;
  var eventsOut;

  if (Array.isArray(events)) {
    eventsIn = events;
    eventsOut = events;
  } else {
    eventsIn = Object.keys(events);
    eventsOut = eventsIn.map(function (key) {
      return events[key];
    });
  }

  var listeners = eventsOut.map(function (event) {
    return function () {
      var args = Array.prototype.slice.call(arguments);
      args.unshift(event);
      dest.emit.apply(dest, args);
    };
  });
  listeners.forEach(register);
  return {
    end: end
  };

  function register(listener, i) {
    source.on(eventsIn[i], listener);
  }

  function unregister(listener, i) {
    source.removeListener(eventsIn[i], listener);
  }

  function end() {
    listeners.forEach(unregister);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInByb3BhZ2F0ZSIsImV2ZW50cyIsInNvdXJjZSIsImRlc3QiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJldmVudHNJc09iamVjdCIsImV4cGxpY2l0UHJvcGFnYXRlIiwic2hvdWxkUHJvcGFnYXRlIiwiZXZlbnROYW1lIiwiaW5jbHVkZXMiLCJvbGRFbWl0IiwiZW1pdCIsImFyZ3MiLCJvbGRFbWl0SGFkTGlzdGVuZXJzIiwiY2FsbCIsImRlc3RFbWl0SGFkTGlzdGVuZXJzIiwiZW5kIiwibW9kdWxlIiwiZXhwb3J0cyIsImV2ZW50c0luIiwiZXZlbnRzT3V0IiwiQXJyYXkiLCJpc0FycmF5IiwiT2JqZWN0Iiwia2V5cyIsIm1hcCIsImtleSIsImxpc3RlbmVycyIsImV2ZW50IiwicHJvdG90eXBlIiwic2xpY2UiLCJ1bnNoaWZ0IiwiYXBwbHkiLCJmb3JFYWNoIiwicmVnaXN0ZXIiLCJsaXN0ZW5lciIsImkiLCJvbiIsInVucmVnaXN0ZXIiLCJyZW1vdmVMaXN0ZW5lciJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsU0FBU0EsU0FBVCxDQUFtQkMsTUFBbkIsRUFBMkJDLE1BQTNCLEVBQW1DQyxJQUFuQyxFQUF5QztBQUN2QyxNQUFJQyxTQUFTLENBQUNDLE1BQVYsR0FBbUIsQ0FBdkIsRUFBMEI7QUFDeEJGLElBQUFBLElBQUksR0FBR0QsTUFBUDtBQUNBQSxJQUFBQSxNQUFNLEdBQUdELE1BQVQ7QUFDQUEsSUFBQUEsTUFBTSxHQUFHSyxTQUFUO0FBQ0Q7O0FBR0QsTUFBTUMsY0FBYyxHQUFHLE9BQU9OLE1BQVAsS0FBa0IsUUFBekM7QUFDQSxNQUFJQSxNQUFNLElBQUksQ0FBQ00sY0FBZixFQUErQk4sTUFBTSxHQUFHLENBQUNBLE1BQUQsQ0FBVDs7QUFFL0IsTUFBSU0sY0FBSixFQUFvQjtBQUNsQixXQUFPQyxpQkFBaUIsQ0FBQ1AsTUFBRCxFQUFTQyxNQUFULEVBQWlCQyxJQUFqQixDQUF4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a0JLLFVBQWxCO0FBQ0Q7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5mdW5jdGlvbiBwcm9wYWdhdGUoZXZlbnRzLCBzb3VyY2UsIGRlc3QpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSB7XG4gICAgZGVzdCA9IHNvdXJjZVxuICAgIHNvdXJjZSA9IGV2ZW50c1xuICAgIGV2ZW50cyA9IHVuZGVmaW5lZFxuICB9XG5cbiAgLy8gZXZlbnRzIHNob3VsZCBiZSBhbiBhcnJheSBvciBvYmplY3RcbiAgY29uc3QgZXZlbnRzSXNPYmplY3QgPSB0eXBlb2YgZXZlbnRzID09PSAnb2JqZWN0J1xuICBpZiAoZXZlbnRzICYmICFldmVudHNJc09iamVjdCkgZXZlbnRzID0gW2V2ZW50c11cblxuICBpZiAoZXZlbnRzSXNPYmplY3QpIHtcbiAgICByZXR1cm4gZXhwbGljaXRQcm9wYWdhdGUoZXZlbnRzLCBzb3VyY2UsIGRlc3QpXG4gIH1cblxuICBjb25zdCBzaG91bGRQcm9wYWdhdGUgPSBldmVudE5hbWUgPT5cbiAgICBldmVudHMgPT09IHVuZGVmaW5lZCB8fCBldmVudHMuaW5jbHVkZXMoZXZlbnROYW1lKVxuXG4gIGNvbnN0IG9sZEVtaXQgPSBzb3VyY2UuZW1pdFxuXG4gIC8vIFJldHVybnMgdHJ1ZSBpZiB0aGUgZXZlbnQgaGFkIGxpc3RlbmVycywgZmFsc2Ugb3RoZXJ3aXNlLlxuICAvLyBodHRwczovL25vZGVqcy5vcmcvYXBpL2V2ZW50cy5odG1sI2V2ZW50c19lbWl0dGVyX2VtaXRfZXZlbnRuYW1lX2FyZ3NcbiAgc291cmNlLmVtaXQgPSAoZXZlbnROYW1lLCAuLi5hcmdzKSA9PiB7XG4gICAgY29uc3Qgb2xkRW1pdEhhZExpc3RlbmVycyA9IG9sZEVtaXQuY2FsbChzb3VyY2UsIGV2ZW50TmFtZSwgLi4uYXJncylcblxuICAgIGxldCBkZXN0RW1pdEhhZExpc3RlbmVycyA9IGZhbHNlXG4gICAgaWYgKHNob3VsZFByb3BhZ2F0ZShldmVudE5hbWUpKSB7XG4gICAgICBkZXN0RW1pdEhhZExpc3RlbmVycyA9IGRlc3QuZW1pdChldmVudE5hbWUsIC4uLmFyZ3MpXG4gICAgfVxuXG4gICAgcmV0dXJuIG9sZEVtaXRIYWRMaXN0ZW5lcnMgfHwgZGVzdEVtaXRIYWRMaXN0ZW5lcnNcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuZCgpIHtcbiAgICBzb3VyY2UuZW1pdCA9IG9sZEVtaXRcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZW5kLFxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcHJvcGFnYXRlXG5cbmZ1bmN0aW9uIGV4cGxpY2l0UHJvcGFnYXRlKGV2ZW50cywgc291cmNlLCBkZXN0KSB7XG4gIGxldCBldmVudHNJblxuICBsZXQgZXZlbnRzT3V0XG4gIGlmIChBcnJheS5pc0FycmF5KGV2ZW50cykpIHtcbiAgICBldmVudHNJbiA9IGV2ZW50c1xuICAgIGV2ZW50c091dCA9IGV2ZW50c1xuICB9IGVsc2Uge1xuICAgIGV2ZW50c0luID0gT2JqZWN0LmtleXMoZXZlbnRzKVxuICAgIGV2ZW50c091dCA9IGV2ZW50c0luLm1hcChmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBldmVudHNba2V5XVxuICAgIH0pXG4gIH1cblxuICBjb25zdCBsaXN0ZW5lcnMgPSBldmVudHNPdXQubWFwKGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgY29uc3QgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cylcbiAgICAgIGFyZ3MudW5zaGlmdChldmVudClcbiAgICAgIGRlc3QuZW1pdC5hcHBseShkZXN0LCBhcmdzKVxuICAgIH1cbiAgfSlcblxuICBsaXN0ZW5lcnMuZm9yRWFjaChyZWdpc3RlcilcblxuICByZXR1cm4ge1xuICAgIGVuZCxcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlZ2lzdGVyKGxpc3RlbmVyLCBpKSB7XG4gICAgc291cmNlLm9uKGV2ZW50c0luW2ldLCBsaXN0ZW5lcilcbiAgfVxuXG4gIGZ1bmN0aW9uIHVucmVnaXN0ZXIobGlzdGVuZXIsIGkpIHtcbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoZXZlbnRzSW5baV0sIGxpc3RlbmVyKVxuICB9XG5cbiAgZnVuY3Rpb24gZW5kKCkge1xuICAgIGxpc3RlbmVycy5mb3JFYWNoKHVucmVnaXN0ZXIpXG4gIH1cbn1cbiJdfQ==
{"version":3,"sources":["matches.js"],"names":["Object","defineProperty","exports","value","fuzzyMatches","matches","getDefaultNormalizer","makeNormalizer","assertNotNullOrUndefined","matcher","undefined","Error","textToMatch","node","normalizer","normalizedText","toLowerCase","includes","toString","test","Function","RegExp","String","trim","collapseWhitespace","text","replace"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fuzzyMatches = fuzzyMatches;\nexports.matches = matches;\nexports.getDefaultNormalizer = getDefaultNormalizer;\nexports.makeNormalizer = makeNormalizer;\n\nfunction assertNotNullOrUndefined(matcher) {\n  if (matcher === null || matcher === undefined) {\n    throw new Error( // eslint-disable-next-line @typescript-eslint/restrict-template-expressions -- implicitly converting `T` to `string`\n    `It looks like ${matcher} was passed instead of a matcher. Did you do something like getByText(${matcher})?`);\n  }\n}\n\nfunction fuzzyMatches(textToMatch, node, matcher, normalizer) {\n  if (typeof textToMatch !== 'string') {\n    return false;\n  }\n\n  assertNotNullOrUndefined(matcher);\n  const normalizedText = normalizer(textToMatch);\n\n  if (typeof matcher === 'string' || typeof matcher === 'number') {\n    return normalizedText.toLowerCase().includes(matcher.toString().toLowerCase());\n  } else if (typeof matcher === 'function') {\n    return matcher(normalizedText, node);\n  } else {\n    return matcher.test(normalizedText);\n  }\n}\n\nfunction matches(textToMatch, node, matcher, normalizer) {\n  if (typeof textToMatch !== 'string') {\n    return false;\n  }\n\n  assertNotNullOrUndefined(matcher);\n  const normalizedText = normalizer(textToMatch);\n\n  if (matcher instanceof Function) {\n    return matcher(normalizedText, node);\n  } else if (matcher instanceof RegExp) {\n    return matcher.test(normalizedText);\n  } else {\n    return normalizedText === String(matcher);\n  }\n}\n\nfunction getDefaultNormalizer({\n  trim = true,\n  collapseWhitespace = true\n} = {}) {\n  return text => {\n    let normalizedText = text;\n    normalizedText = trim ? normalizedText.trim() : normalizedText;\n    normalizedText = collapseWhitespace ? normalizedText.replace(/\\s+/g, ' ') : normalizedText;\n    return normalizedText;\n  };\n}\n/**\n * Constructs a normalizer to pass to functions in matches.js\n * @param {boolean|undefined} trim The user-specified value for `trim`, without\n * any defaulting having been applied\n * @param {boolean|undefined} collapseWhitespace The user-specified value for\n * `collapseWhitespace`, without any defaulting having been applied\n * @param {Function|undefined} normalizer The user-specified normalizer\n * @returns {Function} A normalizer\n */\n\n\nfunction makeNormalizer({\n  trim,\n  collapseWhitespace,\n  normalizer\n}) {\n  if (normalizer) {\n    // User has specified a custom normalizer\n    if (typeof trim !== 'undefined' || typeof collapseWhitespace !== 'undefined') {\n      // They've also specified a value for trim or collapseWhitespace\n      throw new Error('trim and collapseWhitespace are not supported with a normalizer. ' + 'If you want to use the default trim and collapseWhitespace logic in your normalizer, ' + 'use \"getDefaultNormalizer({trim, collapseWhitespace})\" and compose that into your normalizer');\n    }\n\n    return normalizer;\n  } else {\n    // No custom normalizer specified. Just use default.\n    return getDefaultNormalizer({\n      trim,\n      collapseWhitespace\n    });\n  }\n}"]}
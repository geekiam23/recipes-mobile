840146b2efa492d6a8d5d803120c5fa7
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fuzzyMatches = fuzzyMatches;
exports.matches = matches;
exports.getDefaultNormalizer = getDefaultNormalizer;
exports.makeNormalizer = makeNormalizer;

function assertNotNullOrUndefined(matcher) {
  if (matcher === null || matcher === undefined) {
    throw new Error("It looks like " + matcher + " was passed instead of a matcher. Did you do something like getByText(" + matcher + ")?");
  }
}

function fuzzyMatches(textToMatch, node, matcher, normalizer) {
  if (typeof textToMatch !== 'string') {
    return false;
  }

  assertNotNullOrUndefined(matcher);
  var normalizedText = normalizer(textToMatch);

  if (typeof matcher === 'string' || typeof matcher === 'number') {
    return normalizedText.toLowerCase().includes(matcher.toString().toLowerCase());
  } else if (typeof matcher === 'function') {
    return matcher(normalizedText, node);
  } else {
    return matcher.test(normalizedText);
  }
}

function matches(textToMatch, node, matcher, normalizer) {
  if (typeof textToMatch !== 'string') {
    return false;
  }

  assertNotNullOrUndefined(matcher);
  var normalizedText = normalizer(textToMatch);

  if (matcher instanceof Function) {
    return matcher(normalizedText, node);
  } else if (matcher instanceof RegExp) {
    return matcher.test(normalizedText);
  } else {
    return normalizedText === String(matcher);
  }
}

function getDefaultNormalizer() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$trim = _ref.trim,
      trim = _ref$trim === void 0 ? true : _ref$trim,
      _ref$collapseWhitespa = _ref.collapseWhitespace,
      collapseWhitespace = _ref$collapseWhitespa === void 0 ? true : _ref$collapseWhitespa;

  return function (text) {
    var normalizedText = text;
    normalizedText = trim ? normalizedText.trim() : normalizedText;
    normalizedText = collapseWhitespace ? normalizedText.replace(/\s+/g, ' ') : normalizedText;
    return normalizedText;
  };
}

function makeNormalizer(_ref2) {
  var trim = _ref2.trim,
      collapseWhitespace = _ref2.collapseWhitespace,
      normalizer = _ref2.normalizer;

  if (normalizer) {
    if (typeof trim !== 'undefined' || typeof collapseWhitespace !== 'undefined') {
      throw new Error('trim and collapseWhitespace are not supported with a normalizer. ' + 'If you want to use the default trim and collapseWhitespace logic in your normalizer, ' + 'use "getDefaultNormalizer({trim, collapseWhitespace})" and compose that into your normalizer');
    }

    return normalizer;
  } else {
    return getDefaultNormalizer({
      trim: trim,
      collapseWhitespace: collapseWhitespace
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hdGNoZXMuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJmdXp6eU1hdGNoZXMiLCJtYXRjaGVzIiwiZ2V0RGVmYXVsdE5vcm1hbGl6ZXIiLCJtYWtlTm9ybWFsaXplciIsImFzc2VydE5vdE51bGxPclVuZGVmaW5lZCIsIm1hdGNoZXIiLCJ1bmRlZmluZWQiLCJFcnJvciIsInRleHRUb01hdGNoIiwibm9kZSIsIm5vcm1hbGl6ZXIiLCJub3JtYWxpemVkVGV4dCIsInRvTG93ZXJDYXNlIiwiaW5jbHVkZXMiLCJ0b1N0cmluZyIsInRlc3QiLCJGdW5jdGlvbiIsIlJlZ0V4cCIsIlN0cmluZyIsInRyaW0iLCJjb2xsYXBzZVdoaXRlc3BhY2UiLCJ0ZXh0IiwicmVwbGFjZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLEVBQUFBLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLFlBQVIsR0FBdUJBLFlBQXZCO0FBQ0FGLE9BQU8sQ0FBQ0csT0FBUixHQUFrQkEsT0FBbEI7QUFDQUgsT0FBTyxDQUFDSSxvQkFBUixHQUErQkEsb0JBQS9CO0FBQ0FKLE9BQU8sQ0FBQ0ssY0FBUixHQUF5QkEsY0FBekI7O0FBRUEsU0FBU0Msd0JBQVQsQ0FBa0NDLE9BQWxDLEVBQTJDO0FBQ3pDLE1BQUlBLE9BQU8sS0FBSyxJQUFaLElBQW9CQSxPQUFPLEtBQUtDLFNBQXBDLEVBQStDO0FBQzdDLFVBQU0sSUFBSUMsS0FBSixvQkFDV0YsT0FEWCw4RUFDMkZBLE9BRDNGLFFBQU47QUFFRDtBQUNGOztBQUVELFNBQVNMLFlBQVQsQ0FBc0JRLFdBQXRCLEVBQW1DQyxJQUFuQyxFQUF5Q0osT0FBekMsRUFBa0RLLFVBQWxELEVBQThEO0FBQzVELE1BQUksT0FBT0YsV0FBUCxLQUF1QixRQUEzQixFQUFxQztBQUNuQyxXQUFPLEtBQVA7QUFDRDs7QUFFREosRUFBQUEsd0JBQXdCLENBQUNDLE9BQUQsQ0FBeEI7QUFDQSxNQUFNTSxjQUFjLEdBQUdELFVBQVUsQ0FBQ0YsV0FBRCxDQUFqQzs7QUFFQSxNQUFJLE9BQU9ILE9BQVAsS0FBbUIsUUFBbkIsSUFBK0IsT0FBT0EsT0FBUCxLQUFtQixRQUF0RCxFQUFnRTtBQUM5RCxXQUFPTSxjQUFjLENBQUNDLFdBQWYsR0FBNkJDLFFBQTdCLENBQXNDUixPQUFPLENBQUNTLFFBQVIsR0FBbUJGLFdBQW5CLEVBQXRDLENBQVA7QUFDRCxHQUZELE1BRU8sSUFBSSxPQUFPUCxPQUFQLEtBQW1CLFVBQXZCLEVBQW1DO0FBQ3hDLFdBQU9BLE9BQU8sQ0FBQ00sY0FBRCxFQUFpQkYsSUFBakIsQ0FBZDtBQUNELEdBRk0sTUFFQTtBQUNMLFdBQU9KLE9BQU8sQ0FBQ1UsSUFBUixDQUFhSixjQUFiLENBQVA7QUFDRDtBQUNGOztBQUVELFNBQVNWLE9BQVQsQ0FBaUJPLFdBQWpCLEVBQThCQyxJQUE5QixFQUFvQ0osT0FBcEMsRUFBNkNLLFVBQTdDLEVBQXlEO0FBQ3ZELE1BQUksT0FBT0YsV0FBUCxLQUF1QixRQUEzQixFQUFxQztBQUNuQyxXQUFPLEtBQVA7QUFDRDs7QUFFREosRUFBQUEsd0JBQXdCLENBQUNDLE9BQUQsQ0FBeEI7QUFDQSxNQUFNTSxjQUFjLEdBQUdELFVBQVUsQ0FBQ0YsV0FBRCxDQUFqQzs7QUFFQSxNQUFJSCxPQUFPLFlBQVlXLFFBQXZCLEVBQWlDO0FBQy9CLFdBQU9YLE9BQU8sQ0FBQ00sY0FBRCxFQUFpQkYsSUFBakIsQ0FBZDtBQUNELEdBRkQsTUFFTyxJQUFJSixPQUFPLFlBQVlZLE1BQXZCLEVBQStCO0FBQ3BDLFdBQU9aLE9BQU8sQ0FBQ1UsSUFBUixDQUFhSixjQUFiLENBQVA7QUFDRCxHQUZNLE1BRUE7QUFDTCxXQUFPQSxjQUFjLEtBQUtPLE1BQU0sQ0FBQ2IsT0FBRCxDQUFoQztBQUNEO0FBQ0Y7O0FBRUQsU0FBU0gsb0JBQVQsR0FHUTtBQUFBLGlGQUFKLEVBQUk7QUFBQSx1QkFGTmlCLElBRU07QUFBQSxNQUZOQSxJQUVNLDBCQUZDLElBRUQ7QUFBQSxtQ0FETkMsa0JBQ007QUFBQSxNQUROQSxrQkFDTSxzQ0FEZSxJQUNmOztBQUNOLFNBQU8sVUFBQUMsSUFBSSxFQUFJO0FBQ2IsUUFBSVYsY0FBYyxHQUFHVSxJQUFyQjtBQUNBVixJQUFBQSxjQUFjLEdBQUdRLElBQUksR0FBR1IsY0FBYyxDQUFDUSxJQUFmLEVBQUgsR0FBMkJSLGNBQWhEO0FBQ0FBLElBQUFBLGNBQWMsR0FBR1Msa0JBQWtCLEdBQUdULGNBQWMsQ0FBQ1csT0FBZixDQUF1QixNQUF2QixFQUErQixHQUEvQixDQUFILEdBQXlDWCxjQUE1RTtBQUNBLFdBQU9BLGNBQVA7QUFDRCxHQUxEO0FBTUQ7O0FBWUQsU0FBU1IsY0FBVCxRQUlHO0FBQUEsTUFIRGdCLElBR0MsU0FIREEsSUFHQztBQUFBLE1BRkRDLGtCQUVDLFNBRkRBLGtCQUVDO0FBQUEsTUFERFYsVUFDQyxTQUREQSxVQUNDOztBQUNELE1BQUlBLFVBQUosRUFBZ0I7QUFFZCxRQUFJLE9BQU9TLElBQVAsS0FBZ0IsV0FBaEIsSUFBK0IsT0FBT0Msa0JBQVAsS0FBOEIsV0FBakUsRUFBOEU7QUFFNUUsWUFBTSxJQUFJYixLQUFKLENBQVUsc0VBQXNFLHVGQUF0RSxHQUFnSyw4RkFBMUssQ0FBTjtBQUNEOztBQUVELFdBQU9HLFVBQVA7QUFDRCxHQVJELE1BUU87QUFFTCxXQUFPUixvQkFBb0IsQ0FBQztBQUMxQmlCLE1BQUFBLElBQUksRUFBSkEsSUFEMEI7QUFFMUJDLE1BQUFBLGtCQUFrQixFQUFsQkE7QUFGMEIsS0FBRCxDQUEzQjtBQUlEO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZnV6enlNYXRjaGVzID0gZnV6enlNYXRjaGVzO1xuZXhwb3J0cy5tYXRjaGVzID0gbWF0Y2hlcztcbmV4cG9ydHMuZ2V0RGVmYXVsdE5vcm1hbGl6ZXIgPSBnZXREZWZhdWx0Tm9ybWFsaXplcjtcbmV4cG9ydHMubWFrZU5vcm1hbGl6ZXIgPSBtYWtlTm9ybWFsaXplcjtcblxuZnVuY3Rpb24gYXNzZXJ0Tm90TnVsbE9yVW5kZWZpbmVkKG1hdGNoZXIpIHtcbiAgaWYgKG1hdGNoZXIgPT09IG51bGwgfHwgbWF0Y2hlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3Jlc3RyaWN0LXRlbXBsYXRlLWV4cHJlc3Npb25zIC0tIGltcGxpY2l0bHkgY29udmVydGluZyBgVGAgdG8gYHN0cmluZ2BcbiAgICBgSXQgbG9va3MgbGlrZSAke21hdGNoZXJ9IHdhcyBwYXNzZWQgaW5zdGVhZCBvZiBhIG1hdGNoZXIuIERpZCB5b3UgZG8gc29tZXRoaW5nIGxpa2UgZ2V0QnlUZXh0KCR7bWF0Y2hlcn0pP2ApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZ1enp5TWF0Y2hlcyh0ZXh0VG9NYXRjaCwgbm9kZSwgbWF0Y2hlciwgbm9ybWFsaXplcikge1xuICBpZiAodHlwZW9mIHRleHRUb01hdGNoICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGFzc2VydE5vdE51bGxPclVuZGVmaW5lZChtYXRjaGVyKTtcbiAgY29uc3Qgbm9ybWFsaXplZFRleHQgPSBub3JtYWxpemVyKHRleHRUb01hdGNoKTtcblxuICBpZiAodHlwZW9mIG1hdGNoZXIgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBtYXRjaGVyID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBub3JtYWxpemVkVGV4dC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKG1hdGNoZXIudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgbWF0Y2hlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBtYXRjaGVyKG5vcm1hbGl6ZWRUZXh0LCBub2RlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbWF0Y2hlci50ZXN0KG5vcm1hbGl6ZWRUZXh0KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXRjaGVzKHRleHRUb01hdGNoLCBub2RlLCBtYXRjaGVyLCBub3JtYWxpemVyKSB7XG4gIGlmICh0eXBlb2YgdGV4dFRvTWF0Y2ggIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgYXNzZXJ0Tm90TnVsbE9yVW5kZWZpbmVkKG1hdGNoZXIpO1xuICBjb25zdCBub3JtYWxpemVkVGV4dCA9IG5vcm1hbGl6ZXIodGV4dFRvTWF0Y2gpO1xuXG4gIGlmIChtYXRjaGVyIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICByZXR1cm4gbWF0Y2hlcihub3JtYWxpemVkVGV4dCwgbm9kZSk7XG4gIH0gZWxzZSBpZiAobWF0Y2hlciBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiBtYXRjaGVyLnRlc3Qobm9ybWFsaXplZFRleHQpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBub3JtYWxpemVkVGV4dCA9PT0gU3RyaW5nKG1hdGNoZXIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHROb3JtYWxpemVyKHtcbiAgdHJpbSA9IHRydWUsXG4gIGNvbGxhcHNlV2hpdGVzcGFjZSA9IHRydWVcbn0gPSB7fSkge1xuICByZXR1cm4gdGV4dCA9PiB7XG4gICAgbGV0IG5vcm1hbGl6ZWRUZXh0ID0gdGV4dDtcbiAgICBub3JtYWxpemVkVGV4dCA9IHRyaW0gPyBub3JtYWxpemVkVGV4dC50cmltKCkgOiBub3JtYWxpemVkVGV4dDtcbiAgICBub3JtYWxpemVkVGV4dCA9IGNvbGxhcHNlV2hpdGVzcGFjZSA/IG5vcm1hbGl6ZWRUZXh0LnJlcGxhY2UoL1xccysvZywgJyAnKSA6IG5vcm1hbGl6ZWRUZXh0O1xuICAgIHJldHVybiBub3JtYWxpemVkVGV4dDtcbiAgfTtcbn1cbi8qKlxuICogQ29uc3RydWN0cyBhIG5vcm1hbGl6ZXIgdG8gcGFzcyB0byBmdW5jdGlvbnMgaW4gbWF0Y2hlcy5qc1xuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gdHJpbSBUaGUgdXNlci1zcGVjaWZpZWQgdmFsdWUgZm9yIGB0cmltYCwgd2l0aG91dFxuICogYW55IGRlZmF1bHRpbmcgaGF2aW5nIGJlZW4gYXBwbGllZFxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gY29sbGFwc2VXaGl0ZXNwYWNlIFRoZSB1c2VyLXNwZWNpZmllZCB2YWx1ZSBmb3JcbiAqIGBjb2xsYXBzZVdoaXRlc3BhY2VgLCB3aXRob3V0IGFueSBkZWZhdWx0aW5nIGhhdmluZyBiZWVuIGFwcGxpZWRcbiAqIEBwYXJhbSB7RnVuY3Rpb258dW5kZWZpbmVkfSBub3JtYWxpemVyIFRoZSB1c2VyLXNwZWNpZmllZCBub3JtYWxpemVyXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgbm9ybWFsaXplclxuICovXG5cblxuZnVuY3Rpb24gbWFrZU5vcm1hbGl6ZXIoe1xuICB0cmltLFxuICBjb2xsYXBzZVdoaXRlc3BhY2UsXG4gIG5vcm1hbGl6ZXJcbn0pIHtcbiAgaWYgKG5vcm1hbGl6ZXIpIHtcbiAgICAvLyBVc2VyIGhhcyBzcGVjaWZpZWQgYSBjdXN0b20gbm9ybWFsaXplclxuICAgIGlmICh0eXBlb2YgdHJpbSAhPT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIGNvbGxhcHNlV2hpdGVzcGFjZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFRoZXkndmUgYWxzbyBzcGVjaWZpZWQgYSB2YWx1ZSBmb3IgdHJpbSBvciBjb2xsYXBzZVdoaXRlc3BhY2VcbiAgICAgIHRocm93IG5ldyBFcnJvcigndHJpbSBhbmQgY29sbGFwc2VXaGl0ZXNwYWNlIGFyZSBub3Qgc3VwcG9ydGVkIHdpdGggYSBub3JtYWxpemVyLiAnICsgJ0lmIHlvdSB3YW50IHRvIHVzZSB0aGUgZGVmYXVsdCB0cmltIGFuZCBjb2xsYXBzZVdoaXRlc3BhY2UgbG9naWMgaW4geW91ciBub3JtYWxpemVyLCAnICsgJ3VzZSBcImdldERlZmF1bHROb3JtYWxpemVyKHt0cmltLCBjb2xsYXBzZVdoaXRlc3BhY2V9KVwiIGFuZCBjb21wb3NlIHRoYXQgaW50byB5b3VyIG5vcm1hbGl6ZXInKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbm9ybWFsaXplcjtcbiAgfSBlbHNlIHtcbiAgICAvLyBObyBjdXN0b20gbm9ybWFsaXplciBzcGVjaWZpZWQuIEp1c3QgdXNlIGRlZmF1bHQuXG4gICAgcmV0dXJuIGdldERlZmF1bHROb3JtYWxpemVyKHtcbiAgICAgIHRyaW0sXG4gICAgICBjb2xsYXBzZVdoaXRlc3BhY2VcbiAgICB9KTtcbiAgfVxufSJdfQ==
272a21609f87f00d0f5243dc59d6a3f6
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toHaveProp = toHaveProp;

var _ramda = require("ramda");

var _jestMatcherUtils = require("jest-matcher-utils");

var _utils = require("./utils");

function printAttribute(name, value) {
  return value === undefined ? name : name + "=" + (0, _jestMatcherUtils.stringify)(value);
}

function getPropComment(name, value) {
  return value === undefined ? "element.hasProp(" + (0, _jestMatcherUtils.stringify)(name) + ")" : "element.getAttribute(" + (0, _jestMatcherUtils.stringify)(name) + ") === " + (0, _jestMatcherUtils.stringify)(value);
}

function toHaveProp(element, name, expectedValue) {
  var _this = this;

  (0, _utils.checkReactElement)(element, toHaveProp, this);
  var prop = element.props[name];
  var isDefined = expectedValue !== undefined;
  var hasProp = (0, _ramda.not)((0, _ramda.isNil)(prop));
  return {
    pass: isDefined ? hasProp && (0, _ramda.equals)(prop, expectedValue) : hasProp,
    message: function message() {
      var to = _this.isNot ? 'not to' : 'to';
      var receivedProp = hasProp ? printAttribute(name, prop) : null;
      var matcher = (0, _jestMatcherUtils.matcherHint)((_this.isNot ? '.not' : '') + ".toHaveProp", 'element', (0, _jestMatcherUtils.printExpected)(name), {
        secondArgument: isDefined ? (0, _jestMatcherUtils.printExpected)(expectedValue) : undefined,
        comment: getPropComment(name, expectedValue)
      });
      return (0, _utils.getMessage)(matcher, "Expected the element " + to + " have prop", printAttribute(name, expectedValue), 'Received', receivedProp);
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRvLWhhdmUtcHJvcC5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRvSGF2ZVByb3AiLCJfcmFtZGEiLCJyZXF1aXJlIiwiX2plc3RNYXRjaGVyVXRpbHMiLCJfdXRpbHMiLCJwcmludEF0dHJpYnV0ZSIsIm5hbWUiLCJ1bmRlZmluZWQiLCJzdHJpbmdpZnkiLCJnZXRQcm9wQ29tbWVudCIsImVsZW1lbnQiLCJleHBlY3RlZFZhbHVlIiwiX3RoaXMiLCJjaGVja1JlYWN0RWxlbWVudCIsInByb3AiLCJwcm9wcyIsImlzRGVmaW5lZCIsImhhc1Byb3AiLCJub3QiLCJpc05pbCIsInBhc3MiLCJlcXVhbHMiLCJtZXNzYWdlIiwidG8iLCJpc05vdCIsInJlY2VpdmVkUHJvcCIsIm1hdGNoZXIiLCJtYXRjaGVySGludCIsInByaW50RXhwZWN0ZWQiLCJzZWNvbmRBcmd1bWVudCIsImNvbW1lbnQiLCJnZXRNZXNzYWdlIl0sIm1hcHBpbmdzIjoiQUFBQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsRUFBQUEsS0FBSyxFQUFFO0FBRG9DLENBQTdDO0FBR0FELE9BQU8sQ0FBQ0UsVUFBUixHQUFxQkEsVUFBckI7O0FBRUEsSUFBSUMsTUFBTSxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFwQjs7QUFFQSxJQUFJQyxpQkFBaUIsR0FBR0QsT0FBTyxDQUFDLG9CQUFELENBQS9COztBQUVBLElBQUlFLE1BQU0sR0FBR0YsT0FBTyxXQUFwQjs7QUFFQSxTQUFTRyxjQUFULENBQXdCQyxJQUF4QixFQUE4QlAsS0FBOUIsRUFBcUM7QUFDbkMsU0FBT0EsS0FBSyxLQUFLUSxTQUFWLEdBQXNCRCxJQUF0QixHQUE2QkEsSUFBSSxHQUFHLEdBQVAsR0FBYSxDQUFDLEdBQUdILGlCQUFpQixDQUFDSyxTQUF0QixFQUFpQ1QsS0FBakMsQ0FBakQ7QUFDRDs7QUFFRCxTQUFTVSxjQUFULENBQXdCSCxJQUF4QixFQUE4QlAsS0FBOUIsRUFBcUM7QUFDbkMsU0FBT0EsS0FBSyxLQUFLUSxTQUFWLEdBQXNCLHFCQUFxQixDQUFDLEdBQUdKLGlCQUFpQixDQUFDSyxTQUF0QixFQUFpQ0YsSUFBakMsQ0FBckIsR0FBOEQsR0FBcEYsR0FBMEYsMEJBQTBCLENBQUMsR0FBR0gsaUJBQWlCLENBQUNLLFNBQXRCLEVBQWlDRixJQUFqQyxDQUExQixHQUFtRSxRQUFuRSxHQUE4RSxDQUFDLEdBQUdILGlCQUFpQixDQUFDSyxTQUF0QixFQUFpQ1QsS0FBakMsQ0FBL0s7QUFDRDs7QUFFRCxTQUFTQyxVQUFULENBQW9CVSxPQUFwQixFQUE2QkosSUFBN0IsRUFBbUNLLGFBQW5DLEVBQWtEO0FBQ2hELE1BQUlDLEtBQUssR0FBRyxJQUFaOztBQUVBLEdBQUMsR0FBR1IsTUFBTSxDQUFDUyxpQkFBWCxFQUE4QkgsT0FBOUIsRUFBdUNWLFVBQXZDLEVBQW1ELElBQW5EO0FBQ0EsTUFBSWMsSUFBSSxHQUFHSixPQUFPLENBQUNLLEtBQVIsQ0FBY1QsSUFBZCxDQUFYO0FBQ0EsTUFBSVUsU0FBUyxHQUFHTCxhQUFhLEtBQUtKLFNBQWxDO0FBQ0EsTUFBSVUsT0FBTyxHQUFHLENBQUMsR0FBR2hCLE1BQU0sQ0FBQ2lCLEdBQVgsRUFBZ0IsQ0FBQyxHQUFHakIsTUFBTSxDQUFDa0IsS0FBWCxFQUFrQkwsSUFBbEIsQ0FBaEIsQ0FBZDtBQUNBLFNBQU87QUFDTE0sSUFBQUEsSUFBSSxFQUFFSixTQUFTLEdBQUdDLE9BQU8sSUFBSSxDQUFDLEdBQUdoQixNQUFNLENBQUNvQixNQUFYLEVBQW1CUCxJQUFuQixFQUF5QkgsYUFBekIsQ0FBZCxHQUF3RE0sT0FEbEU7QUFFTEssSUFBQUEsT0FBTyxFQUFFLFNBQVNBLE9BQVQsR0FBbUI7QUFDMUIsVUFBSUMsRUFBRSxHQUFHWCxLQUFLLENBQUNZLEtBQU4sR0FBYyxRQUFkLEdBQXlCLElBQWxDO0FBQ0EsVUFBSUMsWUFBWSxHQUFHUixPQUFPLEdBQUdaLGNBQWMsQ0FBQ0MsSUFBRCxFQUFPUSxJQUFQLENBQWpCLEdBQWdDLElBQTFEO0FBQ0EsVUFBSVksT0FBTyxHQUFHLENBQUMsR0FBR3ZCLGlCQUFpQixDQUFDd0IsV0FBdEIsRUFBbUMsQ0FBQ2YsS0FBSyxDQUFDWSxLQUFOLEdBQWMsTUFBZCxHQUF1QixFQUF4QixJQUE4QixhQUFqRSxFQUFnRixTQUFoRixFQUEyRixDQUFDLEdBQUdyQixpQkFBaUIsQ0FBQ3lCLGFBQXRCLEVBQXFDdEIsSUFBckMsQ0FBM0YsRUFBdUk7QUFDbkp1QixRQUFBQSxjQUFjLEVBQUViLFNBQVMsR0FBRyxDQUFDLEdBQUdiLGlCQUFpQixDQUFDeUIsYUFBdEIsRUFBcUNqQixhQUFyQyxDQUFILEdBQXlESixTQURpRTtBQUVuSnVCLFFBQUFBLE9BQU8sRUFBRXJCLGNBQWMsQ0FBQ0gsSUFBRCxFQUFPSyxhQUFQO0FBRjRILE9BQXZJLENBQWQ7QUFJQSxhQUFPLENBQUMsR0FBR1AsTUFBTSxDQUFDMkIsVUFBWCxFQUF1QkwsT0FBdkIsRUFBZ0MsMEJBQTBCSCxFQUExQixHQUErQixZQUEvRCxFQUE2RWxCLGNBQWMsQ0FBQ0MsSUFBRCxFQUFPSyxhQUFQLENBQTNGLEVBQWtILFVBQWxILEVBQThIYyxZQUE5SCxDQUFQO0FBQ0Q7QUFWSSxHQUFQO0FBWUQiLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy50b0hhdmVQcm9wID0gdG9IYXZlUHJvcDtcblxudmFyIF9yYW1kYSA9IHJlcXVpcmUoXCJyYW1kYVwiKTtcblxudmFyIF9qZXN0TWF0Y2hlclV0aWxzID0gcmVxdWlyZShcImplc3QtbWF0Y2hlci11dGlsc1wiKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuXG5mdW5jdGlvbiBwcmludEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IG5hbWUgOiBuYW1lICsgXCI9XCIgKyAoMCwgX2plc3RNYXRjaGVyVXRpbHMuc3RyaW5naWZ5KSh2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIGdldFByb3BDb21tZW50KG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gXCJlbGVtZW50Lmhhc1Byb3AoXCIgKyAoMCwgX2plc3RNYXRjaGVyVXRpbHMuc3RyaW5naWZ5KShuYW1lKSArIFwiKVwiIDogXCJlbGVtZW50LmdldEF0dHJpYnV0ZShcIiArICgwLCBfamVzdE1hdGNoZXJVdGlscy5zdHJpbmdpZnkpKG5hbWUpICsgXCIpID09PSBcIiArICgwLCBfamVzdE1hdGNoZXJVdGlscy5zdHJpbmdpZnkpKHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gdG9IYXZlUHJvcChlbGVtZW50LCBuYW1lLCBleHBlY3RlZFZhbHVlKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgKDAsIF91dGlscy5jaGVja1JlYWN0RWxlbWVudCkoZWxlbWVudCwgdG9IYXZlUHJvcCwgdGhpcyk7XG4gIHZhciBwcm9wID0gZWxlbWVudC5wcm9wc1tuYW1lXTtcbiAgdmFyIGlzRGVmaW5lZCA9IGV4cGVjdGVkVmFsdWUgIT09IHVuZGVmaW5lZDtcbiAgdmFyIGhhc1Byb3AgPSAoMCwgX3JhbWRhLm5vdCkoKDAsIF9yYW1kYS5pc05pbCkocHJvcCkpO1xuICByZXR1cm4ge1xuICAgIHBhc3M6IGlzRGVmaW5lZCA/IGhhc1Byb3AgJiYgKDAsIF9yYW1kYS5lcXVhbHMpKHByb3AsIGV4cGVjdGVkVmFsdWUpIDogaGFzUHJvcCxcbiAgICBtZXNzYWdlOiBmdW5jdGlvbiBtZXNzYWdlKCkge1xuICAgICAgdmFyIHRvID0gX3RoaXMuaXNOb3QgPyAnbm90IHRvJyA6ICd0byc7XG4gICAgICB2YXIgcmVjZWl2ZWRQcm9wID0gaGFzUHJvcCA/IHByaW50QXR0cmlidXRlKG5hbWUsIHByb3ApIDogbnVsbDtcbiAgICAgIHZhciBtYXRjaGVyID0gKDAsIF9qZXN0TWF0Y2hlclV0aWxzLm1hdGNoZXJIaW50KSgoX3RoaXMuaXNOb3QgPyAnLm5vdCcgOiAnJykgKyBcIi50b0hhdmVQcm9wXCIsICdlbGVtZW50JywgKDAsIF9qZXN0TWF0Y2hlclV0aWxzLnByaW50RXhwZWN0ZWQpKG5hbWUpLCB7XG4gICAgICAgIHNlY29uZEFyZ3VtZW50OiBpc0RlZmluZWQgPyAoMCwgX2plc3RNYXRjaGVyVXRpbHMucHJpbnRFeHBlY3RlZCkoZXhwZWN0ZWRWYWx1ZSkgOiB1bmRlZmluZWQsXG4gICAgICAgIGNvbW1lbnQ6IGdldFByb3BDb21tZW50KG5hbWUsIGV4cGVjdGVkVmFsdWUpXG4gICAgICB9KTtcbiAgICAgIHJldHVybiAoMCwgX3V0aWxzLmdldE1lc3NhZ2UpKG1hdGNoZXIsIFwiRXhwZWN0ZWQgdGhlIGVsZW1lbnQgXCIgKyB0byArIFwiIGhhdmUgcHJvcFwiLCBwcmludEF0dHJpYnV0ZShuYW1lLCBleHBlY3RlZFZhbHVlKSwgJ1JlY2VpdmVkJywgcmVjZWl2ZWRQcm9wKTtcbiAgICB9XG4gIH07XG59Il19
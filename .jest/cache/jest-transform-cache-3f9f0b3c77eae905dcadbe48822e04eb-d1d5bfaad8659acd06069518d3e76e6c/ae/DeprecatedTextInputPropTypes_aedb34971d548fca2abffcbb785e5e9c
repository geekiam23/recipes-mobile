90f7dd665e494a2c48b478c68f48ab83
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var DeprecatedColorPropType = require("./DeprecatedColorPropType");

var DeprecatedViewPropTypes = require("./DeprecatedViewPropTypes");

var PropTypes = require('prop-types');

var Text = require("../Text/Text");

var DataDetectorTypes = ['phoneNumber', 'link', 'address', 'calendarEvent', 'none', 'all'];
module.exports = (0, _extends2.default)({}, DeprecatedViewPropTypes, {
  autoCapitalize: PropTypes.oneOf(['none', 'sentences', 'words', 'characters']),
  autoCompleteType: PropTypes.oneOf(['cc-csc', 'cc-exp', 'cc-exp-month', 'cc-exp-year', 'cc-number', 'email', 'name', 'password', 'postal-code', 'street-address', 'tel', 'username', 'off']),
  autoCorrect: PropTypes.bool,
  spellCheck: PropTypes.bool,
  autoFocus: PropTypes.bool,
  allowFontScaling: PropTypes.bool,
  maxFontSizeMultiplier: PropTypes.number,
  editable: PropTypes.bool,
  keyboardType: PropTypes.oneOf(['default', 'email-address', 'numeric', 'phone-pad', 'number-pad', 'ascii-capable', 'numbers-and-punctuation', 'url', 'name-phone-pad', 'decimal-pad', 'twitter', 'web-search', 'ascii-capable-number-pad', 'visible-password']),
  keyboardAppearance: PropTypes.oneOf(['default', 'light', 'dark']),
  returnKeyType: PropTypes.oneOf(['done', 'go', 'next', 'search', 'send', 'none', 'previous', 'default', 'emergency-call', 'google', 'join', 'route', 'yahoo']),
  returnKeyLabel: PropTypes.string,
  maxLength: PropTypes.number,
  numberOfLines: PropTypes.number,
  disableFullscreenUI: PropTypes.bool,
  enablesReturnKeyAutomatically: PropTypes.bool,
  multiline: PropTypes.bool,
  textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),
  onBlur: PropTypes.func,
  onFocus: PropTypes.func,
  onChange: PropTypes.func,
  onChangeText: PropTypes.func,
  onContentSizeChange: PropTypes.func,
  onTextInput: PropTypes.func,
  onEndEditing: PropTypes.func,
  onSelectionChange: PropTypes.func,
  onSubmitEditing: PropTypes.func,
  onKeyPress: PropTypes.func,
  onLayout: PropTypes.func,
  onScroll: PropTypes.func,
  placeholder: PropTypes.string,
  placeholderTextColor: DeprecatedColorPropType,
  scrollEnabled: PropTypes.bool,
  secureTextEntry: PropTypes.bool,
  selectionColor: DeprecatedColorPropType,
  selection: PropTypes.shape({
    start: PropTypes.number.isRequired,
    end: PropTypes.number
  }),
  value: PropTypes.string,
  defaultValue: PropTypes.string,
  clearButtonMode: PropTypes.oneOf(['never', 'while-editing', 'unless-editing', 'always']),
  clearTextOnFocus: PropTypes.bool,
  selectTextOnFocus: PropTypes.bool,
  blurOnSubmit: PropTypes.bool,
  style: Text.propTypes.style,
  underlineColorAndroid: DeprecatedColorPropType,
  inlineImageLeft: PropTypes.string,
  inlineImagePadding: PropTypes.number,
  rejectResponderTermination: PropTypes.bool,
  dataDetectorTypes: PropTypes.oneOfType([PropTypes.oneOf(DataDetectorTypes), PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes))]),
  caretHidden: PropTypes.bool,
  contextMenuHidden: PropTypes.bool,
  inputAccessoryViewID: PropTypes.string,
  textContentType: PropTypes.oneOf(['none', 'URL', 'addressCity', 'addressCityAndState', 'addressState', 'countryName', 'creditCardNumber', 'emailAddress', 'familyName', 'fullStreetAddress', 'givenName', 'jobTitle', 'location', 'middleName', 'name', 'namePrefix', 'nameSuffix', 'nickname', 'organizationName', 'postalCode', 'streetAddressLine1', 'streetAddressLine2', 'sublocality', 'telephoneNumber', 'username', 'password', 'newPassword', 'oneTimeCode']),
  showSoftInputOnFocus: PropTypes.bool
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRlcHJlY2F0ZWRUZXh0SW5wdXRQcm9wVHlwZXMuanMiXSwibmFtZXMiOlsiRGVwcmVjYXRlZENvbG9yUHJvcFR5cGUiLCJyZXF1aXJlIiwiRGVwcmVjYXRlZFZpZXdQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJUZXh0IiwiRGF0YURldGVjdG9yVHlwZXMiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXV0b0NhcGl0YWxpemUiLCJvbmVPZiIsImF1dG9Db21wbGV0ZVR5cGUiLCJhdXRvQ29ycmVjdCIsImJvb2wiLCJzcGVsbENoZWNrIiwiYXV0b0ZvY3VzIiwiYWxsb3dGb250U2NhbGluZyIsIm1heEZvbnRTaXplTXVsdGlwbGllciIsIm51bWJlciIsImVkaXRhYmxlIiwia2V5Ym9hcmRUeXBlIiwia2V5Ym9hcmRBcHBlYXJhbmNlIiwicmV0dXJuS2V5VHlwZSIsInJldHVybktleUxhYmVsIiwic3RyaW5nIiwibWF4TGVuZ3RoIiwibnVtYmVyT2ZMaW5lcyIsImRpc2FibGVGdWxsc2NyZWVuVUkiLCJlbmFibGVzUmV0dXJuS2V5QXV0b21hdGljYWxseSIsIm11bHRpbGluZSIsInRleHRCcmVha1N0cmF0ZWd5Iiwib25CbHVyIiwiZnVuYyIsIm9uRm9jdXMiLCJvbkNoYW5nZSIsIm9uQ2hhbmdlVGV4dCIsIm9uQ29udGVudFNpemVDaGFuZ2UiLCJvblRleHRJbnB1dCIsIm9uRW5kRWRpdGluZyIsIm9uU2VsZWN0aW9uQ2hhbmdlIiwib25TdWJtaXRFZGl0aW5nIiwib25LZXlQcmVzcyIsIm9uTGF5b3V0Iiwib25TY3JvbGwiLCJwbGFjZWhvbGRlciIsInBsYWNlaG9sZGVyVGV4dENvbG9yIiwic2Nyb2xsRW5hYmxlZCIsInNlY3VyZVRleHRFbnRyeSIsInNlbGVjdGlvbkNvbG9yIiwic2VsZWN0aW9uIiwic2hhcGUiLCJzdGFydCIsImlzUmVxdWlyZWQiLCJlbmQiLCJ2YWx1ZSIsImRlZmF1bHRWYWx1ZSIsImNsZWFyQnV0dG9uTW9kZSIsImNsZWFyVGV4dE9uRm9jdXMiLCJzZWxlY3RUZXh0T25Gb2N1cyIsImJsdXJPblN1Ym1pdCIsInN0eWxlIiwicHJvcFR5cGVzIiwidW5kZXJsaW5lQ29sb3JBbmRyb2lkIiwiaW5saW5lSW1hZ2VMZWZ0IiwiaW5saW5lSW1hZ2VQYWRkaW5nIiwicmVqZWN0UmVzcG9uZGVyVGVybWluYXRpb24iLCJkYXRhRGV0ZWN0b3JUeXBlcyIsIm9uZU9mVHlwZSIsImFycmF5T2YiLCJjYXJldEhpZGRlbiIsImNvbnRleHRNZW51SGlkZGVuIiwiaW5wdXRBY2Nlc3NvcnlWaWV3SUQiLCJ0ZXh0Q29udGVudFR5cGUiLCJzaG93U29mdElucHV0T25Gb2N1cyJdLCJtYXBwaW5ncyI6IkFBVUE7Ozs7OztBQUVBLElBQU1BLHVCQUF1QixHQUFHQyxPQUFPLDZCQUF2Qzs7QUFDQSxJQUFNQyx1QkFBdUIsR0FBR0QsT0FBTyw2QkFBdkM7O0FBQ0EsSUFBTUUsU0FBUyxHQUFHRixPQUFPLENBQUMsWUFBRCxDQUF6Qjs7QUFDQSxJQUFNRyxJQUFJLEdBQUdILE9BQU8sZ0JBQXBCOztBQUVBLElBQU1JLGlCQUFpQixHQUFHLENBQ3hCLGFBRHdCLEVBRXhCLE1BRndCLEVBR3hCLFNBSHdCLEVBSXhCLGVBSndCLEVBS3hCLE1BTHdCLEVBTXhCLEtBTndCLENBQTFCO0FBU0FDLE1BQU0sQ0FBQ0MsT0FBUCw4QkFDS0wsdUJBREw7QUFVRU0sRUFBQUEsY0FBYyxFQUFHTCxTQUFTLENBQUNNLEtBQVYsQ0FBZ0IsQ0FDL0IsTUFEK0IsRUFFL0IsV0FGK0IsRUFHL0IsT0FIK0IsRUFJL0IsWUFKK0IsQ0FBaEIsQ0FWbkI7QUF3Q0VDLEVBQUFBLGdCQUFnQixFQUFHUCxTQUFTLENBQUNNLEtBQVYsQ0FBZ0IsQ0FDakMsUUFEaUMsRUFFakMsUUFGaUMsRUFHakMsY0FIaUMsRUFJakMsYUFKaUMsRUFLakMsV0FMaUMsRUFNakMsT0FOaUMsRUFPakMsTUFQaUMsRUFRakMsVUFSaUMsRUFTakMsYUFUaUMsRUFVakMsZ0JBVmlDLEVBV2pDLEtBWGlDLEVBWWpDLFVBWmlD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QW9CLENBQ3RDL0QsU0FBUyxDQUFDTSxLQUFWLENBQWdCSixpQkFBaEIsQ0FEc0MsRUFFdENGLFNBQVMsQ0FBQ2dFLE9BQVYsQ0FBa0JoRSxTQUFTLENBQUNNLEtBQVYsQ0FBZ0JKLGlCQUFoQixDQUFsQixDQUZzQyxDQUFwQixDQWhmdEI7QUFrZ0JFK0QsRUFBQUEsV0FBVyxFQUFFakUsU0FBUyxDQUFDUyxJQWxnQnpCO0FBc2dCRXlELEVBQUFBLGlCQUFpQixFQUFFbEUsU0FBUyxDQUFDUyxJQXRnQi9CO0FBNmdCRTBELEVBQUFBLG9CQUFvQixFQUFFbkUsU0FBUyxDQUFDb0IsTUE3Z0JsQztBQW1oQkVnRCxFQUFBQSxlQUFlLEVBQUdwRSxTQUFTLENBQUNNLEtBQVYsQ0FBZ0IsQ0FDaEMsTUFEZ0MsRUFFaEMsS0FGZ0MsRUFHaEMsYUFIZ0MsRUFJaEMscUJBSmdDLEVBS2hDLGNBTGdDLEVBTWhDLGFBTmdDLEVBT2hDLGtCQVBnQyxFQVFoQyxjQVJnQyxFQVNoQyxZQVRnQyxFQVVoQyxtQkFWZ0MsRUFXaEMsV0FYZ0MsRUFZaEMsVUFaZ0MsRUFhaEMsVUFiZ0MsRUFjaEMsWUFkZ0MsRUFlaEMsTUFmZ0MsRUFnQmhDLFlBaEJnQyxFQWlCaEMsWUFqQmdDLEVBa0JoQyxVQWxCZ0MsRUFtQmhDLGtCQW5CZ0MsRUFvQmhDLFlBcEJnQyxFQXFCaEMsb0JBckJnQyxFQXNCaEMsb0JBdEJnQyxFQXVCaEMsYUF2QmdDLEVBd0JoQyxpQkF4QmdDLEVBeUJoQyxVQXpCZ0MsRUEwQmhDLFVBMUJnQyxFQTJCaEMsYUEzQmdDLEVBNEJoQyxhQTVCZ0MsQ0FBaEIsQ0FuaEJwQjtBQWtsQkUrRCxFQUFBQSxvQkFBb0IsRUFBRXJFLFNBQVMsQ0FBQ1M7QUFsbEJsQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IERlcHJlY2F0ZWRDb2xvclByb3BUeXBlID0gcmVxdWlyZSgnLi9EZXByZWNhdGVkQ29sb3JQcm9wVHlwZScpO1xuY29uc3QgRGVwcmVjYXRlZFZpZXdQcm9wVHlwZXMgPSByZXF1aXJlKCcuL0RlcHJlY2F0ZWRWaWV3UHJvcFR5cGVzJyk7XG5jb25zdCBQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5jb25zdCBUZXh0ID0gcmVxdWlyZSgnLi4vVGV4dC9UZXh0Jyk7XG5cbmNvbnN0IERhdGFEZXRlY3RvclR5cGVzID0gW1xuICAncGhvbmVOdW1iZXInLFxuICAnbGluaycsXG4gICdhZGRyZXNzJyxcbiAgJ2NhbGVuZGFyRXZlbnQnLFxuICAnbm9uZScsXG4gICdhbGwnLFxuXTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC4uLkRlcHJlY2F0ZWRWaWV3UHJvcFR5cGVzLFxuICAvKipcbiAgICogQ2FuIHRlbGwgYFRleHRJbnB1dGAgdG8gYXV0b21hdGljYWxseSBjYXBpdGFsaXplIGNlcnRhaW4gY2hhcmFjdGVycy5cbiAgICpcbiAgICogLSBgY2hhcmFjdGVyc2A6IGFsbCBjaGFyYWN0ZXJzLlxuICAgKiAtIGB3b3Jkc2A6IGZpcnN0IGxldHRlciBvZiBlYWNoIHdvcmQuXG4gICAqIC0gYHNlbnRlbmNlc2A6IGZpcnN0IGxldHRlciBvZiBlYWNoIHNlbnRlbmNlICgqZGVmYXVsdCopLlxuICAgKiAtIGBub25lYDogZG9uJ3QgYXV0byBjYXBpdGFsaXplIGFueXRoaW5nLlxuICAgKi9cbiAgYXV0b0NhcGl0YWxpemU6IChQcm9wVHlwZXMub25lT2YoW1xuICAgICdub25lJyxcbiAgICAnc2VudGVuY2VzJyxcbiAgICAnd29yZHMnLFxuICAgICdjaGFyYWN0ZXJzJyxcbiAgXSk6IFJlYWN0JFByb3BUeXBlJFByaW1pdGl2ZTwnbm9uZScgfCAnc2VudGVuY2VzJyB8ICd3b3JkcycgfCAnY2hhcmFjdGVycyc+KSxcbiAgLyoqXG4gICAqIERldGVybWluZXMgd2hpY2ggY29udGVudCB0byBzdWdnZXN0IG9uIGF1dG8gY29tcGxldGUsIGUuZy5gdXNlcm5hbWVgLlxuICAgKiBUbyBkaXNhYmxlIGF1dG8gY29tcGxldGUsIHVzZSBgb2ZmYC5cbiAgICpcbiAgICogKkFuZHJvaWQgT25seSpcbiAgICpcbiAgICogVGhlIGZvbGxvd2luZyB2YWx1ZXMgd29yayBvbiBBbmRyb2lkIG9ubHk6XG4gICAqXG4gICAqIC0gYHVzZXJuYW1lYFxuICAgKiAtIGBwYXNzd29yZGBcbiAgICogLSBgZW1haWxgXG4gICAqIC0gYG5hbWVgXG4gICAqIC0gYHRlbGBcbiAgICogLSBgc3RyZWV0LWFkZHJlc3NgXG4gICAqIC0gYHBvc3RhbC1jb2RlYFxuICAgKiAtIGBjYy1udW1iZXJgXG4gICAqIC0gYGNjLWNzY2BcbiAgICogLSBgY2MtZXhwYFxuICAgKiAtIGBjYy1leHAtbW9udGhgXG4gICAqIC0gYGNjLWV4cC15ZWFyYFxuICAgKiAtIGBvZmZgXG4gICAqXG4gICAqIEBwbGF0Zm9ybSBhbmRyb2lkXG4gICAqL1xuICBhdXRvQ29tcGxldGVUeXBlOiAoUHJvcFR5cGVzLm9uZU9mKFtcbiAgICAnY2MtY3NjJyxcbiAgICAnY2MtZXhwJyxcbiAgICAnY2MtZXhwLW1vbnRoJyxcbiAgICAnY2MtZXhwLXllYXInLFxuICAgICdjYy1udW1iZXInLFxuICAgICdlbWFpbCcsXG4gICAgJ25hbWUnLFxuICAgICdwYXNzd29yZCcsXG4gICAgJ3Bvc3RhbC1jb2RlJyxcbiAgICAnc3RyZWV0LWFkZHJlc3MnLFxuICAgICd0ZWwnLFxuICAgICd1c2VybmFtZScsXG4gICAgJ29mZicsXG4gIF0pOiBSZWFjdCRQcm9wVHlwZSRQcmltaXRpdmU8XG4gICAgfCAnY2MtY3NjJ1xuICAgIHwgJ2NjLWV4cCdcbiAgICB8ICdjYy1leHAtbW9udGgnXG4gICAgfCAnY2MtZXhwLXllYXInXG4gICAgfCAnY2MtbnVtYmVyJ1xuICAgIHwgJ2VtYWlsJ1xuICAgIHwgJ25hbWUnXG4gICAgfCAncGFzc3dvcmQnXG4gICAgfCAncG9zdGFsLWNvZGUnXG4gICAgfCAnc3RyZWV0LWFkZHJlc3MnXG4gICAgfCAndGVsJ1xuICAgIHwgJ3VzZXJuYW1lJ1xuICAgIHwgJ29mZicsXG4gID4pLFxuICAvKipcbiAgICogSWYgYGZhbHNlYCwgZGlzYWJsZXMgYXV0by1jb3JyZWN0LiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBgdHJ1ZWAuXG4gICAqL1xuICBhdXRvQ29ycmVjdDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgZmFsc2VgLCBkaXNhYmxlcyBzcGVsbC1jaGVjayBzdHlsZSAoaS5lLiByZWQgdW5kZXJsaW5lcykuXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGluaGVyaXRlZCBmcm9tIGBhdXRvQ29ycmVjdGAuXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIHNwZWxsQ2hlY2s6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBmb2N1c2VzIHRoZSBpbnB1dCBvbiBgY29tcG9uZW50RGlkTW91bnRgLlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBgZmFsc2VgLlxuICAgKi9cbiAgYXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFNwZWNpZmllcyB3aGV0aGVyIGZvbnRzIHNob3VsZCBzY2FsZSB0byByZXNwZWN0IFRleHQgU2l6ZSBhY2Nlc3NpYmlsaXR5IHNldHRpbmdzLiBUaGVcbiAgICogZGVmYXVsdCBpcyBgdHJ1ZWAuXG4gICAqL1xuICBhbGxvd0ZvbnRTY2FsaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFNwZWNpZmllcyBsYXJnZXN0IHBvc3NpYmxlIHNjYWxlIGEgZm9udCBjYW4gcmVhY2ggd2hlbiBgYWxsb3dGb250U2NhbGluZ2AgaXMgZW5hYmxlZC5cbiAgICogUG9zc2libGUgdmFsdWVzOlxuICAgKiBgbnVsbC91bmRlZmluZWRgIChkZWZhdWx0KTogaW5oZXJpdCBmcm9tIHRoZSBwYXJlbnQgbm9kZSBvciB0aGUgZ2xvYmFsIGRlZmF1bHQgKDApXG4gICAqIGAwYDogbm8gbWF4LCBpZ25vcmUgcGFyZW50L2dsb2JhbCBkZWZhdWx0XG4gICAqIGA+PSAxYDogc2V0cyB0aGUgbWF4Rm9udFNpemVNdWx0aXBsaWVyIG9mIHRoaXMgbm9kZSB0byB0aGlzIHZhbHVlXG4gICAqL1xuICBtYXhGb250U2l6ZU11bHRpcGxpZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBJZiBgZmFsc2VgLCB0ZXh0IGlzIG5vdCBlZGl0YWJsZS4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgYHRydWVgLlxuICAgKi9cbiAgZWRpdGFibGU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGljaCBrZXlib2FyZCB0byBvcGVuLCBlLmcuYG51bWVyaWNgLlxuICAgKlxuICAgKiBUaGUgZm9sbG93aW5nIHZhbHVlcyB3b3JrIGFjcm9zcyBwbGF0Zm9ybXM6XG4gICAqXG4gICAqIC0gYGRlZmF1bHRgXG4gICAqIC0gYG51bWVyaWNgXG4gICAqIC0gYG51bWJlci1wYWRgXG4gICAqIC0gYGRlY2ltYWwtcGFkYFxuICAgKiAtIGBlbWFpbC1hZGRyZXNzYFxuICAgKiAtIGBwaG9uZS1wYWRgXG4gICAqXG4gICAqICppT1MgT25seSpcbiAgICpcbiAgICogVGhlIGZvbGxvd2luZyB2YWx1ZXMgd29yayBvbiBpT1Mgb25seTpcbiAgICpcbiAgICogLSBgYXNjaWktY2FwYWJsZWBcbiAgICogLSBgbnVtYmVycy1hbmQtcHVuY3R1YXRpb25gXG4gICAqIC0gYHVybGBcbiAgICogLSBgbmFtZS1waG9uZS1wYWRgXG4gICAqIC0gYHR3aXR0ZXJgXG4gICAqIC0gYHdlYi1zZWFyY2hgXG4gICAqIC0gYGFzY2lpLWNhcGFibGUtbnVtYmVyLXBhZGBcbiAgICpcbiAgICogKkFuZHJvaWQgT25seSpcbiAgICpcbiAgICogVGhlIGZvbGxvd2luZyB2YWx1ZXMgd29yayBvbiBBbmRyb2lkIG9ubHk6XG4gICAqXG4gICAqIC0gYHZpc2libGUtcGFzc3dvcmRgXG4gICAqL1xuICBrZXlib2FyZFR5cGU6IChQcm9wVHlwZXMub25lT2YoW1xuICAgIC8vIENyb3NzLXBsYXRmb3JtXG4gICAgJ2RlZmF1bHQnLFxuICAgICdlbWFpbC1hZGRyZXNzJyxcbiAgICAnbnVtZXJpYycsXG4gICAgJ3Bob25lLXBhZCcsXG4gICAgJ251bWJlci1wYWQnLFxuICAgIC8vIGlPUy1vbmx5XG4gICAgJ2FzY2lpLWNhcGFibGUnLFxuICAgICdudW1iZXJzLWFuZC1wdW5jdHVhdGlvbicsXG4gICAgJ3VybCcsXG4gICAgJ25hbWUtcGhvbmUtcGFkJyxcbiAgICAnZGVjaW1hbC1wYWQnLFxuICAgICd0d2l0dGVyJyxcbiAgICAnd2ViLXNlYXJjaCcsXG4gICAgLy8gaU9TIDEwKyBvbmx5XG4gICAgJ2FzY2lpLWNhcGFibGUtbnVtYmVyLXBhZCcsXG4gICAgLy8gQW5kcm9pZC1vbmx5XG4gICAgJ3Zpc2libGUtcGFzc3dvcmQnLFxuICBdKTogUmVhY3QkUHJvcFR5cGUkUHJpbWl0aXZlPFxuICAgIHwgJ2RlZmF1bHQnXG4gICAgfCAnZW1haWwtYWRkcmVzcydcbiAgICB8ICdudW1lcmljJ1xuICAgIHwgJ3Bob25lLXBhZCdcbiAgICB8ICdudW1iZXItcGFkJ1xuICAgIHwgJ2FzY2lpLWNhcGFibGUnXG4gICAgfCAnbnVtYmVycy1hbmQtcHVuY3R1YXRpb24nXG4gICAgfCAndXJsJ1xuICAgIHwgJ25hbWUtcGhvbmUtcGFkJ1xuICAgIHwgJ2RlY2ltYWwtcGFkJ1xuICAgIHwgJ3R3aXR0ZXInXG4gICAgfCAnd2ViLXNlYXJjaCdcbiAgICB8ICdhc2NpaS1jYXBhYmxlLW51bWJlci1wYWQnXG4gICAgfCAndmlzaWJsZS1wYXNzd29yZCcsXG4gID4pLFxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgY29sb3Igb2YgdGhlIGtleWJvYXJkLlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBrZXlib2FyZEFwcGVhcmFuY2U6IChQcm9wVHlwZXMub25lT2YoW1xuICAgICdkZWZhdWx0JyxcbiAgICAnbGlnaHQnLFxuICAgICdkYXJrJyxcbiAgXSk6IFJlYWN0JFByb3BUeXBlJFByaW1pdGl2ZTwnZGVmYXVsdCcgfCAnbGlnaHQnIHwgJ2RhcmsnPiksXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGhvdyB0aGUgcmV0dXJuIGtleSBzaG91bGQgbG9vay4gT24gQW5kcm9pZCB5b3UgY2FuIGFsc28gdXNlXG4gICAqIGByZXR1cm5LZXlMYWJlbGAuXG4gICAqXG4gICAqICpDcm9zcyBwbGF0Zm9ybSpcbiAgICpcbiAgICogVGhlIGZvbGxvd2luZyB2YWx1ZXMgd29yayBhY3Jvc3MgcGxhdGZvcm1zOlxuICAgKlxuICAgKiAtIGBkb25lYFxuICAgKiAtIGBnb2BcbiAgICogLSBgbmV4dGBcbiAgICogLSBgc2VhcmNoYFxuICAgKiAtIGBzZW5kYFxuICAgKlxuICAgKiAqQW5kcm9pZCBPbmx5KlxuICAgKlxuICAgKiBUaGUgZm9sbG93aW5nIHZhbHVlcyB3b3JrIG9uIEFuZHJvaWQgb25seTpcbiAgICpcbiAgICogLSBgbm9uZWBcbiAgICogLSBgcHJldmlvdXNgXG4gICAqXG4gICAqICppT1MgT25seSpcbiAgICpcbiAgICogVGhlIGZvbGxvd2luZyB2YWx1ZXMgd29yayBvbiBpT1Mgb25seTpcbiAgICpcbiAgICogLSBgZGVmYXVsdGBcbiAgICogLSBgZW1lcmdlbmN5LWNhbGxgXG4gICAqIC0gYGdvb2dsZWBcbiAgICogLSBgam9pbmBcbiAgICogLSBgcm91dGVgXG4gICAqIC0gYHlhaG9vYFxuICAgKi9cbiAgcmV0dXJuS2V5VHlwZTogKFByb3BUeXBlcy5vbmVPZihbXG4gICAgLy8gQ3Jvc3MtcGxhdGZvcm1cbiAgICAnZG9uZScsXG4gICAgJ2dvJyxcbiAgICAnbmV4dCcsXG4gICAgJ3NlYXJjaCcsXG4gICAgJ3NlbmQnLFxuICAgIC8vIEFuZHJvaWQtb25seVxuICAgICdub25lJyxcbiAgICAncHJldmlvdXMnLFxuICAgIC8vIGlPUy1vbmx5XG4gICAgJ2RlZmF1bHQnLFxuICAgICdlbWVyZ2VuY3ktY2FsbCcsXG4gICAgJ2dvb2dsZScsXG4gICAgJ2pvaW4nLFxuICAgICdyb3V0ZScsXG4gICAgJ3lhaG9vJyxcbiAgXSk6IFJlYWN0JFByb3BUeXBlJFByaW1pdGl2ZTxcbiAgICB8ICdkb25lJ1xuICAgIHwgJ2dvJ1xuICAgIHwgJ25leHQnXG4gICAgfCAnc2VhcmNoJ1xuICAgIHwgJ3NlbmQnXG4gICAgfCAnbm9uZSdcbiAgICB8ICdwcmV2aW91cydcbiAgICB8ICdkZWZhdWx0J1xuICAgIHwgJ2VtZXJnZW5jeS1jYWxsJ1xuICAgIHwgJ2dvb2dsZSdcbiAgICB8ICdqb2luJ1xuICAgIHwgJ3JvdXRlJ1xuICAgIHwgJ3lhaG9vJyxcbiAgPiksXG4gIC8qKlxuICAgKiBTZXRzIHRoZSByZXR1cm4ga2V5IHRvIHRoZSBsYWJlbC4gVXNlIGl0IGluc3RlYWQgb2YgYHJldHVybktleVR5cGVgLlxuICAgKiBAcGxhdGZvcm0gYW5kcm9pZFxuICAgKi9cbiAgcmV0dXJuS2V5TGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBMaW1pdHMgdGhlIG1heGltdW0gbnVtYmVyIG9mIGNoYXJhY3RlcnMgdGhhdCBjYW4gYmUgZW50ZXJlZC4gVXNlIHRoaXNcbiAgICogaW5zdGVhZCBvZiBpbXBsZW1lbnRpbmcgdGhlIGxvZ2ljIGluIEpTIHRvIGF2b2lkIGZsaWNrZXIuXG4gICAqL1xuICBtYXhMZW5ndGg6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBudW1iZXIgb2YgbGluZXMgZm9yIGEgYFRleHRJbnB1dGAuIFVzZSBpdCB3aXRoIG11bHRpbGluZSBzZXQgdG9cbiAgICogYHRydWVgIHRvIGJlIGFibGUgdG8gZmlsbCB0aGUgbGluZXMuXG4gICAqIEBwbGF0Zm9ybSBhbmRyb2lkXG4gICAqL1xuICBudW1iZXJPZkxpbmVzOiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogV2hlbiBgZmFsc2VgLCBpZiB0aGVyZSBpcyBhIHNtYWxsIGFtb3VudCBvZiBzcGFjZSBhdmFpbGFibGUgYXJvdW5kIGEgdGV4dCBpbnB1dFxuICAgKiAoZS5nLiBsYW5kc2NhcGUgb3JpZW50YXRpb24gb24gYSBwaG9uZSksIHRoZSBPUyBtYXkgY2hvb3NlIHRvIGhhdmUgdGhlIHVzZXIgZWRpdFxuICAgKiB0aGUgdGV4dCBpbnNpZGUgb2YgYSBmdWxsIHNjcmVlbiB0ZXh0IGlucHV0IG1vZGUuIFdoZW4gYHRydWVgLCB0aGlzIGZlYXR1cmUgaXNcbiAgICogZGlzYWJsZWQgYW5kIHVzZXJzIHdpbGwgYWx3YXlzIGVkaXQgdGhlIHRleHQgZGlyZWN0bHkgaW5zaWRlIG9mIHRoZSB0ZXh0IGlucHV0LlxuICAgKiBEZWZhdWx0cyB0byBgZmFsc2VgLlxuICAgKiBAcGxhdGZvcm0gYW5kcm9pZFxuICAgKi9cbiAgZGlzYWJsZUZ1bGxzY3JlZW5VSTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBrZXlib2FyZCBkaXNhYmxlcyB0aGUgcmV0dXJuIGtleSB3aGVuIHRoZXJlIGlzIG5vIHRleHQgYW5kXG4gICAqIGF1dG9tYXRpY2FsbHkgZW5hYmxlcyBpdCB3aGVuIHRoZXJlIGlzIHRleHQuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGBmYWxzZWAuXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIGVuYWJsZXNSZXR1cm5LZXlBdXRvbWF0aWNhbGx5OiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRleHQgaW5wdXQgY2FuIGJlIG11bHRpcGxlIGxpbmVzLlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBgZmFsc2VgLlxuICAgKi9cbiAgbXVsdGlsaW5lOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFNldCB0ZXh0IGJyZWFrIHN0cmF0ZWd5IG9uIEFuZHJvaWQgQVBJIExldmVsIDIzKywgcG9zc2libGUgdmFsdWVzIGFyZSBgc2ltcGxlYCwgYGhpZ2hRdWFsaXR5YCwgYGJhbGFuY2VkYFxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBgc2ltcGxlYC5cbiAgICogQHBsYXRmb3JtIGFuZHJvaWRcbiAgICovXG4gIHRleHRCcmVha1N0cmF0ZWd5OiAoUHJvcFR5cGVzLm9uZU9mKFtcbiAgICAnc2ltcGxlJyxcbiAgICAnaGlnaFF1YWxpdHknLFxuICAgICdiYWxhbmNlZCcsXG4gIF0pOiBSZWFjdCRQcm9wVHlwZSRQcmltaXRpdmU8J3NpbXBsZScgfCAnaGlnaFF1YWxpdHknIHwgJ2JhbGFuY2VkJz4pLFxuICAvKipcbiAgICogQ2FsbGJhY2sgdGhhdCBpcyBjYWxsZWQgd2hlbiB0aGUgdGV4dCBpbnB1dCBpcyBibHVycmVkLlxuICAgKi9cbiAgb25CbHVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIHdoZW4gdGhlIHRleHQgaW5wdXQgaXMgZm9jdXNlZC5cbiAgICovXG4gIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgdGhhdCBpcyBjYWxsZWQgd2hlbiB0aGUgdGV4dCBpbnB1dCdzIHRleHQgY2hhbmdlcy5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIHdoZW4gdGhlIHRleHQgaW5wdXQncyB0ZXh0IGNoYW5nZXMuXG4gICAqIENoYW5nZWQgdGV4dCBpcyBwYXNzZWQgYXMgYW4gYXJndW1lbnQgdG8gdGhlIGNhbGxiYWNrIGhhbmRsZXIuXG4gICAqL1xuICBvbkNoYW5nZVRleHQ6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgdGhhdCBpcyBjYWxsZWQgd2hlbiB0aGUgdGV4dCBpbnB1dCdzIGNvbnRlbnQgc2l6ZSBjaGFuZ2VzLlxuICAgKiBUaGlzIHdpbGwgYmUgY2FsbGVkIHdpdGhcbiAgICogYHsgbmF0aXZlRXZlbnQ6IHsgY29udGVudFNpemU6IHsgd2lkdGgsIGhlaWdodCB9IH0gfWAuXG4gICAqXG4gICAqIE9ubHkgY2FsbGVkIGZvciBtdWx0aWxpbmUgdGV4dCBpbnB1dHMuXG4gICAqL1xuICBvbkNvbnRlbnRTaXplQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25UZXh0SW5wdXQ6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgdGhhdCBpcyBjYWxsZWQgd2hlbiB0ZXh0IGlucHV0IGVuZHMuXG4gICAqL1xuICBvbkVuZEVkaXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgdGhhdCBpcyBjYWxsZWQgd2hlbiB0aGUgdGV4dCBpbnB1dCBzZWxlY3Rpb24gaXMgY2hhbmdlZC5cbiAgICogVGhpcyB3aWxsIGJlIGNhbGxlZCB3aXRoXG4gICAqIGB7IG5hdGl2ZUV2ZW50OiB7IHNlbGVjdGlvbjogeyBzdGFydCwgZW5kIH0gfSB9YC5cbiAgICovXG4gIG9uU2VsZWN0aW9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIHdoZW4gdGhlIHRleHQgaW5wdXQncyBzdWJtaXQgYnV0dG9uIGlzIHByZXNzZWQuXG4gICAqIEludmFsaWQgaWYgYG11bHRpbGluZT17dHJ1ZX1gIGlzIHNwZWNpZmllZC5cbiAgICovXG4gIG9uU3VibWl0RWRpdGluZzogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aGVuIGEga2V5IGlzIHByZXNzZWQuXG4gICAqIFRoaXMgd2lsbCBiZSBjYWxsZWQgd2l0aCBgeyBuYXRpdmVFdmVudDogeyBrZXk6IGtleVZhbHVlIH0gfWBcbiAgICogd2hlcmUgYGtleVZhbHVlYCBpcyBgJ0VudGVyJ2Agb3IgYCdCYWNrc3BhY2UnYCBmb3IgcmVzcGVjdGl2ZSBrZXlzIGFuZFxuICAgKiB0aGUgdHlwZWQtaW4gY2hhcmFjdGVyIG90aGVyd2lzZSBpbmNsdWRpbmcgYCcgJ2AgZm9yIHNwYWNlLlxuICAgKiBGaXJlcyBiZWZvcmUgYG9uQ2hhbmdlYCBjYWxsYmFja3MuXG4gICAqL1xuICBvbktleVByZXNzOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEludm9rZWQgb24gbW91bnQgYW5kIGxheW91dCBjaGFuZ2VzIHdpdGggYHt4LCB5LCB3aWR0aCwgaGVpZ2h0fWAuXG4gICAqL1xuICBvbkxheW91dDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBJbnZva2VkIG9uIGNvbnRlbnQgc2Nyb2xsIHdpdGggYHsgbmF0aXZlRXZlbnQ6IHsgY29udGVudE9mZnNldDogeyB4LCB5IH0gfSB9YC5cbiAgICogTWF5IGFsc28gY29udGFpbiBvdGhlciBwcm9wZXJ0aWVzIGZyb20gU2Nyb2xsRXZlbnQgYnV0IG9uIEFuZHJvaWQgY29udGVudFNpemVcbiAgICogaXMgbm90IHByb3ZpZGVkIGZvciBwZXJmb3JtYW5jZSByZWFzb25zLlxuICAgKi9cbiAgb25TY3JvbGw6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogVGhlIHN0cmluZyB0aGF0IHdpbGwgYmUgcmVuZGVyZWQgYmVmb3JlIHRleHQgaW5wdXQgaGFzIGJlZW4gZW50ZXJlZC5cbiAgICovXG4gIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIHRleHQgY29sb3Igb2YgdGhlIHBsYWNlaG9sZGVyIHN0cmluZy5cbiAgICovXG4gIHBsYWNlaG9sZGVyVGV4dENvbG9yOiBEZXByZWNhdGVkQ29sb3JQcm9wVHlwZSxcbiAgLyoqXG4gICAqIElmIGBmYWxzZWAsIHNjcm9sbGluZyBvZiB0aGUgdGV4dCB2aWV3IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGB0cnVlYC4gRG9lcyBvbmx5IHdvcmsgd2l0aCAnbXVsdGlsaW5lPXt0cnVlfScuXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIHNjcm9sbEVuYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdGV4dCBpbnB1dCBvYnNjdXJlcyB0aGUgdGV4dCBlbnRlcmVkIHNvIHRoYXQgc2Vuc2l0aXZlIHRleHRcbiAgICogbGlrZSBwYXNzd29yZHMgc3RheSBzZWN1cmUuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGBmYWxzZWAuIERvZXMgbm90IHdvcmsgd2l0aCAnbXVsdGlsaW5lPXt0cnVlfScuXG4gICAqL1xuICBzZWN1cmVUZXh0RW50cnk6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIGhpZ2hsaWdodCBhbmQgY3Vyc29yIGNvbG9yIG9mIHRoZSB0ZXh0IGlucHV0LlxuICAgKi9cbiAgc2VsZWN0aW9uQ29sb3I6IERlcHJlY2F0ZWRDb2xvclByb3BUeXBlLFxuICAvKipcbiAgICogVGhlIHN0YXJ0IGFuZCBlbmQgb2YgdGhlIHRleHQgaW5wdXQncyBzZWxlY3Rpb24uIFNldCBzdGFydCBhbmQgZW5kIHRvXG4gICAqIHRoZSBzYW1lIHZhbHVlIHRvIHBvc2l0aW9uIHRoZSBjdXJzb3IuXG4gICAqL1xuICBzZWxlY3Rpb246IChQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHN0YXJ0OiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gICAgZW5kOiBQcm9wVHlwZXMubnVtYmVyLFxuICB9KTogUmVhY3QkUHJvcFR5cGUkUHJpbWl0aXZlPHtcbiAgICBlbmQ/OiBudW1iZXIsXG4gICAgc3RhcnQ6IG51bWJlcixcbiAgICAuLi5cbiAgfT4pLFxuICAvKipcbiAgICogVGhlIHZhbHVlIHRvIHNob3cgZm9yIHRoZSB0ZXh0IGlucHV0LiBgVGV4dElucHV0YCBpcyBhIGNvbnRyb2xsZWRcbiAgICogY29tcG9uZW50LCB3aGljaCBtZWFucyB0aGUgbmF0aXZlIHZhbHVlIHdpbGwgYmUgZm9yY2VkIHRvIG1hdGNoIHRoaXNcbiAgICogdmFsdWUgcHJvcCBpZiBwcm92aWRlZC4gRm9yIG1vc3QgdXNlcywgdGhpcyB3b3JrcyBncmVhdCwgYnV0IGluIHNvbWVcbiAgICogY2FzZXMgdGhpcyBtYXkgY2F1c2UgZmxpY2tlcmluZyAtIG9uZSBjb21tb24gY2F1c2UgaXMgcHJldmVudGluZyBlZGl0c1xuICAgKiBieSBrZWVwaW5nIHZhbHVlIHRoZSBzYW1lLiBJbiBhZGRpdGlvbiB0byBzaW1wbHkgc2V0dGluZyB0aGUgc2FtZSB2YWx1ZSxcbiAgICogZWl0aGVyIHNldCBgZWRpdGFibGU9e2ZhbHNlfWAsIG9yIHNldC91cGRhdGUgYG1heExlbmd0aGAgdG8gcHJldmVudFxuICAgKiB1bndhbnRlZCBlZGl0cyB3aXRob3V0IGZsaWNrZXIuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFByb3ZpZGVzIGFuIGluaXRpYWwgdmFsdWUgdGhhdCB3aWxsIGNoYW5nZSB3aGVuIHRoZSB1c2VyIHN0YXJ0cyB0eXBpbmcuXG4gICAqIFVzZWZ1bCBmb3Igc2ltcGxlIHVzZS1jYXNlcyB3aGVyZSB5b3UgZG8gbm90IHdhbnQgdG8gZGVhbCB3aXRoIGxpc3RlbmluZ1xuICAgKiB0byBldmVudHMgYW5kIHVwZGF0aW5nIHRoZSB2YWx1ZSBwcm9wIHRvIGtlZXAgdGhlIGNvbnRyb2xsZWQgc3RhdGUgaW4gc3luYy5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFdoZW4gdGhlIGNsZWFyIGJ1dHRvbiBzaG91bGQgYXBwZWFyIG9uIHRoZSByaWdodCBzaWRlIG9mIHRoZSB0ZXh0IHZpZXcuXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgc3VwcG9ydGVkIG9ubHkgZm9yIHNpbmdsZS1saW5lIFRleHRJbnB1dCBjb21wb25lbnQuXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIGNsZWFyQnV0dG9uTW9kZTogKFByb3BUeXBlcy5vbmVPZihbXG4gICAgJ25ldmVyJyxcbiAgICAnd2hpbGUtZWRpdGluZycsXG4gICAgJ3VubGVzcy1lZGl0aW5nJyxcbiAgICAnYWx3YXlzJyxcbiAgXSk6IFJlYWN0JFByb3BUeXBlJFByaW1pdGl2ZTxcbiAgICAnbmV2ZXInIHwgJ3doaWxlLWVkaXRpbmcnIHwgJ3VubGVzcy1lZGl0aW5nJyB8ICdhbHdheXMnLFxuICA+KSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgY2xlYXJzIHRoZSB0ZXh0IGZpZWxkIGF1dG9tYXRpY2FsbHkgd2hlbiBlZGl0aW5nIGJlZ2lucy5cbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgY2xlYXJUZXh0T25Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGFsbCB0ZXh0IHdpbGwgYXV0b21hdGljYWxseSBiZSBzZWxlY3RlZCBvbiBmb2N1cy5cbiAgICovXG4gIHNlbGVjdFRleHRPbkZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRleHQgZmllbGQgd2lsbCBibHVyIHdoZW4gc3VibWl0dGVkLlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlIGZvciBzaW5nbGUtbGluZSBmaWVsZHMgYW5kIGZhbHNlIGZvclxuICAgKiBtdWx0aWxpbmUgZmllbGRzLiBOb3RlIHRoYXQgZm9yIG11bHRpbGluZSBmaWVsZHMsIHNldHRpbmcgYGJsdXJPblN1Ym1pdGBcbiAgICogdG8gYHRydWVgIG1lYW5zIHRoYXQgcHJlc3NpbmcgcmV0dXJuIHdpbGwgYmx1ciB0aGUgZmllbGQgYW5kIHRyaWdnZXIgdGhlXG4gICAqIGBvblN1Ym1pdEVkaXRpbmdgIGV2ZW50IGluc3RlYWQgb2YgaW5zZXJ0aW5nIGEgbmV3bGluZSBpbnRvIHRoZSBmaWVsZC5cbiAgICovXG4gIGJsdXJPblN1Ym1pdDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBOb3RlIHRoYXQgbm90IGFsbCBUZXh0IHN0eWxlcyBhcmUgc3VwcG9ydGVkLCBhbiBpbmNvbXBsZXRlIGxpc3Qgb2Ygd2hhdCBpcyBub3Qgc3VwcG9ydGVkIGluY2x1ZGVzOlxuICAgKlxuICAgKiAtIGBib3JkZXJMZWZ0V2lkdGhgXG4gICAqIC0gYGJvcmRlclRvcFdpZHRoYFxuICAgKiAtIGBib3JkZXJSaWdodFdpZHRoYFxuICAgKiAtIGBib3JkZXJCb3R0b21XaWR0aGBcbiAgICogLSBgYm9yZGVyVG9wTGVmdFJhZGl1c2BcbiAgICogLSBgYm9yZGVyVG9wUmlnaHRSYWRpdXNgXG4gICAqIC0gYGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzYFxuICAgKiAtIGBib3JkZXJCb3R0b21MZWZ0UmFkaXVzYFxuICAgKlxuICAgKiBzZWUgW0lzc3VlIzcwNzBdKGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC1uYXRpdmUvaXNzdWVzLzcwNzApXG4gICAqIGZvciBtb3JlIGRldGFpbC5cbiAgICpcbiAgICogW1N0eWxlc10oZG9jcy9zdHlsZS5odG1sKVxuICAgKi9cbiAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdXNlXVxuICBzdHlsZTogVGV4dC5wcm9wVHlwZXMuc3R5bGUsXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGBUZXh0SW5wdXRgIHVuZGVybGluZS5cbiAgICogQHBsYXRmb3JtIGFuZHJvaWRcbiAgICovXG4gIHVuZGVybGluZUNvbG9yQW5kcm9pZDogRGVwcmVjYXRlZENvbG9yUHJvcFR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGRlZmluZWQsIHRoZSBwcm92aWRlZCBpbWFnZSByZXNvdXJjZSB3aWxsIGJlIHJlbmRlcmVkIG9uIHRoZSBsZWZ0LlxuICAgKiBUaGUgaW1hZ2UgcmVzb3VyY2UgbXVzdCBiZSBpbnNpZGUgYC9hbmRyb2lkL2FwcC9zcmMvbWFpbi9yZXMvZHJhd2FibGVgIGFuZCByZWZlcmVuY2VkXG4gICAqIGxpa2VcbiAgICogYGBgXG4gICAqIDxUZXh0SW5wdXRcbiAgICogIGlubGluZUltYWdlTGVmdD0nc2VhcmNoX2ljb24nXG4gICAqIC8+XG4gICAqIGBgYFxuICAgKiBAcGxhdGZvcm0gYW5kcm9pZFxuICAgKi9cbiAgaW5saW5lSW1hZ2VMZWZ0OiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBQYWRkaW5nIGJldHdlZW4gdGhlIGlubGluZSBpbWFnZSwgaWYgYW55LCBhbmQgdGhlIHRleHQgaW5wdXQgaXRzZWxmLlxuICAgKiBAcGxhdGZvcm0gYW5kcm9pZFxuICAgKi9cbiAgaW5saW5lSW1hZ2VQYWRkaW5nOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGFsbG93cyBUZXh0SW5wdXQgdG8gcGFzcyB0b3VjaCBldmVudHMgdG8gdGhlIHBhcmVudCBjb21wb25lbnQuXG4gICAqIFRoaXMgYWxsb3dzIGNvbXBvbmVudHMgc3VjaCBhcyBTd2lwZWFibGVMaXN0VmlldyB0byBiZSBzd2lwZWFibGUgZnJvbSB0aGUgVGV4dElucHV0IG9uIGlPUyxcbiAgICogYXMgaXMgdGhlIGNhc2Ugb24gQW5kcm9pZCBieSBkZWZhdWx0LlxuICAgKiBJZiBgZmFsc2VgLCBUZXh0SW5wdXQgYWx3YXlzIGFza3MgdG8gaGFuZGxlIHRoZSBpbnB1dCAoZXhjZXB0IHdoZW4gZGlzYWJsZWQpLlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICByZWplY3RSZXNwb25kZXJUZXJtaW5hdGlvbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIHR5cGVzIG9mIGRhdGEgY29udmVydGVkIHRvIGNsaWNrYWJsZSBVUkxzIGluIHRoZSB0ZXh0IGlucHV0LlxuICAgKiBPbmx5IHZhbGlkIGlmIGBtdWx0aWxpbmU9e3RydWV9YCBhbmQgYGVkaXRhYmxlPXtmYWxzZX1gLlxuICAgKiBCeSBkZWZhdWx0IG5vIGRhdGEgdHlwZXMgYXJlIGRldGVjdGVkLlxuICAgKlxuICAgKiBZb3UgY2FuIHByb3ZpZGUgb25lIHR5cGUgb3IgYW4gYXJyYXkgb2YgbWFueSB0eXBlcy5cbiAgICpcbiAgICogUG9zc2libGUgdmFsdWVzIGZvciBgZGF0YURldGVjdG9yVHlwZXNgIGFyZTpcbiAgICpcbiAgICogLSBgJ3Bob25lTnVtYmVyJ2BcbiAgICogLSBgJ2xpbmsnYFxuICAgKiAtIGAnYWRkcmVzcydgXG4gICAqIC0gYCdjYWxlbmRhckV2ZW50J2BcbiAgICogLSBgJ25vbmUnYFxuICAgKiAtIGAnYWxsJ2BcbiAgICpcbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgZGF0YURldGVjdG9yVHlwZXM6IChQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICBQcm9wVHlwZXMub25lT2YoRGF0YURldGVjdG9yVHlwZXMpLFxuICAgIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZihEYXRhRGV0ZWN0b3JUeXBlcykpLFxuICBdKTogUmVhY3QkUHJvcFR5cGUkUHJpbWl0aXZlPFxuICAgIHwgJ3Bob25lTnVtYmVyJ1xuICAgIHwgJ2xpbmsnXG4gICAgfCAnYWRkcmVzcydcbiAgICB8ICdjYWxlbmRhckV2ZW50J1xuICAgIHwgJ25vbmUnXG4gICAgfCAnYWxsJ1xuICAgIHwgQXJyYXk8XG4gICAgICAgICdwaG9uZU51bWJlcicgfCAnbGluaycgfCAnYWRkcmVzcycgfCAnY2FsZW5kYXJFdmVudCcgfCAnbm9uZScgfCAnYWxsJyxcbiAgICAgID4sXG4gID4pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBjYXJldCBpcyBoaWRkZW4uIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGBmYWxzZWAuXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgc3VwcG9ydGVkIG9ubHkgZm9yIHNpbmdsZS1saW5lIFRleHRJbnB1dCBjb21wb25lbnQgb24gaU9TLlxuICAgKi9cbiAgY2FyZXRIaWRkZW46IFByb3BUeXBlcy5ib29sLFxuICAvKlxuICAgKiBJZiBgdHJ1ZWAsIGNvbnRleHRNZW51SGlkZGVuIGlzIGhpZGRlbi4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgYGZhbHNlYC5cbiAgICovXG4gIGNvbnRleHRNZW51SGlkZGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEFuIG9wdGlvbmFsIGlkZW50aWZpZXIgd2hpY2ggbGlua3MgYSBjdXN0b20gSW5wdXRBY2Nlc3NvcnlWaWV3IHRvXG4gICAqIHRoaXMgdGV4dCBpbnB1dC4gVGhlIElucHV0QWNjZXNzb3J5VmlldyBpcyByZW5kZXJlZCBhYm92ZSB0aGVcbiAgICoga2V5Ym9hcmQgd2hlbiB0aGlzIHRleHQgaW5wdXQgaXMgZm9jdXNlZC5cbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgaW5wdXRBY2Nlc3NvcnlWaWV3SUQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBHaXZlIHRoZSBrZXlib2FyZCBhbmQgdGhlIHN5c3RlbSBpbmZvcm1hdGlvbiBhYm91dCB0aGVcbiAgICogZXhwZWN0ZWQgc2VtYW50aWMgbWVhbmluZyBmb3IgdGhlIGNvbnRlbnQgdGhhdCB1c2VycyBlbnRlci5cbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgdGV4dENvbnRlbnRUeXBlOiAoUHJvcFR5cGVzLm9uZU9mKFtcbiAgICAnbm9uZScsXG4gICAgJ1VSTCcsXG4gICAgJ2FkZHJlc3NDaXR5JyxcbiAgICAnYWRkcmVzc0NpdHlBbmRTdGF0ZScsXG4gICAgJ2FkZHJlc3NTdGF0ZScsXG4gICAgJ2NvdW50cnlOYW1lJyxcbiAgICAnY3JlZGl0Q2FyZE51bWJlcicsXG4gICAgJ2VtYWlsQWRkcmVzcycsXG4gICAgJ2ZhbWlseU5hbWUnLFxuICAgICdmdWxsU3RyZWV0QWRkcmVzcycsXG4gICAgJ2dpdmVuTmFtZScsXG4gICAgJ2pvYlRpdGxlJyxcbiAgICAnbG9jYXRpb24nLFxuICAgICdtaWRkbGVOYW1lJyxcbiAgICAnbmFtZScsXG4gICAgJ25hbWVQcmVmaXgnLFxuICAgICduYW1lU3VmZml4JyxcbiAgICAnbmlja25hbWUnLFxuICAgICdvcmdhbml6YXRpb25OYW1lJyxcbiAgICAncG9zdGFsQ29kZScsXG4gICAgJ3N0cmVldEFkZHJlc3NMaW5lMScsXG4gICAgJ3N0cmVldEFkZHJlc3NMaW5lMicsXG4gICAgJ3N1YmxvY2FsaXR5JyxcbiAgICAndGVsZXBob25lTnVtYmVyJyxcbiAgICAndXNlcm5hbWUnLFxuICAgICdwYXNzd29yZCcsXG4gICAgJ25ld1Bhc3N3b3JkJyxcbiAgICAnb25lVGltZUNvZGUnLFxuICBdKTogUmVhY3QkUHJvcFR5cGUkUHJpbWl0aXZlPFxuICAgIHwgJ25vbmUnXG4gICAgfCAnVVJMJ1xuICAgIHwgJ2FkZHJlc3NDaXR5J1xuICAgIHwgJ2FkZHJlc3NDaXR5QW5kU3RhdGUnXG4gICAgfCAnYWRkcmVzc1N0YXRlJ1xuICAgIHwgJ2NvdW50cnlOYW1lJ1xuICAgIHwgJ2NyZWRpdENhcmROdW1iZXInXG4gICAgfCAnZW1haWxBZGRyZXNzJ1xuICAgIHwgJ2ZhbWlseU5hbWUnXG4gICAgfCAnZnVsbFN0cmVldEFkZHJlc3MnXG4gICAgfCAnZ2l2ZW5OYW1lJ1xuICAgIHwgJ2pvYlRpdGxlJ1xuICAgIHwgJ2xvY2F0aW9uJ1xuICAgIHwgJ21pZGRsZU5hbWUnXG4gICAgfCAnbmFtZSdcbiAgICB8ICduYW1lUHJlZml4J1xuICAgIHwgJ25hbWVTdWZmaXgnXG4gICAgfCAnbmlja25hbWUnXG4gICAgfCAnb3JnYW5pemF0aW9uTmFtZSdcbiAgICB8ICdwb3N0YWxDb2RlJ1xuICAgIHwgJ3N0cmVldEFkZHJlc3NMaW5lMSdcbiAgICB8ICdzdHJlZXRBZGRyZXNzTGluZTInXG4gICAgfCAnc3VibG9jYWxpdHknXG4gICAgfCAndGVsZXBob25lTnVtYmVyJ1xuICAgIHwgJ3VzZXJuYW1lJ1xuICAgIHwgJ3Bhc3N3b3JkJ1xuICAgIHwgJ25ld1Bhc3N3b3JkJ1xuICAgIHwgJ29uZVRpbWVDb2RlJyxcbiAgPiksXG4gIC8qKlxuICAgKiBXaGVuIGBmYWxzZWAsIGl0IHdpbGwgcHJldmVudCB0aGUgc29mdCBrZXlib2FyZCBmcm9tIHNob3dpbmcgd2hlbiB0aGUgZmllbGQgaXMgZm9jdXNlZC5cbiAgICogRGVmYXVsdHMgdG8gYHRydWVgLlxuICAgKi9cbiAgc2hvd1NvZnRJbnB1dE9uRm9jdXM6IFByb3BUeXBlcy5ib29sLFxufTtcbiJdfQ==
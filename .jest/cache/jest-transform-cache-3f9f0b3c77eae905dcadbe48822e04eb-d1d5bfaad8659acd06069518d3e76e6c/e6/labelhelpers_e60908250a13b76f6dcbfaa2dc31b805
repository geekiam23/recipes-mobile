07b8d2783dbde928d8f244ea3f660c20
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLabels = getLabels;
exports.getRealLabels = getRealLabels;
exports.getLabelContent = getLabelContent;

var _helpers = require("./helpers");

var labelledNodeNames = ['button', 'meter', 'output', 'progress', 'select', 'textarea', 'input'];

function getTextContent(node) {
  if (labelledNodeNames.includes(node.nodeName.toLowerCase())) {
    return '';
  }

  if (node.nodeType === _helpers.TEXT_NODE) return node.textContent;
  return Array.from(node.childNodes).map(function (childNode) {
    return getTextContent(childNode);
  }).join('');
}

function getLabelContent(element) {
  var textContent;

  if (element.tagName.toLowerCase() === 'label') {
    textContent = getTextContent(element);
  } else {
    textContent = element.value || element.textContent;
  }

  return textContent;
}

function getRealLabels(element) {
  if (element.labels !== undefined) {
    var _labels;

    return (_labels = element.labels) != null ? _labels : [];
  }

  if (!isLabelable(element)) return [];
  var labels = element.ownerDocument.querySelectorAll('label');
  return Array.from(labels).filter(function (label) {
    return label.control === element;
  });
}

function isLabelable(element) {
  return /BUTTON|METER|OUTPUT|PROGRESS|SELECT|TEXTAREA/.test(element.tagName) || element.tagName === 'INPUT' && element.getAttribute('type') !== 'hidden';
}

function getLabels(container, element) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref$selector = _ref.selector,
      selector = _ref$selector === void 0 ? '*' : _ref$selector;

  var ariaLabelledBy = element.getAttribute('aria-labelledby');
  var labelsId = ariaLabelledBy ? ariaLabelledBy.split(' ') : [];
  return labelsId.length ? labelsId.map(function (labelId) {
    var labellingElement = container.querySelector("[id=\"" + labelId + "\"]");
    return labellingElement ? {
      content: getLabelContent(labellingElement),
      formControl: null
    } : {
      content: '',
      formControl: null
    };
  }) : Array.from(getRealLabels(element)).map(function (label) {
    var textToMatch = getLabelContent(label);
    var formControlSelector = 'button, input, meter, output, progress, select, textarea';
    var labelledFormControl = Array.from(label.querySelectorAll(formControlSelector)).filter(function (formControlElement) {
      return formControlElement.matches(selector);
    })[0];
    return {
      content: textToMatch,
      formControl: labelledFormControl
    };
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxhYmVsLWhlbHBlcnMuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZXRMYWJlbHMiLCJnZXRSZWFsTGFiZWxzIiwiZ2V0TGFiZWxDb250ZW50IiwiX2hlbHBlcnMiLCJyZXF1aXJlIiwibGFiZWxsZWROb2RlTmFtZXMiLCJnZXRUZXh0Q29udGVudCIsIm5vZGUiLCJpbmNsdWRlcyIsIm5vZGVOYW1lIiwidG9Mb3dlckNhc2UiLCJub2RlVHlwZSIsIlRFWFRfTk9ERSIsInRleHRDb250ZW50IiwiQXJyYXkiLCJmcm9tIiwiY2hpbGROb2RlcyIsIm1hcCIsImNoaWxkTm9kZSIsImpvaW4iLCJlbGVtZW50IiwidGFnTmFtZSIsImxhYmVscyIsInVuZGVmaW5lZCIsIl9sYWJlbHMiLCJpc0xhYmVsYWJsZSIsIm93bmVyRG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZmlsdGVyIiwibGFiZWwiLCJjb250cm9sIiwidGVzdCIsImdldEF0dHJpYnV0ZSIsImNvbnRhaW5lciIsInNlbGVjdG9yIiwiYXJpYUxhYmVsbGVkQnkiLCJsYWJlbHNJZCIsInNwbGl0IiwibGVuZ3RoIiwibGFiZWxJZCIsImxhYmVsbGluZ0VsZW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY29udGVudCIsImZvcm1Db250cm9sIiwidGV4dFRvTWF0Y2giLCJmb3JtQ29udHJvbFNlbGVjdG9yIiwibGFiZWxsZWRGb3JtQ29udHJvbCIsImZvcm1Db250cm9sRWxlbWVudCIsIm1hdGNoZXMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDQyxFQUFBQSxLQUFLLEVBQUU7QUFEb0MsQ0FBN0M7QUFHQUQsT0FBTyxDQUFDRSxTQUFSLEdBQW9CQSxTQUFwQjtBQUNBRixPQUFPLENBQUNHLGFBQVIsR0FBd0JBLGFBQXhCO0FBQ0FILE9BQU8sQ0FB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QXpCO0FBQ0EsV0FBT0MsZ0JBQWdCLEdBQUc7QUFDeEJFLE1BQUFBLE9BQU8sRUFBRXhDLGVBQWUsQ0FBQ3NDLGdCQUFELENBREE7QUFFeEJHLE1BQUFBLFdBQVcsRUFBRTtBQUZXLEtBQUgsR0FHbkI7QUFDRkQsTUFBQUEsT0FBTyxFQUFFLEVBRFA7QUFFRkMsTUFBQUEsV0FBVyxFQUFFO0FBRlgsS0FISjtBQU9ELEdBVHdCLENBQWxCLEdBU0Y3QixLQUFLLENBQUNDLElBQU4sQ0FBV2QsYUFBYSxDQUFDbUIsT0FBRCxDQUF4QixFQUFtQ0gsR0FBbkMsQ0FBdUMsVUFBQVksS0FBSyxFQUFJO0FBQ25ELFFBQU1lLFdBQVcsR0FBRzFDLGVBQWUsQ0FBQzJCLEtBQUQsQ0FBbkM7QUFDQSxRQUFNZ0IsbUJBQW1CLEdBQUcsMERBQTVCO0FBQ0EsUUFBTUMsbUJBQW1CLEdBQUdoQyxLQUFLLENBQUNDLElBQU4sQ0FBV2MsS0FBSyxDQUFDRixnQkFBTixDQUF1QmtCLG1CQUF2QixDQUFYLEVBQXdEakIsTUFBeEQsQ0FBK0QsVUFBQW1CLGtCQUFrQjtBQUFBLGFBQUlBLGtCQUFrQixDQUFDQyxPQUFuQixDQUEyQmQsUUFBM0IsQ0FBSjtBQUFBLEtBQWpGLEVBQTJILENBQTNILENBQTVCO0FBQ0EsV0FBTztBQUNMUSxNQUFBQSxPQUFPLEVBQUVFLFdBREo7QUFFTEQsTUFBQUEsV0FBVyxFQUFFRztBQUZSLEtBQVA7QUFJRCxHQVJJLENBVEw7QUFrQkQiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZ2V0TGFiZWxzID0gZ2V0TGFiZWxzO1xuZXhwb3J0cy5nZXRSZWFsTGFiZWxzID0gZ2V0UmVhbExhYmVscztcbmV4cG9ydHMuZ2V0TGFiZWxDb250ZW50ID0gZ2V0TGFiZWxDb250ZW50O1xuXG52YXIgX2hlbHBlcnMgPSByZXF1aXJlKFwiLi9oZWxwZXJzXCIpO1xuXG5jb25zdCBsYWJlbGxlZE5vZGVOYW1lcyA9IFsnYnV0dG9uJywgJ21ldGVyJywgJ291dHB1dCcsICdwcm9ncmVzcycsICdzZWxlY3QnLCAndGV4dGFyZWEnLCAnaW5wdXQnXTtcblxuZnVuY3Rpb24gZ2V0VGV4dENvbnRlbnQobm9kZSkge1xuICBpZiAobGFiZWxsZWROb2RlTmFtZXMuaW5jbHVkZXMobm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIGlmIChub2RlLm5vZGVUeXBlID09PSBfaGVscGVycy5URVhUX05PREUpIHJldHVybiBub2RlLnRleHRDb250ZW50O1xuICByZXR1cm4gQXJyYXkuZnJvbShub2RlLmNoaWxkTm9kZXMpLm1hcChjaGlsZE5vZGUgPT4gZ2V0VGV4dENvbnRlbnQoY2hpbGROb2RlKSkuam9pbignJyk7XG59XG5cbmZ1bmN0aW9uIGdldExhYmVsQ29udGVudChlbGVtZW50KSB7XG4gIGxldCB0ZXh0Q29udGVudDtcblxuICBpZiAoZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdsYWJlbCcpIHtcbiAgICB0ZXh0Q29udGVudCA9IGdldFRleHRDb250ZW50KGVsZW1lbnQpO1xuICB9IGVsc2Uge1xuICAgIHRleHRDb250ZW50ID0gZWxlbWVudC52YWx1ZSB8fCBlbGVtZW50LnRleHRDb250ZW50O1xuICB9XG5cbiAgcmV0dXJuIHRleHRDb250ZW50O1xufSAvLyBCYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vZXBzMWxvbi9kb20tYWNjZXNzaWJpbGl0eS1hcGkvcHVsbC8zNTJcblxuXG5mdW5jdGlvbiBnZXRSZWFsTGFiZWxzKGVsZW1lbnQpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bm5lY2Vzc2FyeS1jb25kaXRpb24gLS0gdHlwZXMgYXJlIG5vdCBhd2FyZSBvZiBvbGRlciBicm93c2VycyB0aGF0IGRvbid0IGltcGxlbWVudCBgbGFiZWxzYFxuICBpZiAoZWxlbWVudC5sYWJlbHMgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBfbGFiZWxzO1xuXG4gICAgcmV0dXJuIChfbGFiZWxzID0gZWxlbWVudC5sYWJlbHMpICE9IG51bGwgPyBfbGFiZWxzIDogW107XG4gIH1cblxuICBpZiAoIWlzTGFiZWxhYmxlKGVsZW1lbnQpKSByZXR1cm4gW107XG4gIGNvbnN0IGxhYmVscyA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdsYWJlbCcpO1xuICByZXR1cm4gQXJyYXkuZnJvbShsYWJlbHMpLmZpbHRlcihsYWJlbCA9PiBsYWJlbC5jb250cm9sID09PSBlbGVtZW50KTtcbn1cblxuZnVuY3Rpb24gaXNMYWJlbGFibGUoZWxlbWVudCkge1xuICByZXR1cm4gL0JVVFRPTnxNRVRFUnxPVVRQVVR8UFJPR1JFU1N8U0VMRUNUfFRFWFRBUkVBLy50ZXN0KGVsZW1lbnQudGFnTmFtZSkgfHwgZWxlbWVudC50YWdOYW1lID09PSAnSU5QVVQnICYmIGVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0eXBlJykgIT09ICdoaWRkZW4nO1xufVxuXG5mdW5jdGlvbiBnZXRMYWJlbHMoY29udGFpbmVyLCBlbGVtZW50LCB7XG4gIHNlbGVjdG9yID0gJyonXG59ID0ge30pIHtcbiAgY29uc3QgYXJpYUxhYmVsbGVkQnkgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbGxlZGJ5Jyk7XG4gIGNvbnN0IGxhYmVsc0lkID0gYXJpYUxhYmVsbGVkQnkgPyBhcmlhTGFiZWxsZWRCeS5zcGxpdCgnICcpIDogW107XG4gIHJldHVybiBsYWJlbHNJZC5sZW5ndGggPyBsYWJlbHNJZC5tYXAobGFiZWxJZCA9PiB7XG4gICAgY29uc3QgbGFiZWxsaW5nRWxlbWVudCA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKGBbaWQ9XCIke2xhYmVsSWR9XCJdYCk7XG4gICAgcmV0dXJuIGxhYmVsbGluZ0VsZW1lbnQgPyB7XG4gICAgICBjb250ZW50OiBnZXRMYWJlbENvbnRlbnQobGFiZWxsaW5nRWxlbWVudCksXG4gICAgICBmb3JtQ29udHJvbDogbnVsbFxuICAgIH0gOiB7XG4gICAgICBjb250ZW50OiAnJyxcbiAgICAgIGZvcm1Db250cm9sOiBudWxsXG4gICAgfTtcbiAgfSkgOiBBcnJheS5mcm9tKGdldFJlYWxMYWJlbHMoZWxlbWVudCkpLm1hcChsYWJlbCA9PiB7XG4gICAgY29uc3QgdGV4dFRvTWF0Y2ggPSBnZXRMYWJlbENvbnRlbnQobGFiZWwpO1xuICAgIGNvbnN0IGZvcm1Db250cm9sU2VsZWN0b3IgPSAnYnV0dG9uLCBpbnB1dCwgbWV0ZXIsIG91dHB1dCwgcHJvZ3Jlc3MsIHNlbGVjdCwgdGV4dGFyZWEnO1xuICAgIGNvbnN0IGxhYmVsbGVkRm9ybUNvbnRyb2wgPSBBcnJheS5mcm9tKGxhYmVsLnF1ZXJ5U2VsZWN0b3JBbGwoZm9ybUNvbnRyb2xTZWxlY3RvcikpLmZpbHRlcihmb3JtQ29udHJvbEVsZW1lbnQgPT4gZm9ybUNvbnRyb2xFbGVtZW50Lm1hdGNoZXMoc2VsZWN0b3IpKVswXTtcbiAgICByZXR1cm4ge1xuICAgICAgY29udGVudDogdGV4dFRvTWF0Y2gsXG4gICAgICBmb3JtQ29udHJvbDogbGFiZWxsZWRGb3JtQ29udHJvbFxuICAgIH07XG4gIH0pO1xufSJdfQ==
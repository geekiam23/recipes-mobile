6c74b6b9a4ce27c996a344d10fdac1e2
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findByPlaceholderText = exports.findAllByPlaceholderText = exports.getAllByPlaceholderText = exports.getByPlaceholderText = exports.queryAllByPlaceholderText = exports.queryByPlaceholderText = void 0;

var _queryHelpers = require("../query-helpers");

var _helpers = require("../helpers");

var _allUtils = require("./all-utils");

var queryAllByPlaceholderText = function queryAllByPlaceholderText() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  (0, _helpers.checkContainerType)(args[0]);
  return (0, _allUtils.queryAllByAttribute).apply(void 0, ['placeholder'].concat(args));
};

var getMultipleError = function getMultipleError(c, text) {
  return "Found multiple elements with the placeholder text of: " + text;
};

var getMissingError = function getMissingError(c, text) {
  return "Unable to find an element with the placeholder text of: " + text;
};

var queryAllByPlaceholderTextWithSuggestions = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByPlaceholderText, queryAllByPlaceholderText.name, 'queryAll');
exports.queryAllByPlaceholderText = queryAllByPlaceholderTextWithSuggestions;

var _ref = (0, _allUtils.buildQueries)(queryAllByPlaceholderText, getMultipleError, getMissingError),
    _ref2 = (0, _slicedToArray2.default)(_ref, 5),
    queryByPlaceholderText = _ref2[0],
    getAllByPlaceholderText = _ref2[1],
    getByPlaceholderText = _ref2[2],
    findAllByPlaceholderText = _ref2[3],
    findByPlaceholderText = _ref2[4];

exports.findByPlaceholderText = findByPlaceholderText;
exports.findAllByPlaceholderText = findAllByPlaceholderText;
exports.getByPlaceholderText = getByPlaceholderText;
exports.getAllByPlaceholderText = getAllByPlaceholderText;
exports.queryByPlaceholderText = queryByPlaceholderText;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBsYWNlaG9sZGVyLXRleHQuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJmaW5kQnlQbGFjZWhvbGRlclRleHQiLCJmaW5kQWxsQnlQbGFjZWhvbGRlclRleHQiLCJnZXRBbGxCeVBsYWNlaG9sZGVyVGV4dCIsImdldEJ5UGxhY2Vob2xkZXJUZXh0IiwicXVlcnlBbGxCeVBsYWNlaG9sZGVyVGV4dCIsInF1ZXJ5QnlQbGFjZWhvbGRlclRleHQiLCJfcXVlcnlIZWxwZXJzIiwicmVxdWlyZSIsIl9oZWxwZXJzIiwiX2FsbFV0aWxzIiwiYXJncyIsImNoZWNrQ29udGFpbmVyVHlwZSIsInF1ZXJ5QWxsQnlBdHRyaWJ1dGUiLCJnZXRNdWx0aXBsZUVycm9yIiwiYyIsInRleHQiLCJnZXRNaXNzaW5nRXJyb3IiLCJxdWVyeUFsbEJ5UGxhY2Vob2xkZXJUZXh0V2l0aFN1Z2dlc3Rpb25zIiwid3JhcEFsbEJ5UXVlcnlXaXRoU3VnZ2VzdGlvbiIsIm5hbWUiLCJidWlsZFF1ZXJpZXMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFFQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsRUFBQUEsS0FBSyxFQUFFO0FBRG9DLENBQTdDO0FBR0FELE9BQU8sQ0FBQ0UscUJBQVIsR0FBZ0NGLE9BQU8sQ0FBQ0csd0JBQVIsR0FBbUNILE9BQU8sQ0FBQ0ksdUJBQVIsR0FBa0NKLE9BQU8sQ0FBQ0ssb0JBQVIsR0FBK0JMLE9BQU8sQ0FBQ00seUJBQVIsR0FBb0NOLE9BQU8sQ0FBQ08sc0JBQVIsR0FBaUMsS0FBSyxDQUE5TTs7QUFFQSxJQUFJQyxhQUFhLEdBQUdDLE9BQU8sb0JBQTNCOztBQUVBLElBQUlDLFFBQVEsR0FBR0QsT0FBTyxjQUF0Qjs7QUFFQSxJQUFJRSxTQUFTLEdBQUdGLE9BQU8sZUFBdkI7O0FBRUEsSUFBTUgseUJBQXlCLEdBQUcsU0FBNUJBLHlCQUE0QixHQUFhO0FBQUEsb0NBQVRNLElBQVM7QUFBVEEsSUFBQUEsSUFBUztBQUFBOztBQUM3QyxHQUFDLEdBQUdGLFFBQVEsQ0FBQ0csa0JBQWIsRUFBaUNELElBQUksQ0FBQyxDQUFELENBQXJDO0FBSUEsU0FBTyxDQUFDLEdBQUdELFNBQVMsQ0FBQ0csbUJBQWQsaUJBQW1DLGFBQW5DLFNBQXFERixJQUFyRCxFQUFQO0FBQ0QsQ0FORDs7QUFRQSxJQUFNRyxnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQW1CLENBQUNDLENBQUQsRUFBSUMsSUFBSjtBQUFBLG9FQUFzRUEsSUFBdEU7QUFBQSxDQUF6Qjs7QUFFQSxJQUFNQyxlQUFlLEdBQUcsU0FBbEJBLGVBQWtCLENBQUNGLENBQUQsRUFBSUMsSUFBSjtBQUFBLHNFQUF3RUEsSUFBeEU7QUFBQSxDQUF4Qjs7QUFFQSxJQUFNRSx3Q0FBd0MsR0FBRyxDQUFDLEdBQUdYLGFBQWEsQ0FBQ1ksNEJBQWxCLEVBQWdEZCx5QkFBaEQsRUFBMkVBLHlCQUF5QixDQUFDZSxJQUFyRyxFQUEyRyxVQUEzRyxDQUFqRDtBQUNBckIsT0FBTyxDQUFDTSx5QkFBUixHQUFvQ2Esd0NBQXBDOztBQUNBLFdBQWlJLENBQUMsR0FBR1IsU0FBUyxDQUFDVyxZQUFkLEVBQTRCaEIseUJBQTVCLEVBQXVEUyxnQkFBdkQsRUFBeUVHLGVBQXpFLENBQWpJO0FBQUE7QUFBQSxJQUFPWCxzQkFBUDtBQUFBLElBQStCSCx1QkFBL0I7QUFBQSxJQUF3REMsb0JBQXhEO0FBQUEsSUFBOEVGLHdCQUE5RTtBQUFBLElBQXdHRCxxQkFBeEc7O0FBQ0FGLE9BQU8sQ0FBQ0UscUJBQVIsR0FBZ0NBLHFCQUFoQztBQUNBRixPQUFPLENBQUNHLHdCQUFSLEdBQW1DQSx3QkFBbkM7QUFDQUgsT0FBTyxDQUFDSyxvQkFBUixHQUErQkEsb0JBQS9CO0FBQ0FMLE9BQU8sQ0FBQ0ksdUJBQVIsR0FBa0NBLHVCQUFsQztBQUNBSixPQUFPLENBQUNPLHNCQUFSLEdBQWlDQSxzQkFBakMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZmluZEJ5UGxhY2Vob2xkZXJUZXh0ID0gZXhwb3J0cy5maW5kQWxsQnlQbGFjZWhvbGRlclRleHQgPSBleHBvcnRzLmdldEFsbEJ5UGxhY2Vob2xkZXJUZXh0ID0gZXhwb3J0cy5nZXRCeVBsYWNlaG9sZGVyVGV4dCA9IGV4cG9ydHMucXVlcnlBbGxCeVBsYWNlaG9sZGVyVGV4dCA9IGV4cG9ydHMucXVlcnlCeVBsYWNlaG9sZGVyVGV4dCA9IHZvaWQgMDtcblxudmFyIF9xdWVyeUhlbHBlcnMgPSByZXF1aXJlKFwiLi4vcXVlcnktaGVscGVyc1wiKTtcblxudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4uL2hlbHBlcnNcIik7XG5cbnZhciBfYWxsVXRpbHMgPSByZXF1aXJlKFwiLi9hbGwtdXRpbHNcIik7XG5cbmNvbnN0IHF1ZXJ5QWxsQnlQbGFjZWhvbGRlclRleHQgPSAoLi4uYXJncykgPT4ge1xuICAoMCwgX2hlbHBlcnMuY2hlY2tDb250YWluZXJUeXBlKShhcmdzWzBdKTsgLy8gVE9ETzogUmVtb3ZlIGlnbm9yZSBhZnRlciBgcXVlcnlBbGxCeUF0dHJpYnV0ZWAgd2lsbCBiZSBtb3ZlZCB0byBUU1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG4gIC8vIEB0cy1leHBlY3QtZXJyb3JcblxuICByZXR1cm4gKDAsIF9hbGxVdGlscy5xdWVyeUFsbEJ5QXR0cmlidXRlKSgncGxhY2Vob2xkZXInLCAuLi5hcmdzKTtcbn07XG5cbmNvbnN0IGdldE11bHRpcGxlRXJyb3IgPSAoYywgdGV4dCkgPT4gYEZvdW5kIG11bHRpcGxlIGVsZW1lbnRzIHdpdGggdGhlIHBsYWNlaG9sZGVyIHRleHQgb2Y6ICR7dGV4dH1gO1xuXG5jb25zdCBnZXRNaXNzaW5nRXJyb3IgPSAoYywgdGV4dCkgPT4gYFVuYWJsZSB0byBmaW5kIGFuIGVsZW1lbnQgd2l0aCB0aGUgcGxhY2Vob2xkZXIgdGV4dCBvZjogJHt0ZXh0fWA7XG5cbmNvbnN0IHF1ZXJ5QWxsQnlQbGFjZWhvbGRlclRleHRXaXRoU3VnZ2VzdGlvbnMgPSAoMCwgX3F1ZXJ5SGVscGVycy53cmFwQWxsQnlRdWVyeVdpdGhTdWdnZXN0aW9uKShxdWVyeUFsbEJ5UGxhY2Vob2xkZXJUZXh0LCBxdWVyeUFsbEJ5UGxhY2Vob2xkZXJUZXh0Lm5hbWUsICdxdWVyeUFsbCcpO1xuZXhwb3J0cy5xdWVyeUFsbEJ5UGxhY2Vob2xkZXJUZXh0ID0gcXVlcnlBbGxCeVBsYWNlaG9sZGVyVGV4dFdpdGhTdWdnZXN0aW9ucztcbmNvbnN0IFtxdWVyeUJ5UGxhY2Vob2xkZXJUZXh0LCBnZXRBbGxCeVBsYWNlaG9sZGVyVGV4dCwgZ2V0QnlQbGFjZWhvbGRlclRleHQsIGZpbmRBbGxCeVBsYWNlaG9sZGVyVGV4dCwgZmluZEJ5UGxhY2Vob2xkZXJUZXh0XSA9ICgwLCBfYWxsVXRpbHMuYnVpbGRRdWVyaWVzKShxdWVyeUFsbEJ5UGxhY2Vob2xkZXJUZXh0LCBnZXRNdWx0aXBsZUVycm9yLCBnZXRNaXNzaW5nRXJyb3IpO1xuZXhwb3J0cy5maW5kQnlQbGFjZWhvbGRlclRleHQgPSBmaW5kQnlQbGFjZWhvbGRlclRleHQ7XG5leHBvcnRzLmZpbmRBbGxCeVBsYWNlaG9sZGVyVGV4dCA9IGZpbmRBbGxCeVBsYWNlaG9sZGVyVGV4dDtcbmV4cG9ydHMuZ2V0QnlQbGFjZWhvbGRlclRleHQgPSBnZXRCeVBsYWNlaG9sZGVyVGV4dDtcbmV4cG9ydHMuZ2V0QWxsQnlQbGFjZWhvbGRlclRleHQgPSBnZXRBbGxCeVBsYWNlaG9sZGVyVGV4dDtcbmV4cG9ydHMucXVlcnlCeVBsYWNlaG9sZGVyVGV4dCA9IHF1ZXJ5QnlQbGFjZWhvbGRlclRleHQ7Il19
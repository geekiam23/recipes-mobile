095793d17a7c0908804fd1de163a7710
var _curry2 = require("./internal/_curry2");

var _isInteger = require("./internal/_isInteger");

var _isArray = require("./internal/_isArray");

var assoc = require("./assoc");

var dissoc = require("./dissoc");

var remove = require("./remove");

var update = require("./update");

var dissocPath = _curry2(function dissocPath(path, obj) {
  switch (path.length) {
    case 0:
      return obj;

    case 1:
      return _isInteger(path[0]) && _isArray(obj) ? remove(path[0], 1, obj) : dissoc(path[0], obj);

    default:
      var head = path[0];
      var tail = Array.prototype.slice.call(path, 1);

      if (obj[head] == null) {
        return obj;
      } else if (_isInteger(head) && _isArray(obj)) {
        return update(head, dissocPath(tail, obj[head]), obj);
      } else {
        return assoc(head, dissocPath(tail, obj[head]), obj);
      }

  }
});

module.exports = dissocPath;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRpc3NvY1BhdGguanMiXSwibmFtZXMiOlsiX2N1cnJ5MiIsInJlcXVpcmUiLCJfaXNJbnRlZ2VyIiwiX2lzQXJyYXkiLCJhc3NvYyIsImRpc3NvYyIsInJlbW92ZSIsInVwZGF0ZSIsImRpc3NvY1BhdGgiLCJwYXRoIiwib2JqIiwibGVuZ3RoIiwiaGVhZCIsInRhaWwiLCJBcnJheSIsInByb3RvdHlwZSIsInNsaWNlIiwiY2FsbCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLE9BQU8sR0FBZ0JDLE9BQU8sc0JBQWxDOztBQUVBLElBQUlDLFVBQVUsR0FBZ0JELE9BQU8seUJBQXJDOztBQUVBLElBQUlFLFFBQVEsR0FBZ0JGLE9BQU8sdUJBQW5DOztBQUVBLElBQUlHLEtBQUssR0FBZ0JILE9BQU8sV0FBaEM7O0FBRUEsSUFBSUksTUFBTSxHQUFnQkosT0FBTyxZQUFqQzs7QUFFQSxJQUFJSyxNQUFNLEdBQWdCTCxPQUFPLFlBQWpDOztBQUVBLElBQUlNLE1BQU0sR0FBZ0JOLE9BQU8sWUFBakM7O0FBdUJBLElBQUlPLFVBQVUsR0FBZ0JSLE9BQU8sQ0FBQyxTQUFTUSxVQUFULENBQW9CQyxJQUFwQixFQUEwQkMsR0FBMUIsRUFBK0I7QUFDbkUsVUFBUUQsSUFBSSxDQUFDRSxNQUFiO0FBQ0UsU0FBSyxDQUFMO0FBQ0UsYUFBT0QsR0FBUDs7QUFDRixTQUFLLENBQUw7QUFDRSxhQUFPUixVQUFVLENBQUNPLElBQUksQ0FBQyxDQUFELENBQUwsQ0FBVixJQUF1Qk4sUUFBUSxDQUFDTyxHQUFELENBQS9CLEdBQXVDSixNQUFNLENBQUNHLElBQUksQ0FBQyxDQUFELENBQUwsRUFBVSxDQUFWLEVBQWFDLEdBQWIsQ0FBN0MsR0FBaUVMLE1BQU0sQ0FBQ0ksSUFBSSxDQUFDLENBQUQsQ0FBTCxFQUFVQyxHQUFWLENBQTlFOztBQUNGO0FBQ0UsVUFBSUUsSUFBSSxHQUFHSCxJQUFJLENBQUMsQ0FBRCxDQUFmO0FBQ0EsVUFBSUksSUFBSSxHQUFHQyxLQUFLLENBQUNDLFNBQU4sQ0FBZ0JDLEtBQWhCLENBQXNCQyxJQUF0QixDQUEyQlIsSUFBM0IsRUFBaUMsQ0FBakMsQ0FBWDs7QUFDQSxVQUFJQyxHQUFHLENBQUNFLElBQUQsQ0FBSCxJQUFhLElBQWpCLEVBQXVCO0FBQ3JCLGVBQU9GLEdBQVA7QUFDRCxPQUZELE1BRU8sSUFBSVIsVUFBVSxDQUFDVSxJQUFELENBQVYsSUFBb0JULFFBQVEsQ0FBQ08sR0FBRCxDQUFoQyxFQUF1QztBQUM1QyxlQUFPSCxNQUFNLENBQUNLLElBQUQsRUFBT0osVUFBVSxDQUFDSyxJQUFELEVBQU9ILEdBQUcsQ0FBQ0UsSUFBRCxDQUFWLENBQWpCLEVBQW9DRixHQUFwQyxDQUFiO0FBQ0QsT0FGTSxNQUVBO0FBQ0wsZUFBT04sS0FBSyxDQUFDUSxJQUFELEVBQU9KLFVBQVUsQ0FBQ0ssSUFBRCxFQUFPSCxHQUFHLENBQUNFLElBQUQsQ0FBVixDQUFqQixFQUFvQ0YsR0FBcEMsQ0FBWjtBQUNEOztBQWRMO0FBZ0JELENBakJvQyxDQUFyQzs7QUFrQkFRLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlgsVUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MiA9IC8qI19fUFVSRV9fKi9yZXF1aXJlKCcuL2ludGVybmFsL19jdXJyeTInKTtcblxudmFyIF9pc0ludGVnZXIgPSAvKiNfX1BVUkVfXyovcmVxdWlyZSgnLi9pbnRlcm5hbC9faXNJbnRlZ2VyJyk7XG5cbnZhciBfaXNBcnJheSA9IC8qI19fUFVSRV9fKi9yZXF1aXJlKCcuL2ludGVybmFsL19pc0FycmF5Jyk7XG5cbnZhciBhc3NvYyA9IC8qI19fUFVSRV9fKi9yZXF1aXJlKCcuL2Fzc29jJyk7XG5cbnZhciBkaXNzb2MgPSAvKiNfX1BVUkVfXyovcmVxdWlyZSgnLi9kaXNzb2MnKTtcblxudmFyIHJlbW92ZSA9IC8qI19fUFVSRV9fKi9yZXF1aXJlKCcuL3JlbW92ZScpO1xuXG52YXIgdXBkYXRlID0gLyojX19QVVJFX18qL3JlcXVpcmUoJy4vdXBkYXRlJyk7XG5cbi8qKlxuICogTWFrZXMgYSBzaGFsbG93IGNsb25lIG9mIGFuIG9iamVjdCwgb21pdHRpbmcgdGhlIHByb3BlcnR5IGF0IHRoZSBnaXZlbiBwYXRoLlxuICogTm90ZSB0aGF0IHRoaXMgY29waWVzIGFuZCBmbGF0dGVucyBwcm90b3R5cGUgcHJvcGVydGllcyBvbnRvIHRoZSBuZXcgb2JqZWN0XG4gKiBhcyB3ZWxsLiBBbGwgbm9uLXByaW1pdGl2ZSBwcm9wZXJ0aWVzIGFyZSBjb3BpZWQgYnkgcmVmZXJlbmNlLlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjExLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEB0eXBlZGVmbiBJZHggPSBTdHJpbmcgfCBJbnRcbiAqIEBzaWcgW0lkeF0gLT4ge2s6IHZ9IC0+IHtrOiB2fVxuICogQHBhcmFtIHtBcnJheX0gcGF0aCBUaGUgcGF0aCB0byB0aGUgdmFsdWUgdG8gb21pdFxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIGNsb25lXG4gKiBAcmV0dXJuIHtPYmplY3R9IEEgbmV3IG9iamVjdCB3aXRob3V0IHRoZSBwcm9wZXJ0eSBhdCBwYXRoXG4gKiBAc2VlIFIuYXNzb2NQYXRoXG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgUi5kaXNzb2NQYXRoKFsnYScsICdiJywgJ2MnXSwge2E6IHtiOiB7YzogNDJ9fX0pOyAvLz0+IHthOiB7Yjoge319fVxuICovXG5cblxudmFyIGRpc3NvY1BhdGggPSAvKiNfX1BVUkVfXyovX2N1cnJ5MihmdW5jdGlvbiBkaXNzb2NQYXRoKHBhdGgsIG9iaikge1xuICBzd2l0Y2ggKHBhdGgubGVuZ3RoKSB7XG4gICAgY2FzZSAwOlxuICAgICAgcmV0dXJuIG9iajtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gX2lzSW50ZWdlcihwYXRoWzBdKSAmJiBfaXNBcnJheShvYmopID8gcmVtb3ZlKHBhdGhbMF0sIDEsIG9iaikgOiBkaXNzb2MocGF0aFswXSwgb2JqKTtcbiAgICBkZWZhdWx0OlxuICAgICAgdmFyIGhlYWQgPSBwYXRoWzBdO1xuICAgICAgdmFyIHRhaWwgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChwYXRoLCAxKTtcbiAgICAgIGlmIChvYmpbaGVhZF0gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgfSBlbHNlIGlmIChfaXNJbnRlZ2VyKGhlYWQpICYmIF9pc0FycmF5KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZShoZWFkLCBkaXNzb2NQYXRoKHRhaWwsIG9ialtoZWFkXSksIG9iaik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYXNzb2MoaGVhZCwgZGlzc29jUGF0aCh0YWlsLCBvYmpbaGVhZF0pLCBvYmopO1xuICAgICAgfVxuICB9XG59KTtcbm1vZHVsZS5leHBvcnRzID0gZGlzc29jUGF0aDsiXX0=
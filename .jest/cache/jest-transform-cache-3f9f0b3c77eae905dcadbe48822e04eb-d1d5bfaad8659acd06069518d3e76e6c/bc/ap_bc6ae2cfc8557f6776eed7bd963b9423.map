{"version":3,"sources":["ap.js"],"names":["_concat","require","_curry2","_reduce","map","ap","applyF","applyX","x","acc","f","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAAgBC,OAAO,sBAAlC;;AAEA,IAAIC,OAAO,GAAgBD,OAAO,sBAAlC;;AAEA,IAAIE,OAAO,GAAgBF,OAAO,sBAAlC;;AAEA,IAAIG,GAAG,GAAgBH,OAAO,SAA9B;;AA8BA,IAAII,EAAE,GAAgBH,OAAO,CAAC,SAASG,EAAT,CAAYC,MAAZ,EAAoBC,MAApB,EAA4B;AACxD,SAAO,OAAOA,MAAM,CAAC,iBAAD,CAAb,KAAqC,UAArC,GAAkDA,MAAM,CAAC,iBAAD,CAAN,CAA0BD,MAA1B,CAAlD,GAAsF,OAAOA,MAAM,CAACD,EAAd,KAAqB,UAArB,GAAkCC,MAAM,CAACD,EAAP,CAAUE,MAAV,CAAlC,GAAsD,OAAOD,MAAP,KAAkB,UAAlB,GAA+B,UAAUE,CAAV,EAAa;AAC7L,WAAOF,MAAM,CAACE,CAAD,CAAN,CAAUD,MAAM,CAACC,CAAD,CAAhB,CAAP;AACD,GAFkJ,GAE/IL,OAAO,CAAC,UAAUM,GAAV,EAAeC,CAAf,EAAkB;AAC5B,WAAOV,OAAO,CAACS,GAAD,EAAML,GAAG,CAACM,CAAD,EAAIH,MAAJ,CAAT,CAAd;AACD,GAFU,EAER,EAFQ,EAEJD,MAFI,CAFX;AAKD,CAN4B,CAA7B;;AAOAK,MAAM,CAACC,OAAP,GAAiBP,EAAjB","sourcesContent":["var _concat = /*#__PURE__*/require('./internal/_concat');\n\nvar _curry2 = /*#__PURE__*/require('./internal/_curry2');\n\nvar _reduce = /*#__PURE__*/require('./internal/_reduce');\n\nvar map = /*#__PURE__*/require('./map');\n\n/**\n * ap applies a list of functions to a list of values.\n *\n * Dispatches to the `ap` method of the second argument, if present. Also\n * treats curried functions as applicatives.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig [a -> b] -> [a] -> [b]\n * @sig Apply f => f (a -> b) -> f a -> f b\n * @sig (r -> a -> b) -> (r -> a) -> (r -> b)\n * @param {*} applyF\n * @param {*} applyX\n * @return {*}\n * @example\n *\n *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]\n *      R.ap([R.concat('tasty '), R.toUpper], ['pizza', 'salad']); //=> [\"tasty pizza\", \"tasty salad\", \"PIZZA\", \"SALAD\"]\n *\n *      // R.ap can also be used as S combinator\n *      // when only two functions are passed\n *      R.ap(R.concat, R.toUpper)('Ramda') //=> 'RamdaRAMDA'\n * @symb R.ap([f, g], [a, b]) = [f(a), f(b), g(a), g(b)]\n */\n\n\nvar ap = /*#__PURE__*/_curry2(function ap(applyF, applyX) {\n  return typeof applyX['fantasy-land/ap'] === 'function' ? applyX['fantasy-land/ap'](applyF) : typeof applyF.ap === 'function' ? applyF.ap(applyX) : typeof applyF === 'function' ? function (x) {\n    return applyF(x)(applyX(x));\n  } : _reduce(function (acc, f) {\n    return _concat(acc, map(f, applyX));\n  }, [], applyF);\n});\nmodule.exports = ap;"]}
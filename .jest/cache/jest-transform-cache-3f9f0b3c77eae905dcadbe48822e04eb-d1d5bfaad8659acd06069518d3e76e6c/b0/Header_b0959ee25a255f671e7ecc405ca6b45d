c322b4cb9190c4d9b3c384c09e22c4dc
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _extends3 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _native = require("@react-navigation/native");

var _HeaderSegment = _interopRequireDefault(require("./HeaderSegment"));

var _HeaderTitle = _interopRequireDefault(require("./HeaderTitle"));

var _debounce = _interopRequireDefault(require("../../utils/debounce"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var _default = React.memo(function Header(props) {
  var scene = props.scene,
      previous = props.previous,
      layout = props.layout,
      insets = props.insets,
      navigation = props.navigation,
      styleInterpolator = props.styleInterpolator;
  var options = scene.descriptor.options;
  var title = typeof options.headerTitle !== 'function' && options.headerTitle !== undefined ? options.headerTitle : options.title !== undefined ? options.title : scene.route.name;
  var leftLabel;

  if (options.headerBackTitle !== undefined) {
    leftLabel = options.headerBackTitle;
  } else if (previous) {
    var o = previous.descriptor.options;
    leftLabel = typeof o.headerTitle !== 'function' && o.headerTitle !== undefined ? o.headerTitle : o.title !== undefined ? o.title : previous.route.name;
  }

  var goBack = React.useCallback((0, _debounce.default)(function () {
    if (navigation.isFocused() && navigation.canGoBack()) {
      navigation.dispatch((0, _extends3.default)({}, _native.StackActions.pop(), {
        source: scene.route.key
      }));
    }
  }, 50), [navigation, scene.route.key]);
  return React.createElement(_HeaderSegment.default, _extends({}, options, {
    insets: insets,
    layout: layout,
    scene: scene,
    title: title,
    leftLabel: leftLabel,
    headerTitle: typeof options.headerTitle !== 'function' ? function (props) {
      return React.createElement(_HeaderTitle.default, props);
    } : options.headerTitle,
    onGoBack: previous ? goBack : undefined,
    styleInterpolator: styleInterpolator
  }));
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkhlYWRlci50c3giXSwibmFtZXMiOlsic3R5bGVJbnRlcnBvbGF0b3IiLCJvcHRpb25zIiwic2NlbmUiLCJ0aXRsZSIsImxlZnRMYWJlbCIsIm8iLCJwcmV2aW91cyIsImdvQmFjayIsIm5hdmlnYXRpb24iLCJTdGFja0FjdGlvbnMiLCJzb3VyY2UiLCJrZXkiLCJwcm9wcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxJQUFBLEtBQUEsR0FBQSx1QkFBQSxDQUFBLE9BQUEsQ0FBQSxPQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLE9BQUEsR0FBQSxPQUFBLENBQUEsMEJBQUEsQ0FBQTs7QUFFQSxJQUFBLGNBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsbUJBQUEsQ0FBQTs7QUFDQSxJQUFBLFlBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsaUJBQUEsQ0FBQTs7QUFDQSxJQUFBLFNBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsd0JBQUEsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2VBR2UsS0FBSyxDQUFMLElBQUEsQ0FBVyxTQUFBLE1BQUEsQ0FBQSxLQUFBLEVBQXlDO0FBQ2pFLE1BQU0sS0FBTixHQUFBLEtBQUEsQ0FBTSxLQUFOO0FBQUEsTUFBTSxRQUFOLEdBQUEsS0FBQSxDQUFNLFFBQU47QUFBQSxNQUFNLE1BQU4sR0FBQSxLQUFBLENBQU0sTUFBTjtBQUFBLE1BQU0sTUFBTixHQUFBLEtBQUEsQ0FBTSxNQUFOO0FBQUEsTUFBTSxVQUFOLEdBQUEsS0FBQSxDQUFNLFVBQU47QUFBQSxNQU1FQSxpQkFORixHQUFBLEtBQUEsQ0FNRUEsaUJBTkY7QUFRQSxNQUFRQyxPQUFSLEdBQW9CQyxLQUFLLENBQXpCLFVBQUEsQ0FBUUQsT0FBUjtBQUNBLE1BQU1FLEtBQUssR0FDVCxPQUFPRixPQUFPLENBQWQsV0FBQSxLQUFBLFVBQUEsSUFDQUEsT0FBTyxDQUFQQSxXQUFBQSxLQURBLFNBQUEsR0FFSUEsT0FBTyxDQUZYLFdBQUEsR0FHSUEsT0FBTyxDQUFQQSxLQUFBQSxLQUFBQSxTQUFBQSxHQUNBQSxPQUFPLENBRFBBLEtBQUFBLEdBRUFDLEtBQUssQ0FBTEEsS0FBQUEsQ0FOTixJQUFBO0FBUUEsTUFsQmlFLFNBa0JqRTs7QUFJQSxNQUFJRCxPQUFPLENBQVBBLGVBQUFBLEtBQUosU0FBQSxFQUEyQztBQUN6Q0csSUFBQUEsU0FBUyxHQUFHSCxPQUFPLENBQW5CRyxlQUFBQTtBQURGLEdBQUEsTUFFTyxJQUFBLFFBQUEsRUFBYztBQUNuQixRQUFNQyxDQUFDLEdBQUdDLFFBQVEsQ0FBUkEsVUFBQUEsQ0FBVixPQUFBO0FBRUFGLElBQUFBLFNBQVMsR0FDUCxPQUFPQyxDQUFDLENBQVIsV0FBQSxLQUFBLFVBQUEsSUFBdUNBLENBQUMsQ0FBREEsV0FBQUEsS0FBdkMsU0FBQSxHQUNJQSxDQUFDLENBREwsV0FBQSxHQUVJQSxDQUFDLENBQURBLEtBQUFBLEtBQUFBLFNBQUFBLEdBQ0FBLENBQUMsQ0FEREEsS0FBQUEsR0FFQUMsUUFBUSxDQUFSQSxLQUFBQSxDQUxORixJQUFBQTtBQTNCK0Q7O0FBb0NqRSxNQUFNRyxNQUFNLEdBQUcsS0FBSyxDQUFMLFdBQUEsQ0FDYixDQUFBLEdBQUEsU0FBQSxDQUFBLE9BQUEsRUFBUyxZQUFNO0FBQ2IsUUFBSUMsVUFBVSxDQUFWQSxTQUFBQSxNQUEwQkEsVUFBVSxDQUF4QyxTQUE4QkEsRUFBOUIsRUFBc0Q7QUFDcERBLE1BQUFBLFVBQVUsQ0FBVkEsUUFBQUEsNEJBQ0tDLE9BQUFBLENBQUFBLFlBQUFBLENBRGUsR0FDZkEsRUFETEQ7QUFFRUUsUUFBQUEsTUFBTSxFQUFFUixLQUFLLENBQUxBLEtBQUFBLENBQVlTO0FBRnRCSDtBQUlEO0FBTkgsR0FBQSxFQURhLEVBQ2IsQ0FEYSxFQVNiLENBQUEsVUFBQSxFQUFhTixLQUFLLENBQUxBLEtBQUFBLENBVGYsR0FTRSxDQVRhLENBQWY7QUFZQSxTQUNFLEtBQUEsQ0FBQSxhQUFBLENBQUMsY0FBQSxDQUFELE9BQUEsRUFBQSxRQUFBLENBQUEsRUFBQSxFQUFBLE9BQUEsRUFBQTtBQUVFLElBQUEsTUFBTSxFQUZSLE1BQUE7QUFHRSxJQUFBLE1BQU0sRUFIUixNQUFBO0FBSUUsSUFBQSxLQUFLLEVBSlAsS0FBQTtBQUtFLElBQUEsS0FBSyxFQUxQLEtBQUE7QUFNRSxJQUFBLFNBQVMsRUFOWCxTQUFBO0FBT0UsSUFBQSxXQUFXLEVBQ1QsT0FBT0QsT0FBTyxDQUFkLFdBQUEsS0FBQSxVQUFBLEdBQ0tXLFVBQUFBLEtBQUQ7QUFBQSxhQUFrQyxLQUFBLENBQUEsYUFBQSxDQUFDLFlBQUEsQ0FBRCxPQUFBLEVBRHRDLEtBQ3NDLENBQWxDO0FBQUEsS0FESixHQUVJWCxPQUFPLENBVmYsV0FBQTtBQVlFLElBQUEsUUFBUSxFQUFFSyxRQUFRLEdBQUEsTUFBQSxHQVpwQixTQUFBO0FBYUUsSUFBQSxpQkFBaUIsRUFBRU47QUFickIsR0FBQSxDQUFBLENBREY7QUFoRGEsQ0FBQSxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU3RhY2tBY3Rpb25zIH0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJztcblxuaW1wb3J0IEhlYWRlclNlZ21lbnQgZnJvbSAnLi9IZWFkZXJTZWdtZW50JztcbmltcG9ydCBIZWFkZXJUaXRsZSBmcm9tICcuL0hlYWRlclRpdGxlJztcbmltcG9ydCBkZWJvdW5jZSBmcm9tICcuLi8uLi91dGlscy9kZWJvdW5jZSc7XG5pbXBvcnQgdHlwZSB7IFN0YWNrSGVhZGVyUHJvcHMsIFN0YWNrSGVhZGVyVGl0bGVQcm9wcyB9IGZyb20gJy4uLy4uL3R5cGVzJztcblxuZXhwb3J0IGRlZmF1bHQgUmVhY3QubWVtbyhmdW5jdGlvbiBIZWFkZXIocHJvcHM6IFN0YWNrSGVhZGVyUHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIHNjZW5lLFxuICAgIHByZXZpb3VzLFxuICAgIGxheW91dCxcbiAgICBpbnNldHMsXG4gICAgbmF2aWdhdGlvbixcbiAgICBzdHlsZUludGVycG9sYXRvcixcbiAgfSA9IHByb3BzO1xuICBjb25zdCB7IG9wdGlvbnMgfSA9IHNjZW5lLmRlc2NyaXB0b3I7XG4gIGNvbnN0IHRpdGxlID1cbiAgICB0eXBlb2Ygb3B0aW9ucy5oZWFkZXJUaXRsZSAhPT0gJ2Z1bmN0aW9uJyAmJlxuICAgIG9wdGlvbnMuaGVhZGVyVGl0bGUgIT09IHVuZGVmaW5lZFxuICAgICAgPyBvcHRpb25zLmhlYWRlclRpdGxlXG4gICAgICA6IG9wdGlvbnMudGl0bGUgIT09IHVuZGVmaW5lZFxuICAgICAgPyBvcHRpb25zLnRpdGxlXG4gICAgICA6IHNjZW5lLnJvdXRlLm5hbWU7XG5cbiAgbGV0IGxlZnRMYWJlbDtcblxuICAvLyBUaGUgbGFiZWwgZm9yIHRoZSBsZWZ0IGJhY2sgYnV0dG9uIHNob3dzIHRoZSB0aXRsZSBvZiB0aGUgcHJldmlvdXMgc2NyZWVuXG4gIC8vIElmIGEgY3VzdG9tIGxhYmVsIGlzIHNwZWNpZmllZCwgd2UgdXNlIGl0LCBvdGhlcndpc2UgdXNlIHByZXZpb3VzIHNjcmVlbidzIHRpdGxlXG4gIGlmIChvcHRpb25zLmhlYWRlckJhY2tUaXRsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgbGVmdExhYmVsID0gb3B0aW9ucy5oZWFkZXJCYWNrVGl0bGU7XG4gIH0gZWxzZSBpZiAocHJldmlvdXMpIHtcbiAgICBjb25zdCBvID0gcHJldmlvdXMuZGVzY3JpcHRvci5vcHRpb25zO1xuXG4gICAgbGVmdExhYmVsID1cbiAgICAgIHR5cGVvZiBvLmhlYWRlclRpdGxlICE9PSAnZnVuY3Rpb24nICYmIG8uaGVhZGVyVGl0bGUgIT09IHVuZGVmaW5lZFxuICAgICAgICA/IG8uaGVhZGVyVGl0bGVcbiAgICAgICAgOiBvLnRpdGxlICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBvLnRpdGxlXG4gICAgICAgIDogcHJldmlvdXMucm91dGUubmFtZTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgY29uc3QgZ29CYWNrID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgZGVib3VuY2UoKCkgPT4ge1xuICAgICAgaWYgKG5hdmlnYXRpb24uaXNGb2N1c2VkKCkgJiYgbmF2aWdhdGlvbi5jYW5Hb0JhY2soKSkge1xuICAgICAgICBuYXZpZ2F0aW9uLmRpc3BhdGNoKHtcbiAgICAgICAgICAuLi5TdGFja0FjdGlvbnMucG9wKCksXG4gICAgICAgICAgc291cmNlOiBzY2VuZS5yb3V0ZS5rZXksXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIDUwKSxcbiAgICBbbmF2aWdhdGlvbiwgc2NlbmUucm91dGUua2V5XVxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPEhlYWRlclNlZ21lbnRcbiAgICAgIHsuLi5vcHRpb25zfVxuICAgICAgaW5zZXRzPXtpbnNldHN9XG4gICAgICBsYXlvdXQ9e2xheW91dH1cbiAgICAgIHNjZW5lPXtzY2VuZX1cbiAgICAgIHRpdGxlPXt0aXRsZX1cbiAgICAgIGxlZnRMYWJlbD17bGVmdExhYmVsfVxuICAgICAgaGVhZGVyVGl0bGU9e1xuICAgICAgICB0eXBlb2Ygb3B0aW9ucy5oZWFkZXJUaXRsZSAhPT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgID8gKHByb3BzOiBTdGFja0hlYWRlclRpdGxlUHJvcHMpID0+IDxIZWFkZXJUaXRsZSB7Li4ucHJvcHN9IC8+XG4gICAgICAgICAgOiBvcHRpb25zLmhlYWRlclRpdGxlXG4gICAgICB9XG4gICAgICBvbkdvQmFjaz17cHJldmlvdXMgPyBnb0JhY2sgOiB1bmRlZmluZWR9XG4gICAgICBzdHlsZUludGVycG9sYXRvcj17c3R5bGVJbnRlcnBvbGF0b3J9XG4gICAgLz5cbiAgKTtcbn0pO1xuIl19
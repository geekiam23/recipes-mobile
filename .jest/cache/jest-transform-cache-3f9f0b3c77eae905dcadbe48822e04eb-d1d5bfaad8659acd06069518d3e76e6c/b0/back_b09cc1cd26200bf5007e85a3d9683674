543311fc3d7099f7debb19646b8bdcbc
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var assert = require('assert');

var recorder = require("./recorder");

var _require = require("./intercept"),
    activate = _require.activate,
    disableNetConnect = _require.disableNetConnect,
    enableNetConnect = _require.enableNetConnect,
    cleanAll = _require.removeAll;

var _require2 = require("./scope"),
    loadDefs = _require2.loadDefs,
    define = _require2.define;

var _require3 = require('util'),
    format = _require3.format;

var path = require('path');

var debug = require('debug')('nock.back');

var _mode = null;
var fs;

try {
  fs = require('fs');
} catch (err) {}

function Back(fixtureName, options, nockedFn) {
  if (!Back.fixtures) {
    throw new Error('Back requires nock.back.fixtures to be set\n' + 'Ex:\n' + "\trequire(nock).back.fixtures = '/path/to/fixtures/'");
  }

  if (typeof fixtureName !== 'string') {
    throw new Error('Parameter fixtureName must be a string');
  }

  if (arguments.length === 1) {
    options = {};
  } else if (arguments.length === 2) {
    if (typeof options === 'function') {
      nockedFn = options;
      options = {};
    }
  }

  _mode.setup();

  var fixture = path.join(Back.fixtures, fixtureName);

  var context = _mode.start(fixture, options);

  var nockDone = function nockDone() {
    _mode.finish(fixture, options, context);
  };

  debug('context:', context);

  if (typeof nockedFn === 'function') {
    nockedFn.call(context, nockDone);
  } else {
    return Promise.resolve({
      nockDone: nockDone,
      context: context
    });
  }
}

var wild = {
  setup: function setup() {
    cleanAll();
    recorder.restore();
    activate();
    enableNetConnect();
  },
  start: function start() {
    return load();
  },
  finish: function finish() {}
};
var dryrun = {
  setup: function setup() {
    recorder.restore();
    cleanAll();
    activate();
    enableNetConnect();
  },
  start: function start(fixture, options) {
    var contexts = load(fixture, options);
    enableNetConnect();
    return contexts;
  },
  finish: function finish() {}
};
var record = {
  setup: function setup() {
    recorder.restore();
    recorder.clear();
    cleanAll();
    activate();
    disableNetConnect();
  },
  start: function start(fixture, options) {
    if (!fs) {
      throw new Error('no fs');
    }

    var context = load(fixture, options);

    if (!context.isLoaded) {
      recorder.record((0, _extends2.default)({
        dont_print: true,
        output_objects: true
      }, options.recorder));
      context.isRecording = true;
    }

    return context;
  },
  finish: function finish(fixture, options, context) {
    if (context.isRecording) {
      var outputs = recorder.outputs();

      if (typeof options.afterRecord === 'function') {
        outputs = options.afterRecord(outputs);
      }

      outputs = typeof outputs === 'string' ? outputs : JSON.stringify(outputs, null, 4);
      debug('recorder outputs:', outputs);
      fs.mkdirSync(path.dirname(fixture), {
        recursive: true
      });
      fs.writeFileSync(fixture, outputs);
    }
  }
};
var lockdown = {
  setup: function setup() {
    recorder.restore();
    recorder.clear();
    cleanAll();
    activate();
    disableNetConnect();
  },
  start: function start(fixture, options) {
    return load(fixture, options);
  },
  finish: function finish() {}
};

function load(fixture, options) {
  var context = {
    scopes: [],
    assertScopesFinished: function assertScopesFinished() {
      assertScopes(this.scopes, fixture);
    }
  };

  if (fixture && fixtureExists(fixture)) {
    var scopes = loadDefs(fixture);
    applyHook(scopes, options.before);
    scopes = define(scopes);
    applyHook(scopes, options.after);
    context.scopes = scopes;
    context.isLoaded = true;
  }

  return context;
}

function applyHook(scopes, fn) {
  if (!fn) {
    return;
  }

  if (typeof fn !== 'function') {
    throw new Error('processing hooks must be a function');
  }

  scopes.forEach(fn);
}

function fixtureExists(fixture) {
  if (!fs) {
    throw new Error('no fs');
  }

  return fs.existsSync(fixture);
}

function assertScopes(scopes, fixture) {
  var pending = scopes.filter(function (scope) {
    return !scope.isDone();
  }).map(function (scope) {
    return scope.pendingMocks();
  });

  if (pending.length) {
    var _ref;

    assert.fail(format('%j was not used, consider removing %s to rerecord fixture', (_ref = []).concat.apply(_ref, (0, _toConsumableArray2.default)(pending)), fixture));
  }
}

var Modes = {
  wild: wild,
  dryrun: dryrun,
  record: record,
  lockdown: lockdown
};

Back.setMode = function (mode) {
  if (!(mode in Modes)) {
    throw new Error("Unknown mode: " + mode);
  }

  Back.currentMode = mode;
  debug('New nock back mode:', Back.currentMode);
  _mode = Modes[mode];

  _mode.setup();
};

Back.fixtures = null;
Back.currentMode = null;
module.exports = Back;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
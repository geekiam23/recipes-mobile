17c8293d3f4632f576be5e58b433d5ff
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.waitFor = waitForWrapper;

var _helpers = require("./helpers");

var _config = require("./config");

function copyStackTrace(target, source) {
  target.stack = source.stack.replace(source.message, target.message);
}

function waitFor(callback, _ref) {
  var _ref$container = _ref.container,
      container = _ref$container === void 0 ? (0, _helpers.getDocument)() : _ref$container,
      _ref$timeout = _ref.timeout,
      timeout = _ref$timeout === void 0 ? (0, _config.getConfig)().asyncUtilTimeout : _ref$timeout,
      _ref$showOriginalStac = _ref.showOriginalStackTrace,
      showOriginalStackTrace = _ref$showOriginalStac === void 0 ? (0, _config.getConfig)().showOriginalStackTrace : _ref$showOriginalStac,
      stackTraceError = _ref.stackTraceError,
      _ref$interval = _ref.interval,
      interval = _ref$interval === void 0 ? 50 : _ref$interval,
      _ref$onTimeout = _ref.onTimeout,
      onTimeout = _ref$onTimeout === void 0 ? function (error) {
    error.message = (0, _config.getConfig)().getElementError(error.message, container).message;
    return error;
  } : _ref$onTimeout,
      _ref$mutationObserver = _ref.mutationObserverOptions,
      mutationObserverOptions = _ref$mutationObserver === void 0 ? {
    subtree: true,
    childList: true,
    attributes: true,
    characterData: true
  } : _ref$mutationObserver;

  if (typeof callback !== 'function') {
    throw new TypeError('Received `callback` arg must be a function');
  }

  return new Promise(function _callee(resolve, reject) {
    var lastError, intervalId, observer, finished, promiseStatus, overallTimeoutTimer, usingJestFakeTimers, error, _ref2, MutationObserver, onDone, checkRealTimersCallback, checkCallback, handleTimeout;

    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            handleTimeout = function _handleTimeout() {
              var error;

              if (lastError) {
                error = lastError;

                if (!showOriginalStackTrace && error.name === 'TestingLibraryElementError') {
                  copyStackTrace(error, stackTraceError);
                }
              } else {
                error = new Error('Timed out in waitFor.');

                if (!showOriginalStackTrace) {
                  copyStackTrace(error, stackTraceError);
                }
              }

              onDone(onTimeout(error), null);
            };

            checkCallback = function _checkCallback() {
              if (promiseStatus === 'pending') return;

              try {
                var result = (0, _config.runWithExpensiveErrorDiagnosticsDisabled)(callback);

                if (typeof (result == null ? void 0 : result.then) === 'function') {
                  promiseStatus = 'pending';
                  result.then(function (resolvedValue) {
                    promiseStatus = 'resolved';
                    onDone(null, resolvedValue);
                  }, function (rejectedValue) {
                    promiseStatus = 'rejected';
                    lastError = rejectedValue;
                  });
                } else {
                  onDone(null, result);
                }
              } catch (error) {
                lastError = error;
              }
            };

            checkRealTimersCallback = function _checkRealTimersCallb() {
              if ((0, _helpers.jestFakeTimersAreEnabled)()) {
                var _error = new Error("Changed from using real timers to fake timers while using waitFor. This is not allowed and will result in very strange behavior. Please ensure you're awaiting all async things your test is doing before changing to fake timers. For more info, please go to https://github.com/testing-library/dom-testing-library/issues/830");

                if (!showOriginalStackTrace) copyStackTrace(_error, stackTraceError);
                return reject(_error);
              } else {
                return checkCallback();
              }
            };

            onDone = function _onDone(error, result) {
              finished = true;
              clearTimeout(overallTimeoutTimer);

              if (!usingJestFakeTimers) {
                clearInterval(intervalId);
                observer.disconnect();
              }

              if (error) {
                reject(error);
              } else {
                resolve(result);
              }
            };

            finished = false;
            promiseStatus = 'idle';
            overallTimeoutTimer = setTimeout(handleTimeout, timeout);
            usingJestFakeTimers = (0, _helpers.jestFakeTimersAreEnabled)();

            if (!usingJestFakeTimers) {
              _context.next = 24;
              break;
            }

            checkCallback();

          case 10:
            if (finished) {
              _context.next = 22;
              break;
            }

            if ((0, _helpers.jestFakeTimersAreEnabled)()) {
              _context.next = 16;
              break;
            }

            error = new Error("Changed from using fake timers to real timers while using waitFor. This is not allowed and will result in very strange behavior. Please ensure you're awaiting all async things your test is doing before changing to real timers. For more info, please go to https://github.com/testing-library/dom-testing-library/issues/830");
            if (!showOriginalStackTrace) copyStackTrace(error, stackTraceError);
            reject(error);
            return _context.abrupt("return");

          case 16:
            jest.advanceTimersByTime(interval);
            checkCallback();
            _context.next = 20;
            return _regenerator.default.awrap(new Promise(function (r) {
              setTimeout(r, 0);
              jest.advanceTimersByTime(0);
            }));

          case 20:
            _context.next = 10;
            break;

          case 22:
            _context.next = 37;
            break;

          case 24:
            _context.prev = 24;
            (0, _helpers.checkContainerType)(container);
            _context.next = 32;
            break;

          case 28:
            _context.prev = 28;
            _context.t0 = _context["catch"](24);
            reject(_context.t0);
            return _context.abrupt("return");

          case 32:
            intervalId = setInterval(checkRealTimersCallback, interval);
            _ref2 = (0, _helpers.getWindowFromNode)(container), MutationObserver = _ref2.MutationObserver;
            observer = new MutationObserver(checkRealTimersCallback);
            observer.observe(container, mutationObserverOptions);
            checkCallback();

          case 37:
          case "end":
            return _context.stop();
        }
      }
    }, null, null, [[24, 28]], Promise);
  });
}

function waitForWrapper(callback, options) {
  var stackTraceError = new Error('STACK_TRACE_MESSAGE');
  return (0, _config.getConfig)().asyncWrapper(function () {
    return waitFor(callback, (0, _extends2.default)({
      stackTraceError: stackTraceError
    }, options));
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
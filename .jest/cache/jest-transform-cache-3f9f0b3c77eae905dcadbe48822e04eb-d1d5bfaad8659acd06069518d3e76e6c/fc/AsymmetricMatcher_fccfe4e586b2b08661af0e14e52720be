1af1d0068df99754c20fe05579527c8c
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = exports.test = exports.serialize = void 0;

var _collections = require("../collections");

var Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;
var asymmetricMatcher = Symbol.for('jest.asymmetricMatcher');
var SPACE = ' ';

var serialize = function serialize(val, config, indentation, depth, refs, printer) {
  var stringedValue = val.toString();

  if (stringedValue === 'ArrayContaining' || stringedValue === 'ArrayNotContaining') {
    if (++depth > config.maxDepth) {
      return '[' + stringedValue + ']';
    }

    return stringedValue + SPACE + '[' + (0, _collections.printListItems)(val.sample, config, indentation, depth, refs, printer) + ']';
  }

  if (stringedValue === 'ObjectContaining' || stringedValue === 'ObjectNotContaining') {
    if (++depth > config.maxDepth) {
      return '[' + stringedValue + ']';
    }

    return stringedValue + SPACE + '{' + (0, _collections.printObjectProperties)(val.sample, config, indentation, depth, refs, printer) + '}';
  }

  if (stringedValue === 'StringMatching' || stringedValue === 'StringNotMatching') {
    return stringedValue + SPACE + printer(val.sample, config, indentation, depth, refs);
  }

  if (stringedValue === 'StringContaining' || stringedValue === 'StringNotContaining') {
    return stringedValue + SPACE + printer(val.sample, config, indentation, depth, refs);
  }

  return val.toAsymmetricMatcher();
};

exports.serialize = serialize;

var test = function test(val) {
  return val && val.$$typeof === asymmetricMatcher;
};

exports.test = test;
var plugin = {
  serialize: serialize,
  test: test
};
var _default = plugin;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFzeW1tZXRyaWNNYXRjaGVyLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsInRlc3QiLCJzZXJpYWxpemUiLCJfY29sbGVjdGlvbnMiLCJyZXF1aXJlIiwiU3ltYm9sIiwiZ2xvYmFsIiwiYXN5bW1ldHJpY01hdGNoZXIiLCJmb3IiLCJTUEFDRSIsInZhbCIsImNvbmZpZyIsImluZGVudGF0aW9uIiwiZGVwdGgiLCJyZWZzIiwicHJpbnRlciIsInN0cmluZ2VkVmFsdWUiLCJ0b1N0cmluZyIsIm1heERlcHRoIiwicHJpbnRMaXN0SXRlbXMiLCJzYW1wbGUiLCJwcmludE9iamVjdFByb3BlcnRpZXMiLCJ0b0FzeW1tZXRyaWNNYXRjaGVyIiwiJCR0eXBlb2YiLCJwbHVnaW4iLCJfZGVmYXVsdCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLEVBQUFBLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLE9BQVIsR0FBa0JGLE9BQU8sQ0FBQ0csSUFBUixHQUFlSCxPQUFPLENBQUNJLFNBQVIsR0FBb0IsS0FBSyxDQUExRDs7QUFFQSxJQUFJQyxZQUFZLEdBQUdDLE9BQU8sa0JBQTFCOztBQUVBLElBQUlDLE1BQU0sR0FBR0MsTUFBTSxDQUFDLDBCQUFELENBQU4sSUFBc0NBLE1BQU0sQ0FBQ0QsTUFBMUQ7QUFDQSxJQUFNRSxpQkFBaUIsR0FBR0YsTUFBTSxDQUFDRyxHQUFQLENBQVcsd0JBQVgsQ0FBMUI7QUFDQSxJQUFNQyxLQUFLLEdBQUcsR0FBZDs7QUFFQSxJQUFNUCxTQUFTLEdBQUcsU0FBWkEsU0FBWSxDQUFDUSxHQUFELEVBQU1DLE1BQU4sRUFBY0MsV0FBZCxFQUEyQkMsS0FBM0IsRUFBa0NDLElBQWxDLEVBQXdDQyxPQUF4QyxFQUFvRDtBQUNwRSxNQUFNQyxhQUFhLEdBQUdOLEdBQUcsQ0FBQ08sUUFBSixFQUF0Qjs7QUFFQSxNQUNFRCxhQUFhLEtBQUssaUJBQWxCLElBQ0FBLGFBQWEsS0FBSyxvQkFGcEIsRUFHRTtBQUNBLFFBQUksRUFBRUgsS0FBRixHQUFVRixNQUFNLENBQUNPLFFBQXJCLEVBQStCO0FBQzdCLGFBQU8sTUFBTUYsYUFBTixHQUFzQixHQUE3QjtBQUNEOztBQUVELFdBQ0VBLGFBQWEsR0FDYlAsS0FEQSxHQUVBLEdBRkEsR0FHQSxDQUFDLEdBQUdOLFlBQVksQ0FBQ2dCLGNBQWpCLEVBQ0VULEdBQUcsQ0FBQ1UsTUFETixFQUVFVCxNQUZGLEVBR0VDLFdBSEYsRUFJRUMsS0FKRixFQUtFQyxJQUxGLEVBTUVDLE9BTkYsQ0FIQSxHQVdBLEdBWkY7QUFjRDs7QUFFRCxNQUNFQyxhQUFhLEtBQUssa0JBQWxCLElBQ0FBLGFBQWEsS0FBSyxxQkFGcEIsRUFHRTtBQUNBLFFBQUksRUFBRUgsS0FBRixHQUFVRixNQUFNLENBQUNPLFFBQXJCLEVBQStCO0FBQzdCLGFBQU8sTUFBTUYsYUFBTixHQUFzQixHQUE3QjtBQUNEOztBQUVELFdBQ0VBLGFBQWEsR0FDYlAsS0FEQSxHQUVBLEdBRkEsR0FHQSxDQUFDLEdBQUdOLFlBQVksQ0FBQ2tCLHFCQUFqQixFQUNFWCxHQUFHLENBQUNVLE1BRE4sRUFFRVQsTUFGRixFQUdFQyxXQUhGLEVBSUVDLEtBSkYsRUFLRUMsSUFMRixFQU1FQyxPQU5GLENBSEEsR0FXQSxHQVpGO0FBY0Q7O0FBRUQsTUFDRUMsYUFBYSxLQUFLLGdCQUFsQixJQUNBQSxhQUFhLEtBQUssbUJBRnBCLEVBR0U7QUFDQSxXQUNFQSxhQUFhLEdBQ2JQLEtBREEsR0FFQU0sT0FBTyxDQUFDTCxHQUFHLENBQUNVLE1BQUwsRUFBYVQsTUFBYixFQUFxQkMsV0FBckIsRUFBa0NDLEtBQWxDLEVBQXlDQyxJQUF6QyxDQUhUO0FBS0Q7O0FBRUQsTUFDRUUsYUFBYSxLQUFLLGtCQUFsQixJQUNBQSxhQUFhLEtBQUsscUJBRnBCLEVBR0U7QUFDQSxXQUNFQSxhQUFhLEdBQ2JQLEtBREEsR0FFQU0sT0FBTyxDQUFDTCxHQUFHLENBQUNVLE1BQUwsRUFBYVQsTUFBYixFQUFxQkMsV0FBckIsRUFBa0NDLEtBQWxDLEVBQXlDQyxJQUF6QyxDQUhUO0FBS0Q7O0FBRUQsU0FBT0osR0FBRyxDQUFDWSxtQkFBSixFQUFQO0FBQ0QsQ0ExRUQ7O0FBNEVBeEIsT0FBTyxDQUFDSSxTQUFSLEdBQW9CQSxTQUFwQjs7QUFFQSxJQUFNRCxJQUFJLEdBQUcsU0FBUEEsSUFBTyxDQUFBUyxHQUFHO0FBQUEsU0FBSUEsR0FBRyxJQUFJQSxHQUFHLENBQUNhLFFBQUosS0FBaUJoQixpQkFBNUI7QUFBQSxDQUFoQjs7QUFFQVQsT0FBTyxDQUFDRyxJQUFSLEdBQWVBLElBQWY7QUFDQSxJQUFNdUIsTUFBTSxHQUFHO0FBQ2J0QixFQUFBQSxTQUFTLEVBQVRBLFNBRGE7QUFFYkQsRUFBQUEsSUFBSSxFQUFKQTtBQUZhLENBQWY7QUFJQSxJQUFJd0IsUUFBUSxHQUFHRCxNQUFmO0FBQ0ExQixPQUFPLENBQUNFLE9BQVIsR0FBa0J5QixRQUFsQiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnRlc3QgPSBleHBvcnRzLnNlcmlhbGl6ZSA9IHZvaWQgMDtcblxudmFyIF9jb2xsZWN0aW9ucyA9IHJlcXVpcmUoJy4uL2NvbGxlY3Rpb25zJyk7XG5cbnZhciBTeW1ib2wgPSBnbG9iYWxbJ2plc3Qtc3ltYm9sLWRvLW5vdC10b3VjaCddIHx8IGdsb2JhbC5TeW1ib2w7XG5jb25zdCBhc3ltbWV0cmljTWF0Y2hlciA9IFN5bWJvbC5mb3IoJ2plc3QuYXN5bW1ldHJpY01hdGNoZXInKTtcbmNvbnN0IFNQQUNFID0gJyAnO1xuXG5jb25zdCBzZXJpYWxpemUgPSAodmFsLCBjb25maWcsIGluZGVudGF0aW9uLCBkZXB0aCwgcmVmcywgcHJpbnRlcikgPT4ge1xuICBjb25zdCBzdHJpbmdlZFZhbHVlID0gdmFsLnRvU3RyaW5nKCk7XG5cbiAgaWYgKFxuICAgIHN0cmluZ2VkVmFsdWUgPT09ICdBcnJheUNvbnRhaW5pbmcnIHx8XG4gICAgc3RyaW5nZWRWYWx1ZSA9PT0gJ0FycmF5Tm90Q29udGFpbmluZydcbiAgKSB7XG4gICAgaWYgKCsrZGVwdGggPiBjb25maWcubWF4RGVwdGgpIHtcbiAgICAgIHJldHVybiAnWycgKyBzdHJpbmdlZFZhbHVlICsgJ10nO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICBzdHJpbmdlZFZhbHVlICtcbiAgICAgIFNQQUNFICtcbiAgICAgICdbJyArXG4gICAgICAoMCwgX2NvbGxlY3Rpb25zLnByaW50TGlzdEl0ZW1zKShcbiAgICAgICAgdmFsLnNhbXBsZSxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICBpbmRlbnRhdGlvbixcbiAgICAgICAgZGVwdGgsXG4gICAgICAgIHJlZnMsXG4gICAgICAgIHByaW50ZXJcbiAgICAgICkgK1xuICAgICAgJ10nXG4gICAgKTtcbiAgfVxuXG4gIGlmIChcbiAgICBzdHJpbmdlZFZhbHVlID09PSAnT2JqZWN0Q29udGFpbmluZycgfHxcbiAgICBzdHJpbmdlZFZhbHVlID09PSAnT2JqZWN0Tm90Q29udGFpbmluZydcbiAgKSB7XG4gICAgaWYgKCsrZGVwdGggPiBjb25maWcubWF4RGVwdGgpIHtcbiAgICAgIHJldHVybiAnWycgKyBzdHJpbmdlZFZhbHVlICsgJ10nO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICBzdHJpbmdlZFZhbHVlICtcbiAgICAgIFNQQUNFICtcbiAgICAgICd7JyArXG4gICAgICAoMCwgX2NvbGxlY3Rpb25zLnByaW50T2JqZWN0UHJvcGVydGllcykoXG4gICAgICAgIHZhbC5zYW1wbGUsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgaW5kZW50YXRpb24sXG4gICAgICAgIGRlcHRoLFxuICAgICAgICByZWZzLFxuICAgICAgICBwcmludGVyXG4gICAgICApICtcbiAgICAgICd9J1xuICAgICk7XG4gIH1cblxuICBpZiAoXG4gICAgc3RyaW5nZWRWYWx1ZSA9PT0gJ1N0cmluZ01hdGNoaW5nJyB8fFxuICAgIHN0cmluZ2VkVmFsdWUgPT09ICdTdHJpbmdOb3RNYXRjaGluZydcbiAgKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHN0cmluZ2VkVmFsdWUgK1xuICAgICAgU1BBQ0UgK1xuICAgICAgcHJpbnRlcih2YWwuc2FtcGxlLCBjb25maWcsIGluZGVudGF0aW9uLCBkZXB0aCwgcmVmcylcbiAgICApO1xuICB9XG5cbiAgaWYgKFxuICAgIHN0cmluZ2VkVmFsdWUgPT09ICdTdHJpbmdDb250YWluaW5nJyB8fFxuICAgIHN0cmluZ2VkVmFsdWUgPT09ICdTdHJpbmdOb3RDb250YWluaW5nJ1xuICApIHtcbiAgICByZXR1cm4gKFxuICAgICAgc3RyaW5nZWRWYWx1ZSArXG4gICAgICBTUEFDRSArXG4gICAgICBwcmludGVyKHZhbC5zYW1wbGUsIGNvbmZpZywgaW5kZW50YXRpb24sIGRlcHRoLCByZWZzKVxuICAgICk7XG4gIH1cblxuICByZXR1cm4gdmFsLnRvQXN5bW1ldHJpY01hdGNoZXIoKTtcbn07XG5cbmV4cG9ydHMuc2VyaWFsaXplID0gc2VyaWFsaXplO1xuXG5jb25zdCB0ZXN0ID0gdmFsID0+IHZhbCAmJiB2YWwuJCR0eXBlb2YgPT09IGFzeW1tZXRyaWNNYXRjaGVyO1xuXG5leHBvcnRzLnRlc3QgPSB0ZXN0O1xuY29uc3QgcGx1Z2luID0ge1xuICBzZXJpYWxpemUsXG4gIHRlc3Rcbn07XG52YXIgX2RlZmF1bHQgPSBwbHVnaW47XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbiJdfQ==
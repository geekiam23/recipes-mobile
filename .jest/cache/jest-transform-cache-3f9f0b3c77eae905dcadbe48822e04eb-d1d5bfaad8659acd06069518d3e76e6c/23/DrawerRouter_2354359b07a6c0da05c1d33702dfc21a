7c7ada325d6326e4032ea2d82c0b35b6
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _excluded = ["openByDefault"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DrawerRouter;
exports.DrawerActions = void 0;

var _nonSecure = require("nanoid/non-secure");

var _TabRouter = _interopRequireWildcard(require("./TabRouter"));

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var DrawerActions = (0, _extends2.default)({}, _TabRouter.TabActions, {
  openDrawer: function openDrawer() {
    return {
      type: 'OPEN_DRAWER'
    };
  },
  closeDrawer: function closeDrawer() {
    return {
      type: 'CLOSE_DRAWER'
    };
  },
  toggleDrawer: function toggleDrawer() {
    return {
      type: 'TOGGLE_DRAWER'
    };
  }
});
exports.DrawerActions = DrawerActions;

var isDrawerOpen = function isDrawerOpen(state) {
  var _state$history;

  return Boolean((_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.some(function (it) {
    return it.type === 'drawer';
  }));
};

var openDrawer = function openDrawer(state) {
  if (isDrawerOpen(state)) {
    return state;
  }

  return (0, _extends2.default)({}, state, {
    history: [].concat((0, _toConsumableArray2.default)(state.history), [{
      type: 'drawer'
    }])
  });
};

var closeDrawer = function closeDrawer(state) {
  if (!isDrawerOpen(state)) {
    return state;
  }

  return (0, _extends2.default)({}, state, {
    history: state.history.filter(function (it) {
      return it.type !== 'drawer';
    })
  });
};

function DrawerRouter(_ref) {
  var openByDefault = _ref.openByDefault,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var router = (0, _TabRouter.default)(rest);
  return (0, _extends2.default)({}, router, {
    type: 'drawer',
    getInitialState: function getInitialState(_ref2) {
      var routeNames = _ref2.routeNames,
          routeParamList = _ref2.routeParamList,
          routeGetIdList = _ref2.routeGetIdList;
      var state = router.getInitialState({
        routeNames: routeNames,
        routeParamList: routeParamList,
        routeGetIdList: routeGetIdList
      });

      if (openByDefault) {
        state = openDrawer(state);
      }

      return (0, _extends2.default)({}, state, {
        stale: false,
        type: 'drawer',
        key: "drawer-".concat((0, _nonSecure.nanoid)())
      });
    },
    getRehydratedState: function getRehydratedState(partialState, _ref3) {
      var routeNames = _ref3.routeNames,
          routeParamList = _ref3.routeParamList,
          routeGetIdList = _ref3.routeGetIdList;

      if (partialState.stale === false) {
        return partialState;
      }

      var state = router.getRehydratedState(partialState, {
        routeNames: routeNames,
        routeParamList: routeParamList,
        routeGetIdList: routeGetIdList
      });

      if (partialState.history ? isDrawerOpen(partialState) : openByDefault) {
        state = openDrawer(state);
      }

      return (0, _extends2.default)({}, state, {
        type: 'drawer',
        key: "drawer-".concat((0, _nonSecure.nanoid)())
      });
    },
    getStateForRouteFocus: function getStateForRouteFocus(state, key) {
      var result = router.getStateForRouteFocus(state, key);

      if (openByDefault) {
        return openDrawer(result);
      }

      return closeDrawer(result);
    },
    getStateForAction: function getStateForAction(state, action, options) {
      switch (action.type) {
        case 'OPEN_DRAWER':
          return openDrawer(state);

        case 'CLOSE_DRAWER':
          return closeDrawer(state);

        case 'TOGGLE_DRAWER':
          if (isDrawerOpen(state)) {
            return closeDrawer(state);
          }

          return openDrawer(state);

        case 'GO_BACK':
          if (openByDefault) {
            if (!isDrawerOpen(state)) {
              return openDrawer(state);
            }
          } else {
            if (isDrawerOpen(state)) {
              return closeDrawer(state);
            }
          }

          return router.getStateForAction(state, action, options);

        default:
          return router.getStateForAction(state, action, options);
      }
    },
    actionCreators: DrawerActions
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
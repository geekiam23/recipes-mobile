{"version":3,"sources":["composeK.js"],"names":["chain","require","compose","map","composeK","arguments","length","Error","init","Array","prototype","slice","call","last","pop","apply","module","exports"],"mappings":"AAAA,IAAIA,KAAK,GAAgBC,OAAO,WAAhC;;AAEA,IAAIC,OAAO,GAAgBD,OAAO,aAAlC;;AAEA,IAAIE,GAAG,GAAgBF,OAAO,SAA9B;;AAmCA,SAASG,QAAT,GAAoB;AAClB,MAAIC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,UAAM,IAAIC,KAAJ,CAAU,yCAAV,CAAN;AACD;;AACD,MAAIC,IAAI,GAAGC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BP,SAA3B,CAAX;AACA,MAAIQ,IAAI,GAAGL,IAAI,CAACM,GAAL,EAAX;AACA,SAAOZ,OAAO,CAACA,OAAO,CAACa,KAAR,CAAc,IAAd,EAAoBZ,GAAG,CAACH,KAAD,EAAQQ,IAAR,CAAvB,CAAD,EAAwCK,IAAxC,CAAd;AACD;;AACDG,MAAM,CAACC,OAAP,GAAiBb,QAAjB","sourcesContent":["var chain = /*#__PURE__*/require('./chain');\n\nvar compose = /*#__PURE__*/require('./compose');\n\nvar map = /*#__PURE__*/require('./map');\n\n/**\n * Returns the right-to-left Kleisli composition of the provided functions,\n * each of which must return a value of a type supported by [`chain`](#chain).\n *\n * `R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), f)`.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Function\n * @sig Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (a -> m z)\n * @param {...Function} ...functions The functions to compose\n * @return {Function}\n * @see R.pipeK\n * @deprecated since v0.26.0\n * @example\n *\n *       //  get :: String -> Object -> Maybe *\n *       const get = R.curry((propName, obj) => Maybe(obj[propName]))\n *\n *       //  getStateCode :: Maybe String -> Maybe String\n *       const getStateCode = R.composeK(\n *         R.compose(Maybe.of, R.toUpper),\n *         get('state'),\n *         get('address'),\n *         get('user'),\n *       );\n *       getStateCode({\"user\":{\"address\":{\"state\":\"ny\"}}}); //=> Maybe.Just(\"NY\")\n *       getStateCode({}); //=> Maybe.Nothing()\n * @symb R.composeK(f, g, h)(a) = R.chain(f, R.chain(g, h(a)))\n */\n\n\nfunction composeK() {\n  if (arguments.length === 0) {\n    throw new Error('composeK requires at least one argument');\n  }\n  var init = Array.prototype.slice.call(arguments);\n  var last = init.pop();\n  return compose(compose.apply(this, map(chain, init)), last);\n}\nmodule.exports = composeK;"]}
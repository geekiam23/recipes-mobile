{"version":3,"sources":["thunkify.js"],"names":["curryN","require","_curry1","thunkify","fn","length","createThunk","fnArgs","arguments","invokeThunk","apply","module","exports"],"mappings":"AAAA,IAAIA,MAAM,GAAgBC,OAAO,YAAjC;;AAEA,IAAIC,OAAO,GAAgBD,OAAO,sBAAlC;;AAqBA,IAAIE,QAAQ,GAAgBD,OAAO,CAAC,SAASC,QAAT,CAAkBC,EAAlB,EAAsB;AACxD,SAAOJ,MAAM,CAACI,EAAE,CAACC,MAAJ,EAAY,SAASC,WAAT,GAAuB;AAC9C,QAAIC,MAAM,GAAGC,SAAb;AACA,WAAO,SAASC,WAAT,GAAuB;AAC5B,aAAOL,EAAE,CAACM,KAAH,CAAS,IAAT,EAAeH,MAAf,CAAP;AACD,KAFD;AAGD,GALY,CAAb;AAMD,CAPkC,CAAnC;;AASAI,MAAM,CAACC,OAAP,GAAiBT,QAAjB","sourcesContent":["var curryN = /*#__PURE__*/require('./curryN');\n\nvar _curry1 = /*#__PURE__*/require('./internal/_curry1');\n\n/**\n * Creates a thunk out of a function. A thunk delays a calculation until\n * its result is needed, providing lazy evaluation of arguments.\n *\n * @func\n * @memberOf R\n * @category Function\n * @sig ((a, b, ..., j) -> k) -> (a, b, ..., j) -> (() -> k)\n * @param {Function} fn A function to wrap in a thunk\n * @return {Function} Expects arguments for `fn` and returns a new function\n *  that, when called, applies those arguments to `fn`.\n * @see R.partial, R.partialRight\n * @example\n *\n *      R.thunkify(R.identity)(42)(); //=> 42\n *      R.thunkify((a, b) => a + b)(25, 17)(); //=> 42\n */\n\n\nvar thunkify = /*#__PURE__*/_curry1(function thunkify(fn) {\n  return curryN(fn.length, function createThunk() {\n    var fnArgs = arguments;\n    return function invokeThunk() {\n      return fn.apply(this, fnArgs);\n    };\n  });\n});\n\nmodule.exports = thunkify;"]}
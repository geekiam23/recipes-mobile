{"version":3,"sources":["composeWith.js"],"names":["_curry2","require","pipeWith","reverse","composeWith","xf","list","apply","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAAgBC,OAAO,sBAAlC;;AAEA,IAAIC,QAAQ,GAAgBD,OAAO,cAAnC;;AAEA,IAAIE,OAAO,GAAgBF,OAAO,aAAlC;;AA0BA,IAAIG,WAAW,GAAgBJ,OAAO,CAAC,SAASI,WAAT,CAAqBC,EAArB,EAAyBC,IAAzB,EAA+B;AACpE,SAAOJ,QAAQ,CAACK,KAAT,CAAe,IAAf,EAAqB,CAACF,EAAD,EAAKF,OAAO,CAACG,IAAD,CAAZ,CAArB,CAAP;AACD,CAFqC,CAAtC;;AAGAE,MAAM,CAACC,OAAP,GAAiBL,WAAjB","sourcesContent":["var _curry2 = /*#__PURE__*/require('./internal/_curry2');\n\nvar pipeWith = /*#__PURE__*/require('./pipeWith');\n\nvar reverse = /*#__PURE__*/require('./reverse');\n\n/**\n * Performs right-to-left function composition using transforming function. The rightmost function may have\n * any arity; the remaining functions must be unary.\n *\n * **Note:** The result of compose is not automatically curried.\n *\n * @func\n * @memberOf R\n * @category Function\n * @sig ((* -> *), [(y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)]) -> ((a, b, ..., n) -> z)\n * @param {...Function} ...functions The functions to compose\n * @return {Function}\n * @see R.compose, R.pipeWith\n * @example\n *\n *      const composeWhileNotNil = R.composeWith((f, res) => R.isNil(res) ? res : f(res));\n *\n *      composeWhileNotNil([R.inc, R.prop('age')])({age: 1}) //=> 2\n *      composeWhileNotNil([R.inc, R.prop('age')])({}) //=> undefined\n *\n * @symb R.composeWith(f)([g, h, i])(...args) = f(g, f(h, f(i, ...args)))\n */\n\n\nvar composeWith = /*#__PURE__*/_curry2(function composeWith(xf, list) {\n  return pipeWith.apply(this, [xf, reverse(list)]);\n});\nmodule.exports = composeWith;"]}
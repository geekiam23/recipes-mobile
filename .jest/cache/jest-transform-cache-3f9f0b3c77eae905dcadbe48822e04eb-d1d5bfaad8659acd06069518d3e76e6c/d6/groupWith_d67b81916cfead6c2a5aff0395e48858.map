{"version":3,"sources":["groupWith.js"],"names":["_curry2","require","groupWith","fn","list","res","idx","len","length","nextidx","push","slice","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAAgBC,OAAO,sBAAlC;;AAkCA,IAAIC,SAAS,GAAgBF,OAAO,CAAC,UAAUG,EAAV,EAAcC,IAAd,EAAoB;AACvD,MAAIC,GAAG,GAAG,EAAV;AACA,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,GAAG,GAAGH,IAAI,CAACI,MAAf;;AACA,SAAOF,GAAG,GAAGC,GAAb,EAAkB;AAChB,QAAIE,OAAO,GAAGH,GAAG,GAAG,CAApB;;AACA,WAAOG,OAAO,GAAGF,GAAV,IAAiBJ,EAAE,CAACC,IAAI,CAACK,OAAO,GAAG,CAAX,CAAL,EAAoBL,IAAI,CAACK,OAAD,CAAxB,CAA1B,EAA8D;AAC5DA,MAAAA,OAAO,IAAI,CAAX;AACD;;AACDJ,IAAAA,GAAG,CAACK,IAAJ,CAASN,IAAI,CAACO,KAAL,CAAWL,GAAX,EAAgBG,OAAhB,CAAT;AACAH,IAAAA,GAAG,GAAGG,OAAN;AACD;;AACD,SAAOJ,GAAP;AACD,CAbmC,CAApC;;AAcAO,MAAM,CAACC,OAAP,GAAiBX,SAAjB","sourcesContent":["var _curry2 = /*#__PURE__*/require('./internal/_curry2');\n\n/**\n * Takes a list and returns a list of lists where each sublist's elements are\n * all satisfied pairwise comparison according to the provided function.\n * Only adjacent elements are passed to the comparison function.\n *\n * @func\n * @memberOf R\n * @since v0.21.0\n * @category List\n * @sig ((a, a) → Boolean) → [a] → [[a]]\n * @param {Function} fn Function for determining whether two given (adjacent)\n *        elements should be in the same group\n * @param {Array} list The array to group. Also accepts a string, which will be\n *        treated as a list of characters.\n * @return {List} A list that contains sublists of elements,\n *         whose concatenations are equal to the original list.\n * @example\n *\n * R.groupWith(R.equals, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n * //=> [[0], [1, 1], [2], [3], [5], [8], [13], [21]]\n *\n * R.groupWith((a, b) => a + 1 === b, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n * //=> [[0, 1], [1, 2, 3], [5], [8], [13], [21]]\n *\n * R.groupWith((a, b) => a % 2 === b % 2, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n * //=> [[0], [1, 1], [2], [3, 5], [8], [13, 21]]\n *\n * R.groupWith(R.eqBy(isVowel), 'aestiou')\n * //=> ['ae', 'st', 'iou']\n */\n\n\nvar groupWith = /*#__PURE__*/_curry2(function (fn, list) {\n  var res = [];\n  var idx = 0;\n  var len = list.length;\n  while (idx < len) {\n    var nextidx = idx + 1;\n    while (nextidx < len && fn(list[nextidx - 1], list[nextidx])) {\n      nextidx += 1;\n    }\n    res.push(list.slice(idx, nextidx));\n    idx = nextidx;\n  }\n  return res;\n});\nmodule.exports = groupWith;"]}
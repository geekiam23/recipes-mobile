b98dbb68ac882cbaabb2a0a333002dfd
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var _require = require('events'),
    EventEmitter = _require.EventEmitter;

var debug = require('debug')('nock.socket');

module.exports = function (_EventEmitter) {
  (0, _inherits2.default)(Socket, _EventEmitter);

  var _super = _createSuper(Socket);

  function Socket(options) {
    var _this;

    (0, _classCallCheck2.default)(this, Socket);
    _this = _super.call(this);

    if (options.proto === 'https') {
      _this.authorized = true;
      _this.encrypted = true;
    }

    _this.bufferSize = 0;
    _this.writableLength = 0;
    _this.writable = true;
    _this.readable = true;
    _this.pending = false;
    _this.destroyed = false;
    _this.connecting = true;
    _this._hadError = false;
    _this.timeout = 0;
    var ipv6 = options.family === 6;
    _this.remoteFamily = ipv6 ? 'IPv6' : 'IPv4';
    _this.localAddress = _this.remoteAddress = ipv6 ? '::1' : '127.0.0.1';
    _this.localPort = _this.remotePort = parseInt(options.port);
    return _this;
  }

  (0, _createClass2.default)(Socket, [{
    key: "setNoDelay",
    value: function setNoDelay() {}
  }, {
    key: "setKeepAlive",
    value: function setKeepAlive() {}
  }, {
    key: "resume",
    value: function resume() {}
  }, {
    key: "ref",
    value: function ref() {}
  }, {
    key: "unref",
    value: function unref() {}
  }, {
    key: "address",
    value: function address() {
      return {
        port: this.remotePort,
        family: this.remoteFamily,
        address: this.remoteAddress
      };
    }
  }, {
    key: "setTimeout",
    value: function setTimeout(timeoutMs, fn) {
      this.timeout = timeoutMs;

      if (fn) {
        this.once('timeout', fn);
      }

      return this;
    }
  }, {
    key: "applyDelay",
    value: function applyDelay(delayMs) {
      if (this.timeout && delayMs > this.timeout) {
        debug('socket timeout');
        this.emit('timeout');
      }
    }
  }, {
    key: "getPeerCertificate",
    value: function getPeerCertificate() {
      return Buffer.from((Math.random() * 10000 + Date.now()).toString()).toString('base64');
    }
  }, {
    key: "destroy",
    value: function destroy(err) {
      var _this2 = this;

      if (this.destroyed) {
        return this;
      }

      debug('socket destroy');
      this.destroyed = true;
      this.readable = this.writable = false;
      this.readableEnded = this.writableFinished = true;
      process.nextTick(function () {
        if (err) {
          _this2._hadError = true;

          _this2.emit('error', err);
        }

        _this2.emit('close');
      });
      return this;
    }
  }]);
  return Socket;
}(EventEmitter);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNvY2tldC5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiRXZlbnRFbWl0dGVyIiwiZGVidWciLCJtb2R1bGUiLCJleHBvcnRzIiwib3B0aW9ucyIsInByb3RvIiwiYXV0aG9yaXplZCIsImVuY3J5cHRlZCIsImJ1ZmZlclNpemUiLCJ3cml0YWJsZUxlbmd0aCIsIndyaXRhYmxlIiwicmVhZGFibGUiLCJwZW5kaW5nIiwiZGVzdHJveWVkIiwiY29ubmVjdGluZyIsIl9oYWRFcnJvciIsInRpbWVvdXQiLCJpcHY2IiwiZmFtaWx5IiwicmVtb3RlRmFtaWx5IiwibG9jYWxBZGRyZXNzIiwicmVtb3RlQWRkcmVzcyIsImxvY2FsUG9ydCIsInJlbW90ZVBvcnQiLCJwYXJzZUludCIsInBvcnQiLCJhZGRyZXNzIiwidGltZW91dE1zIiwiZm4iLCJvbmNlIiwiZGVsYXlNcyIsImVtaXQiLCJCdWZmZXIiLCJmcm9tIiwiTWF0aCIsInJhbmRvbSIsIkRhdGUiLCJub3ciLCJ0b1N0cmluZyIsImVyciIsInJlYWRhYmxlRW5kZWQiLCJ3cml0YWJsZUZpbmlzaGVkIiwicHJvY2VzcyIsIm5leHRUaWNrIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUEsZUFBeUJBLE9BQU8sQ0FBQyxRQUFELENBQWhDO0FBQUEsSUFBUUMsWUFBUixZQUFRQSxZQUFSOztBQUNBLElBQU1DLEtBQUssR0FBR0YsT0FBTyxDQUFDLE9BQUQsQ0FBUCxDQUFpQixhQUFqQixDQUFkOztBQUVBRyxNQUFNLENBQUNDLE9BQVA7QUFBQTs7QUFBQTs7QUFDRSxrQkFBWUMsT0FBWixFQUFxQjtBQUFBOztBQUFBO0FBQ25COztBQUdBLFFBQUlBLE9BQU8sQ0FBQ0MsS0FBUixLQUFrQixPQUF0QixFQUErQjtBQUU3QixZQUFLQyxVQUFMLEdBQWtCLElBQWxCO0FBRUEsWUFBS0MsU0FBTCxHQUFpQixJQUFqQjtBQUNEOztBQUVELFVBQUtDLFVBQUwsR0FBa0IsQ0FBbEI7QUFDQSxVQUFL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b250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCB7IEV2ZW50RW1pdHRlciB9ID0gcmVxdWlyZSgnZXZlbnRzJylcbmNvbnN0IGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnbm9jay5zb2NrZXQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIFNvY2tldCBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcigpXG5cbiAgICAvLyBQcmV0ZW5kIHRoaXMgaXMgYSBUTFNTb2NrZXRcbiAgICBpZiAob3B0aW9ucy5wcm90byA9PT0gJ2h0dHBzJykge1xuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL25vY2svbm9jay9pc3N1ZXMvMTU4XG4gICAgICB0aGlzLmF1dGhvcml6ZWQgPSB0cnVlXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbm9jay9ub2NrL2lzc3Vlcy8yMTQ3XG4gICAgICB0aGlzLmVuY3J5cHRlZCA9IHRydWVcbiAgICB9XG5cbiAgICB0aGlzLmJ1ZmZlclNpemUgPSAwXG4gICAgdGhpcy53cml0YWJsZUxlbmd0aCA9IDBcbiAgICB0aGlzLndyaXRhYmxlID0gdHJ1ZVxuICAgIHRoaXMucmVhZGFibGUgPSB0cnVlXG4gICAgdGhpcy5wZW5kaW5nID0gZmFsc2VcbiAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlXG4gICAgdGhpcy5jb25uZWN0aW5nID0gdHJ1ZVxuXG4gICAgLy8gVW5kb2N1bWVudGVkIGZsYWcgdXNlZCBieSBDbGllbnRSZXF1ZXN0IHRvIGVuc3VyZSBlcnJvcnMgYXJlbid0IGRvdWJsZS1maXJlZFxuICAgIHRoaXMuX2hhZEVycm9yID0gZmFsc2VcblxuICAgIC8vIE1heGltdW0gYWxsb3dlZCBkZWxheS4gMCBtZWFucyB1bmxpbWl0ZWQuXG4gICAgdGhpcy50aW1lb3V0ID0gMFxuXG4gICAgY29uc3QgaXB2NiA9IG9wdGlvbnMuZmFtaWx5ID09PSA2XG4gICAgdGhpcy5yZW1vdGVGYW1pbHkgPSBpcHY2ID8gJ0lQdjYnIDogJ0lQdjQnXG4gICAgdGhpcy5sb2NhbEFkZHJlc3MgPSB0aGlzLnJlbW90ZUFkZHJlc3MgPSBpcHY2ID8gJzo6MScgOiAnMTI3LjAuMC4xJ1xuICAgIHRoaXMubG9jYWxQb3J0ID0gdGhpcy5yZW1vdGVQb3J0ID0gcGFyc2VJbnQob3B0aW9ucy5wb3J0KVxuICB9XG5cbiAgc2V0Tm9EZWxheSgpIHt9XG4gIHNldEtlZXBBbGl2ZSgpIHt9XG4gIHJlc3VtZSgpIHt9XG4gIHJlZigpIHt9XG4gIHVucmVmKCkge31cblxuICBhZGRyZXNzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwb3J0OiB0aGlzLnJlbW90ZVBvcnQsXG4gICAgICBmYW1pbHk6IHRoaXMucmVtb3RlRmFtaWx5LFxuICAgICAgYWRkcmVzczogdGhpcy5yZW1vdGVBZGRyZXNzLFxuICAgIH1cbiAgfVxuXG4gIHNldFRpbWVvdXQodGltZW91dE1zLCBmbikge1xuICAgIHRoaXMudGltZW91dCA9IHRpbWVvdXRNc1xuICAgIGlmIChmbikge1xuICAgICAgdGhpcy5vbmNlKCd0aW1lb3V0JywgZm4pXG4gICAgfVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogQXJ0aWZpY2lhbCBkZWxheSB0aGF0IHdpbGwgdHJpcCBzb2NrZXQgdGltZW91dHMgd2hlbiBhcHByb3ByaWF0ZS5cbiAgICpcbiAgICogRG9lc24ndCBhY3R1YWxseSB3YWl0IGZvciB0aW1lIHRvIHBhc3MuXG4gICAqIFRpbWVvdXQgZXZlbnRzIGRvbid0IG5lY2Vzc2FyaWx5IGVuZCB0aGUgcmVxdWVzdC5cbiAgICogV2hpbGUgbWFueSBjbGllbnRzIGNob29zZSB0byBhYm9ydCB0aGUgcmVxdWVzdCB1cG9uIGEgdGltZW91dCwgTm9kZSBpdHNlbGYgZG9lcyBub3QuXG4gICAqL1xuICBhcHBseURlbGF5KGRlbGF5TXMpIHtcbiAgICBpZiAodGhpcy50aW1lb3V0ICYmIGRlbGF5TXMgPiB0aGlzLnRpbWVvdXQpIHtcbiAgICAgIGRlYnVnKCdzb2NrZXQgdGltZW91dCcpXG4gICAgICB0aGlzLmVtaXQoJ3RpbWVvdXQnKVxuICAgIH1cbiAgfVxuXG4gIGdldFBlZXJDZXJ0aWZpY2F0ZSgpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oXG4gICAgICAoTWF0aC5yYW5kb20oKSAqIDEwMDAwICsgRGF0ZS5ub3coKSkudG9TdHJpbmcoKVxuICAgICkudG9TdHJpbmcoJ2Jhc2U2NCcpXG4gIH1cblxuICAvKipcbiAgICogRGVub3RlcyB0aGF0IG5vIG1vcmUgSS9PIGFjdGl2aXR5IHNob3VsZCBoYXBwZW4gb24gdGhpcyBzb2NrZXQuXG4gICAqXG4gICAqIFRoZSBpbXBsZW1lbnRhdGlvbiBpbiBOb2RlIGlmIGZhciBtb3JlIGNvbXBsZXggYXMgaXQganVnZ2xlcyB1bmRlcmx5aW5nIGFzeW5jIHN0cmVhbXMuXG4gICAqIEZvciB0aGUgcHVycG9zZXMgb2YgTm9jaywgd2UganVzdCBuZWVkIGl0IHRvIHNldCBzb21lIGZsYWdzIGFuZCBvbiB0aGUgZmlyc3QgY2FsbFxuICAgKiBlbWl0IGEgJ2Nsb3NlJyBhbmQgb3B0aW9uYWwgJ2Vycm9yJyBldmVudC4gQm90aCBldmVudHMgcHJvcGFnYXRlIHRocm91Z2ggdGhlIHJlcXVlc3Qgb2JqZWN0LlxuICAgKi9cbiAgZGVzdHJveShlcnIpIHtcbiAgICBpZiAodGhpcy5kZXN0cm95ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgZGVidWcoJ3NvY2tldCBkZXN0cm95JylcbiAgICB0aGlzLmRlc3Ryb3llZCA9IHRydWVcbiAgICB0aGlzLnJlYWRhYmxlID0gdGhpcy53cml0YWJsZSA9IGZhbHNlXG4gICAgdGhpcy5yZWFkYWJsZUVuZGVkID0gdGhpcy53cml0YWJsZUZpbmlzaGVkID0gdHJ1ZVxuXG4gICAgcHJvY2Vzcy5uZXh0VGljaygoKSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHRoaXMuX2hhZEVycm9yID0gdHJ1ZVxuICAgICAgICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKVxuICAgICAgfVxuICAgICAgdGhpcy5lbWl0KCdjbG9zZScpXG4gICAgfSlcblxuICAgIHJldHVybiB0aGlzXG4gIH1cbn1cbiJdfQ==
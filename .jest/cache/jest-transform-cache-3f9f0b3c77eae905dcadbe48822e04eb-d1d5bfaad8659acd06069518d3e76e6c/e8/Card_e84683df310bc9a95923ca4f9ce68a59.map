{"version":3,"sources":["Card.tsx"],"names":["GESTURE_VELOCITY_IMPACT","TRUE","FALSE","GESTURE_RESPONSE_DISTANCE_HORIZONTAL","GESTURE_RESPONSE_DISTANCE_VERTICAL","useNativeDriver","Platform","hasOpacityStyle","style","flattenedStyle","StyleSheet","Card","React","overlayEnabled","shadowEnabled","gestureEnabled","gestureVelocityImpact","overlay","styles","componentDidMount","closing","componentDidUpdate","height","width","prevProps","gestureDirection","toValue","componentWillUnmount","Animated","velocity","onTransition","spec","transitionSpec","animation","clearTimeout","gesture","undefined","isInteraction","finished","onClose","onOpen","enabled","pointerEvents","InteractionManager","nativeEvent","GestureState","onGestureBegin","onGestureCanceled","distance","layout","translation","setTimeout","onGestureEnd","styleInterpolator","index","current","progress","next","swiping","inverted","layouts","screen","insets","top","right","bottom","left","insetLeft","gestureResponseDistance","maxDeltaX","minOffsetY","hitSlop","invertedMultiplier","minOffsetX","maxDeltaY","render","containerStyle","rest","interpolatedStyle","animationContext","shadowStyle","handleGestureEvent","translationY","translationX","backgroundColor","contentStyle","isTransparent","opacity","absoluteFill","overlayStyle","handleGestureStateChange","container","flex","shadow","position","shadowRadius","shadowColor","shadowOpacity","shadowHorizontal","shadowOffset","shadowLeft","shadowRight","shadowVertical","shadowTop","shadowBottom"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  StyleSheet,\n  ViewProps,\n  StyleProp,\n  ViewStyle,\n  Platform,\n  InteractionManager,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\nimport Color from 'color';\n\nimport CardSheet from './CardSheet';\nimport {\n  PanGestureHandler,\n  GestureState,\n  PanGestureHandlerGestureEvent,\n} from '../GestureHandler';\nimport CardAnimationContext from '../../utils/CardAnimationContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport getInvertedMultiplier from '../../utils/getInvertedMultiplier';\nimport memoize from '../../utils/memoize';\nimport type {\n  TransitionSpec,\n  StackCardStyleInterpolator,\n  GestureDirection,\n  Layout,\n} from '../../types';\n\ntype Props = ViewProps & {\n  index: number;\n  closing: boolean;\n  next?: Animated.AnimatedInterpolation;\n  current: Animated.AnimatedInterpolation;\n  gesture: Animated.Value;\n  layout: Layout;\n  insets: EdgeInsets;\n  pageOverflowEnabled: boolean;\n  gestureDirection: GestureDirection;\n  onOpen: () => void;\n  onClose: () => void;\n  onTransition?: (props: { closing: boolean; gesture: boolean }) => void;\n  onGestureBegin?: () => void;\n  onGestureCanceled?: () => void;\n  onGestureEnd?: () => void;\n  children: React.ReactNode;\n  overlay: (props: {\n    style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  }) => React.ReactNode;\n  overlayEnabled: boolean;\n  shadowEnabled: boolean;\n  gestureEnabled: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact: number;\n  transitionSpec: {\n    open: TransitionSpec;\n    close: TransitionSpec;\n  };\n  styleInterpolator: StackCardStyleInterpolator;\n  containerStyle?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n};\n\nconst GESTURE_VELOCITY_IMPACT = 0.3;\n\nconst TRUE = 1;\nconst FALSE = 0;\n\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nconst useNativeDriver = Platform.OS !== 'web';\n\nconst hasOpacityStyle = (style: any) => {\n  if (style) {\n    const flattenedStyle = StyleSheet.flatten(style);\n    return flattenedStyle.opacity != null;\n  }\n\n  return false;\n};\n\nexport default class Card extends React.Component<Props> {\n  static defaultProps = {\n    overlayEnabled: Platform.OS !== 'ios',\n    shadowEnabled: true,\n    gestureEnabled: true,\n    gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n    overlay: ({\n      style,\n    }: {\n      style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n    }) =>\n      style ? (\n        <Animated.View pointerEvents=\"none\" style={[styles.overlay, style]} />\n      ) : null,\n  };\n\n  componentDidMount() {\n    this.animate({ closing: this.props.closing });\n    this.isCurrentlyMounted = true;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { layout, gestureDirection, closing } = this.props;\n    const { width, height } = layout;\n\n    if (width !== prevProps.layout.width) {\n      this.layout.width.setValue(width);\n    }\n\n    if (height !== prevProps.layout.height) {\n      this.layout.height.setValue(height);\n    }\n\n    if (gestureDirection !== prevProps.gestureDirection) {\n      this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n    }\n\n    const toValue = this.getAnimateToValue(this.props);\n\n    if (\n      this.getAnimateToValue(prevProps) !== toValue ||\n      this.lastToValue !== toValue\n    ) {\n      // We need to trigger the animation when route was closed\n      // Thr route might have been closed by a `POP` action or by a gesture\n      // When route was closed due to a gesture, the animation would've happened already\n      // It's still important to trigger the animation so that `onClose` is called\n      // If `onClose` is not called, cleanup step won't be performed for gestures\n      this.animate({ closing });\n    }\n  }\n\n  componentWillUnmount() {\n    this.isCurrentlyMounted = false;\n    this.handleEndInteraction();\n  }\n\n  private isCurrentlyMounted = false;\n\n  private isClosing = new Animated.Value(FALSE);\n\n  private inverted = new Animated.Value(\n    getInvertedMultiplier(this.props.gestureDirection)\n  );\n\n  private layout = {\n    width: new Animated.Value(this.props.layout.width),\n    height: new Animated.Value(this.props.layout.height),\n  };\n\n  private isSwiping = new Animated.Value(FALSE);\n\n  private interactionHandle: number | undefined;\n\n  private pendingGestureCallback: number | undefined;\n\n  private lastToValue: number | undefined;\n\n  private animate = ({\n    closing,\n    velocity,\n  }: {\n    closing: boolean;\n    velocity?: number;\n  }) => {\n    const {\n      gesture,\n      transitionSpec,\n      onOpen,\n      onClose,\n      onTransition,\n    } = this.props;\n\n    const toValue = this.getAnimateToValue({\n      ...this.props,\n      closing,\n    });\n\n    this.lastToValue = toValue;\n\n    const spec = closing ? transitionSpec.close : transitionSpec.open;\n\n    const animation =\n      spec.animation === 'spring' ? Animated.spring : Animated.timing;\n\n    this.setPointerEventsEnabled(!closing);\n    this.handleStartInteraction();\n\n    clearTimeout(this.pendingGestureCallback);\n\n    onTransition?.({ closing, gesture: velocity !== undefined });\n    animation(gesture, {\n      ...spec.config,\n      velocity,\n      toValue,\n      useNativeDriver,\n      isInteraction: false,\n    }).start(({ finished }) => {\n      this.handleEndInteraction();\n\n      clearTimeout(this.pendingGestureCallback);\n\n      if (finished) {\n        if (closing) {\n          onClose();\n        } else {\n          onOpen();\n        }\n\n        if (this.isCurrentlyMounted) {\n          // Make sure to re-open screen if it wasn't removed\n          this.forceUpdate();\n        }\n      }\n    });\n  };\n\n  private getAnimateToValue = ({\n    closing,\n    layout,\n    gestureDirection,\n  }: {\n    closing?: boolean;\n    layout: Layout;\n    gestureDirection: GestureDirection;\n  }) => {\n    if (!closing) {\n      return 0;\n    }\n\n    return getDistanceForDirection(layout, gestureDirection);\n  };\n\n  private setPointerEventsEnabled = (enabled: boolean) => {\n    const pointerEvents = enabled ? 'box-none' : 'none';\n\n    this.contentRef.current?.setNativeProps({ pointerEvents });\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleGestureStateChange = ({\n    nativeEvent,\n  }: PanGestureHandlerGestureEvent) => {\n    const {\n      layout,\n      onClose,\n      onGestureBegin,\n      onGestureCanceled,\n      onGestureEnd,\n      gestureDirection,\n      gestureVelocityImpact,\n    } = this.props;\n\n    switch (nativeEvent.state) {\n      case GestureState.BEGAN:\n        this.isSwiping.setValue(TRUE);\n        this.handleStartInteraction();\n        onGestureBegin?.();\n        break;\n      case GestureState.CANCELLED: {\n        this.isSwiping.setValue(FALSE);\n        this.handleEndInteraction();\n\n        const velocity =\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n            ? nativeEvent.velocityY\n            : nativeEvent.velocityX;\n\n        this.animate({ closing: this.props.closing, velocity });\n\n        onGestureCanceled?.();\n        break;\n      }\n      case GestureState.END: {\n        this.isSwiping.setValue(FALSE);\n\n        let distance;\n        let translation;\n        let velocity;\n\n        if (\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n        ) {\n          distance = layout.height;\n          translation = nativeEvent.translationY;\n          velocity = nativeEvent.velocityY;\n        } else {\n          distance = layout.width;\n          translation = nativeEvent.translationX;\n          velocity = nativeEvent.velocityX;\n        }\n\n        const closing =\n          (translation + velocity * gestureVelocityImpact) *\n            getInvertedMultiplier(gestureDirection) >\n          distance / 2\n            ? velocity !== 0 || translation !== 0\n            : this.props.closing;\n\n        this.animate({ closing, velocity });\n\n        if (closing) {\n          // We call onClose with a delay to make sure that the animation has already started\n          // This will make sure that the state update caused by this doesn't affect start of animation\n          this.pendingGestureCallback = (setTimeout(() => {\n            onClose();\n\n            // Trigger an update after we dispatch the action to remove the screen\n            // This will make sure that we check if the screen didn't get removed so we can cancel the animation\n            this.forceUpdate();\n          }, 32) as any) as number;\n        }\n\n        onGestureEnd?.();\n        break;\n      }\n    }\n  };\n\n  // Memoize this to avoid extra work on re-render\n  private getInterpolatedStyle = memoize(\n    (\n      styleInterpolator: StackCardStyleInterpolator,\n      index: number,\n      current: Animated.AnimatedInterpolation,\n      next: Animated.AnimatedInterpolation | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) =>\n      styleInterpolator({\n        index,\n        current: { progress: current },\n        next: next && { progress: next },\n        closing: this.isClosing,\n        swiping: this.isSwiping,\n        inverted: this.inverted,\n        layouts: {\n          screen: layout,\n        },\n        insets: {\n          top: insetTop,\n          right: insetRight,\n          bottom: insetBottom,\n          left: insetLeft,\n        },\n      })\n  );\n\n  // Keep track of the animation context when deps changes.\n  private getCardAnimationContext = memoize(\n    (\n      index: number,\n      current: Animated.AnimatedInterpolation,\n      next: Animated.AnimatedInterpolation | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) => ({\n      index,\n      current: { progress: current },\n      next: next && { progress: next },\n      closing: this.isClosing,\n      swiping: this.isSwiping,\n      inverted: this.inverted,\n      layouts: {\n        screen: layout,\n      },\n      insets: {\n        top: insetTop,\n        right: insetRight,\n        bottom: insetBottom,\n        left: insetLeft,\n      },\n    })\n  );\n\n  private gestureActivationCriteria() {\n    const { layout, gestureDirection, gestureResponseDistance } = this.props;\n\n    const distance =\n      gestureDirection === 'vertical' ||\n      gestureDirection === 'vertical-inverted'\n        ? gestureResponseDistance?.vertical !== undefined\n          ? gestureResponseDistance.vertical\n          : GESTURE_RESPONSE_DISTANCE_VERTICAL\n        : gestureResponseDistance?.horizontal !== undefined\n        ? gestureResponseDistance.horizontal\n        : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n    if (gestureDirection === 'vertical') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: 5,\n        hitSlop: { bottom: -layout.height + distance },\n      };\n    } else if (gestureDirection === 'vertical-inverted') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: -5,\n        hitSlop: { top: -layout.height + distance },\n      };\n    } else {\n      const hitSlop = -layout.width + distance;\n      const invertedMultiplier = getInvertedMultiplier(gestureDirection);\n\n      if (invertedMultiplier === 1) {\n        return {\n          minOffsetX: 5,\n          maxDeltaY: 20,\n          hitSlop: { right: hitSlop },\n        };\n      } else {\n        return {\n          minOffsetX: -5,\n          maxDeltaY: 20,\n          hitSlop: { left: hitSlop },\n        };\n      }\n    }\n  }\n\n  private contentRef = React.createRef<View>();\n\n  render() {\n    const {\n      styleInterpolator,\n      index,\n      current,\n      gesture,\n      next,\n      layout,\n      insets,\n      overlay,\n      overlayEnabled,\n      shadowEnabled,\n      gestureEnabled,\n      gestureDirection,\n      pageOverflowEnabled,\n      children,\n      containerStyle: customContainerStyle,\n      contentStyle,\n      ...rest\n    } = this.props;\n\n    const interpolatedStyle = this.getInterpolatedStyle(\n      styleInterpolator,\n      index,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const animationContext = this.getCardAnimationContext(\n      index,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const {\n      containerStyle,\n      cardStyle,\n      overlayStyle,\n      shadowStyle,\n    } = interpolatedStyle;\n\n    const handleGestureEvent = gestureEnabled\n      ? Animated.event(\n          [\n            {\n              nativeEvent:\n                gestureDirection === 'vertical' ||\n                gestureDirection === 'vertical-inverted'\n                  ? { translationY: gesture }\n                  : { translationX: gesture },\n            },\n          ],\n          { useNativeDriver }\n        )\n      : undefined;\n\n    const { backgroundColor } = StyleSheet.flatten(contentStyle || {});\n    const isTransparent =\n      typeof backgroundColor === 'string'\n        ? Color(backgroundColor).alpha() === 0\n        : false;\n\n    return (\n      <CardAnimationContext.Provider value={animationContext}>\n        <Animated.View\n          style={{\n            // This is a dummy style that doesn't actually change anything visually.\n            // Animated needs the animated value to be used somewhere, otherwise things don't update properly.\n            // If we disable animations and hide header, it could end up making the value unused.\n            // So we have this dummy style that will always be used regardless of what else changed.\n            opacity: current,\n          }}\n          // Make sure that this view isn't removed. If this view is removed, our style with animated value won't apply\n          collapsable={false}\n        />\n        <View pointerEvents=\"box-none\" {...rest}>\n          {overlayEnabled ? (\n            <View pointerEvents=\"box-none\" style={StyleSheet.absoluteFill}>\n              {overlay({ style: overlayStyle })}\n            </View>\n          ) : null}\n          <Animated.View\n            needsOffscreenAlphaCompositing={hasOpacityStyle(containerStyle)}\n            style={[styles.container, containerStyle, customContainerStyle]}\n            pointerEvents=\"box-none\"\n          >\n            <PanGestureHandler\n              enabled={layout.width !== 0 && gestureEnabled}\n              onGestureEvent={handleGestureEvent}\n              onHandlerStateChange={this.handleGestureStateChange}\n              {...this.gestureActivationCriteria()}\n            >\n              <Animated.View style={[styles.container, cardStyle]}>\n                {shadowEnabled && shadowStyle && !isTransparent ? (\n                  <Animated.View\n                    style={[\n                      styles.shadow,\n                      gestureDirection === 'horizontal'\n                        ? [styles.shadowHorizontal, styles.shadowLeft]\n                        : gestureDirection === 'horizontal-inverted'\n                        ? [styles.shadowHorizontal, styles.shadowRight]\n                        : gestureDirection === 'vertical'\n                        ? [styles.shadowVertical, styles.shadowTop]\n                        : [styles.shadowVertical, styles.shadowBottom],\n                      { backgroundColor },\n                      shadowStyle,\n                    ]}\n                    pointerEvents=\"none\"\n                  />\n                ) : null}\n                <CardSheet\n                  ref={this.contentRef}\n                  enabled={pageOverflowEnabled}\n                  layout={layout}\n                  style={contentStyle}\n                >\n                  {children}\n                </CardSheet>\n              </Animated.View>\n            </PanGestureHandler>\n          </Animated.View>\n        </View>\n      </CardAnimationContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000',\n  },\n  shadow: {\n    position: 'absolute',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3,\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: { width: -1, height: 1 },\n  },\n  shadowLeft: {\n    left: 0,\n  },\n  shadowRight: {\n    right: 0,\n  },\n  shadowVertical: {\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: { width: 1, height: -1 },\n  },\n  shadowTop: {\n    top: 0,\n  },\n  shadowBottom: {\n    bottom: 0,\n  },\n});\n"]}